<?xml version="1.0"?>
<Assembly>
  <Namespace Name="System">
    <Type Name="Object">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="bool Equals(object , object )" />
      <Method Sig="bool ReferenceEquals(object , object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance class Type GetType()" />
    </Type>
    <Type Name="Array">
      <Method Sig=" &lt;1&gt; AsReadOnly(class ReadOnlyCollection`1 )" />
      <Method Sig=" &lt;1&gt; void Resize(&amp; [] !!0, int )" />
      <Method Sig="class Array CreateInstance(class Type , int )" />
      <Method Sig="class Array CreateInstance(class Type , int , int )" />
      <Method Sig="class Array CreateInstance(class Type , int , int , int )" />
      <Method Sig="class Array CreateInstance(class Type , [] int )" />
      <Method Sig="class Array CreateInstance(class Type , [] in64 )" />
      <Method Sig="class Array CreateInstance(class Type , [] int , [] int )" />
      <Method Sig="void Copy(class Array , class Array , int )" />
      <Method Sig="void Copy(class Array , int , class Array , int , int )" />
      <Method Sig="void ConstrainedCopy(class Array , int , class Array , int , int )" />
      <Method Sig="void Copy(class Array , class Array , in64 )" />
      <Method Sig="void Copy(class Array , in64 , class Array , in64 , in64 )" />
      <Method Sig="void Clear(class Array , int , int )" />
      <Method Sig="instance object GetValue([] int )" />
      <Method Sig="instance object GetValue(int )" />
      <Method Sig="instance object GetValue(int , int )" />
      <Method Sig="instance object GetValue(int , int , int )" />
      <Method Sig="instance object GetValue(in64 )" />
      <Method Sig="instance object GetValue(in64 , in64 )" />
      <Method Sig="instance object GetValue(in64 , in64 , in64 )" />
      <Method Sig="instance object GetValue([] in64 )" />
      <Method Sig="instance void SetValue(object , int )" />
      <Method Sig="instance void SetValue(object , int , int )" />
      <Method Sig="instance void SetValue(object , int , int , int )" />
      <Method Sig="instance void SetValue(object , [] int )" />
      <Method Sig="instance void SetValue(object , in64 )" />
      <Method Sig="instance void SetValue(object , in64 , in64 )" />
      <Method Sig="instance void SetValue(object , in64 , in64 , in64 )" />
      <Method Sig="instance void SetValue(object , [] in64 )" />
      <Method Sig="instance int get_Length()" />
      <Method Sig="instance in64 get_LongLength()" />
      <Method Sig="instance int GetLength(int )" />
      <Method Sig="instance in64 GetLongLength(int )" />
      <Method Sig="instance int get_Rank()" />
      <Method Sig="instance int GetUpperBound(int )" />
      <Method Sig="instance int GetLowerBound(int )" />
      <Method Sig="instance object get_SyncRoot()" />
      <Method Sig="instance bool get_IsReadOnly()" />
      <Method Sig="instance bool get_IsFixedSize()" />
      <Method Sig="instance bool get_IsSynchronized()" />
      <Method Sig="instance object Clone()" />
      <Method Sig="int BinarySearch(class Array , object )" />
      <Method Sig="int BinarySearch(class Array , int , int , object )" />
      <Method Sig="int BinarySearch(class Array , object , class IComparer )" />
      <Method Sig="int BinarySearch(class Array , int , int , object , class IComparer )" />
      <Method Sig=" &lt;1&gt; int BinarySearch([] !!0, !!0)" />
      <Method Sig=" &lt;1&gt; int BinarySearch([] !!0, !!0, )" />
      <Method Sig=" &lt;1&gt; int BinarySearch([] !!0, int , int , !!0)" />
      <Method Sig=" &lt;1&gt; int BinarySearch([] !!0, int , int , !!0, )" />
      <Method Sig=" &lt;2&gt; [] !!1 ConvertAll([] !!0, )" />
      <Method Sig="instance void CopyTo(class Array , int )" />
      <Method Sig="instance void CopyTo(class Array , in64 )" />
      <Method Sig=" &lt;1&gt; bool Exists([] !!0, )" />
      <Method Sig=" &lt;1&gt; !!0 Find([] !!0, )" />
      <Method Sig=" &lt;1&gt; [] !!0 FindAll([] !!0, )" />
      <Method Sig=" &lt;1&gt; int FindIndex([] !!0, )" />
      <Method Sig=" &lt;1&gt; int FindIndex([] !!0, int , )" />
      <Method Sig=" &lt;1&gt; int FindIndex([] !!0, int , int , )" />
      <Method Sig=" &lt;1&gt; !!0 FindLast([] !!0, )" />
      <Method Sig=" &lt;1&gt; int FindLastIndex([] !!0, )" />
      <Method Sig=" &lt;1&gt; int FindLastIndex([] !!0, int , )" />
      <Method Sig=" &lt;1&gt; int FindLastIndex([] !!0, int , int , )" />
      <Method Sig=" &lt;1&gt; void ForEach([] !!0, )" />
      <Method Sig="instance class IEnumerator GetEnumerator()" />
      <Method Sig="int IndexOf(class Array , object )" />
      <Method Sig="int IndexOf(class Array , object , int )" />
      <Method Sig="int IndexOf(class Array , object , int , int )" />
      <Method Sig=" &lt;1&gt; int IndexOf([] !!0, !!0)" />
      <Method Sig=" &lt;1&gt; int IndexOf([] !!0, !!0, int )" />
      <Method Sig=" &lt;1&gt; int IndexOf([] !!0, !!0, int , int )" />
      <Method Sig="int LastIndexOf(class Array , object )" />
      <Method Sig="int LastIndexOf(class Array , object , int )" />
      <Method Sig="int LastIndexOf(class Array , object , int , int )" />
      <Method Sig=" &lt;1&gt; int LastIndexOf([] !!0, !!0)" />
      <Method Sig=" &lt;1&gt; int LastIndexOf([] !!0, !!0, int )" />
      <Method Sig=" &lt;1&gt; int LastIndexOf([] !!0, !!0, int , int )" />
      <Method Sig="void Reverse(class Array )" />
      <Method Sig="void Reverse(class Array , int , int )" />
      <Method Sig="void Sort(class Array )" />
      <Method Sig="void Sort(class Array , class Array )" />
      <Method Sig="void Sort(class Array , int , int )" />
      <Method Sig="void Sort(class Array , class Array , int , int )" />
      <Method Sig="void Sort(class Array , class IComparer )" />
      <Method Sig="void Sort(class Array , class Array , class IComparer )" />
      <Method Sig="void Sort(class Array , int , int , class IComparer )" />
      <Method Sig="void Sort(class Array , class Array , int , int , class IComparer )" />
      <Method Sig=" &lt;1&gt; void Sort([] !!0)" />
      <Method Sig=" &lt;2&gt; void Sort([] !!0, [] !!1)" />
      <Method Sig=" &lt;1&gt; void Sort([] !!0, int , int )" />
      <Method Sig=" &lt;2&gt; void Sort([] !!0, [] !!1, int , int )" />
      <Method Sig=" &lt;1&gt; void Sort([] !!0, )" />
      <Method Sig=" &lt;2&gt; void Sort([] !!0, [] !!1, )" />
      <Method Sig=" &lt;1&gt; void Sort([] !!0, int , int , )" />
      <Method Sig=" &lt;2&gt; void Sort([] !!0, [] !!1, int , int , )" />
      <Method Sig=" &lt;1&gt; void Sort([] !!0, )" />
      <Method Sig=" &lt;1&gt; bool TrueForAll([] !!0, )" />
      <Method Sig="instance void Initialize()" />
    </Type>
    <Type Name="ValueType">
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
    </Type>
    <Type Name="ArraySegment`1">
      <Method Sig="instance void .ctor([] !0)" />
      <Method Sig="instance void .ctor([] !0, int , int )" />
      <Method Sig="instance [] !0 get_Array()" />
      <Method Sig="instance int get_Offset()" />
      <Method Sig="instance int get_Count()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals()" />
      <Method Sig="bool op_Equality(, struct ArraySegment`1 )" />
      <Method Sig="bool op_Inequality(, struct ArraySegment`1 )" />
    </Type>
    <Type Name="Enum">
      <Method Sig="object Parse(class Type , string )" />
      <Method Sig="object Parse(class Type , string , bool )" />
      <Method Sig="class Type GetUnderlyingType(class Type )" />
      <Method Sig="class Array GetValues(class Type )" />
      <Method Sig="string GetName(class Type , object )" />
      <Method Sig="[] string GetNames(class Type )" />
      <Method Sig="object ToObject(class Type , object )" />
      <Method Sig="bool IsDefined(class Type , object )" />
      <Method Sig="string Format(class Type , object , string )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="object ToObject(class Type , sbyte )" />
      <Method Sig="object ToObject(class Type , short )" />
      <Method Sig="object ToObject(class Type , int )" />
      <Method Sig="object ToObject(class Type , byte )" />
      <Method Sig="object ToObject(class Type , ushort )" />
      <Method Sig="object ToObject(class Type , uint )" />
      <Method Sig="object ToObject(class Type , in64 )" />
      <Method Sig="object ToObject(class Type , uint64 )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="String">
      <Method Sig="string Join(string , [] string )" />
      <Method Sig="string Join(string , [] string , int , int )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(string )" />
      <Method Sig="instance bool Equals(string , struct StringComparison )" />
      <Method Sig="bool Equals(string , string )" />
      <Method Sig="bool Equals(string , string , struct StringComparison )" />
      <Method Sig="bool op_Equality(string , string )" />
      <Method Sig="bool op_Inequality(string , string )" />
      <Method Sig="instance char get_Chars(int )" />
      <Method Sig="instance void CopyTo(int , [] char , int , int )" />
      <Method Sig="instance [] char ToCharArray()" />
      <Method Sig="instance [] char ToCharArray(int , int )" />
      <Method Sig="bool IsNullOrEmpty(string )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance int get_Length()" />
      <Method Sig="instance [] string Split([] char )" />
      <Method Sig="instance [] string Split([] char , int )" />
      <Method Sig="instance [] string Split([] char , struct StringSplitOptions )" />
      <Method Sig="instance [] string Split([] char , int , struct StringSplitOptions )" />
      <Method Sig="instance [] string Split([] string , struct StringSplitOptions )" />
      <Method Sig="instance [] string Split([] string , int , struct StringSplitOptions )" />
      <Method Sig="instance string Substring(int )" />
      <Method Sig="instance string Substring(int , int )" />
      <Method Sig="instance string Trim([] char )" />
      <Method Sig="instance string TrimStart([] char )" />
      <Method Sig="instance string TrimEnd([] char )" />
      <Method Sig="instance void .ctor(* char )" />
      <Method Sig="instance void .ctor(* char , int , int )" />
      <Method Sig="instance void .ctor(* sbyte )" />
      <Method Sig="instance void .ctor(* sbyte , int , int )" />
      <Method Sig="instance void .ctor(* sbyte , int , int , class Encoding )" />
      <Method Sig="instance bool IsNormalized()" />
      <Method Sig="instance bool IsNormalized(struct NormalizationForm )" />
      <Method Sig="instance string Normalize()" />
      <Method Sig="instance string Normalize(struct NormalizationForm )" />
      <Method Sig="instance void .ctor([] char , int , int )" />
      <Method Sig="instance void .ctor([] char )" />
      <Method Sig="instance void .ctor(char , int )" />
      <Method Sig="int Compare(string , string )" />
      <Method Sig="int Compare(string , string , bool )" />
      <Method Sig="int Compare(string , string , struct StringComparison )" />
      <Method Sig="int Compare(string , string , bool , class CultureInfo )" />
      <Method Sig="int Compare(string , int , string , int , int )" />
      <Method Sig="int Compare(string , int , string , int , int , bool )" />
      <Method Sig="int Compare(string , int , string , int , int , bool , class CultureInfo )" />
      <Method Sig="int Compare(string , int , string , int , int , struct StringComparison )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(string )" />
      <Method Sig="int CompareOrdinal(string , string )" />
      <Method Sig="int CompareOrdinal(string , int , string , int , int )" />
      <Method Sig="instance bool Contains(string )" />
      <Method Sig="instance bool EndsWith(string )" />
      <Method Sig="instance bool EndsWith(string , struct StringComparison )" />
      <Method Sig="instance bool EndsWith(string , bool , class CultureInfo )" />
      <Method Sig="instance int IndexOf(char )" />
      <Method Sig="instance int IndexOf(char , int )" />
      <Method Sig="instance int IndexOf(char , int , int )" />
      <Method Sig="instance int IndexOfAny([] char )" />
      <Method Sig="instance int IndexOfAny([] char , int )" />
      <Method Sig="instance int IndexOfAny([] char , int , int )" />
      <Method Sig="instance int IndexOf(string )" />
      <Method Sig="instance int IndexOf(string , int )" />
      <Method Sig="instance int IndexOf(string , int , int )" />
      <Method Sig="instance int IndexOf(string , struct StringComparison )" />
      <Method Sig="instance int IndexOf(string , int , struct StringComparison )" />
      <Method Sig="instance int IndexOf(string , int , int , struct StringComparison )" />
      <Method Sig="instance int LastIndexOf(char )" />
      <Method Sig="instance int LastIndexOf(char , int )" />
      <Method Sig="instance int LastIndexOf(char , int , int )" />
      <Method Sig="instance int LastIndexOfAny([] char )" />
      <Method Sig="instance int LastIndexOfAny([] char , int )" />
      <Method Sig="instance int LastIndexOfAny([] char , int , int )" />
      <Method Sig="instance int LastIndexOf(string )" />
      <Method Sig="instance int LastIndexOf(string , int )" />
      <Method Sig="instance int LastIndexOf(string , int , int )" />
      <Method Sig="instance int LastIndexOf(string , struct StringComparison )" />
      <Method Sig="instance int LastIndexOf(string , int , struct StringComparison )" />
      <Method Sig="instance int LastIndexOf(string , int , int , struct StringComparison )" />
      <Method Sig="instance string PadLeft(int )" />
      <Method Sig="instance string PadLeft(int , char )" />
      <Method Sig="instance string PadRight(int )" />
      <Method Sig="instance string PadRight(int , char )" />
      <Method Sig="instance bool StartsWith(string )" />
      <Method Sig="instance bool StartsWith(string , struct StringComparison )" />
      <Method Sig="instance bool StartsWith(string , bool , class CultureInfo )" />
      <Method Sig="instance string ToLower()" />
      <Method Sig="instance string ToLower(class CultureInfo )" />
      <Method Sig="instance string ToLowerInvariant()" />
      <Method Sig="instance string ToUpper()" />
      <Method Sig="instance string ToUpper(class CultureInfo )" />
      <Method Sig="instance string ToUpperInvariant()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance object Clone()" />
      <Method Sig="instance string Trim()" />
      <Method Sig="instance string Insert(int , string )" />
      <Method Sig="instance string Replace(char , char )" />
      <Method Sig="instance string Replace(string , string )" />
      <Method Sig="instance string Remove(int , int )" />
      <Method Sig="instance string Remove(int )" />
      <Method Sig="string Format(string , object )" />
      <Method Sig="string Format(string , object , object )" />
      <Method Sig="string Format(string , object , object , object )" />
      <Method Sig="string Format(string , [] object )" />
      <Method Sig="string Format(class IFormatProvider , string , [] object )" />
      <Method Sig="string Copy(string )" />
      <Method Sig="string Concat(object )" />
      <Method Sig="string Concat(object , object )" />
      <Method Sig="string Concat(object , object , object )" />
      <Method Sig="vararg string Concat(object , object , object , object )" />
      <Method Sig="string Concat([] object )" />
      <Method Sig="string Concat(string , string )" />
      <Method Sig="string Concat(string , string , string )" />
      <Method Sig="string Concat(string , string , string , string )" />
      <Method Sig="string Concat([] string )" />
      <Method Sig="string Intern(string )" />
      <Method Sig="string IsInterned(string )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="instance class CharEnumerator GetEnumerator()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="StringComparer">
      <Method Sig="class StringComparer get_InvariantCulture()" />
      <Method Sig="class StringComparer get_InvariantCultureIgnoreCase()" />
      <Method Sig="class StringComparer get_CurrentCulture()" />
      <Method Sig="class StringComparer get_CurrentCultureIgnoreCase()" />
      <Method Sig="class StringComparer get_Ordinal()" />
      <Method Sig="class StringComparer get_OrdinalIgnoreCase()" />
      <Method Sig="class StringComparer Create(class CultureInfo , bool )" />
      <Method Sig="instance int Compare(object , object )" />
      <Method Sig="instance bool Equals(object , object )" />
      <Method Sig="instance int GetHashCode(object )" />
      <Method Sig="instance int Compare(string , string )" />
      <Method Sig="instance bool Equals(string , string )" />
      <Method Sig="instance int GetHashCode(string )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Namespace Name="Text">
      <Type Name="StringBuilder">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance void .ctor(string , int , int , int )" />
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance int get_MaxCapacity()" />
        <Method Sig="instance int EnsureCapacity(int )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance string ToString(int , int )" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance void set_Length(int )" />
        <Method Sig="instance char get_Chars(int )" />
        <Method Sig="instance void set_Chars(int , char )" />
        <Method Sig="instance class StringBuilder Append(char , int )" />
        <Method Sig="instance class StringBuilder Append([] char , int , int )" />
        <Method Sig="instance class StringBuilder Append(string )" />
        <Method Sig="instance class StringBuilder Append(string , int , int )" />
        <Method Sig="instance class StringBuilder AppendLine()" />
        <Method Sig="instance class StringBuilder AppendLine(string )" />
        <Method Sig="instance void CopyTo(int , [] char , int , int )" />
        <Method Sig="instance class StringBuilder Insert(int , string , int )" />
        <Method Sig="instance class StringBuilder Remove(int , int )" />
        <Method Sig="instance class StringBuilder Append(bool )" />
        <Method Sig="instance class StringBuilder Append(sbyte )" />
        <Method Sig="instance class StringBuilder Append(byte )" />
        <Method Sig="instance class StringBuilder Append(char )" />
        <Method Sig="instance class StringBuilder Append(short )" />
        <Method Sig="instance class StringBuilder Append(int )" />
        <Method Sig="instance class StringBuilder Append(in64 )" />
        <Method Sig="instance class StringBuilder Append(float )" />
        <Method Sig="instance class StringBuilder Append(double )" />
        <Method Sig="instance class StringBuilder Append(struct Decimal )" />
        <Method Sig="instance class StringBuilder Append(ushort )" />
        <Method Sig="instance class StringBuilder Append(uint )" />
        <Method Sig="instance class StringBuilder Append(uint64 )" />
        <Method Sig="instance class StringBuilder Append(object )" />
        <Method Sig="instance class StringBuilder Append([] char )" />
        <Method Sig="instance class StringBuilder Insert(int , string )" />
        <Method Sig="instance class StringBuilder Insert(int , bool )" />
        <Method Sig="instance class StringBuilder Insert(int , sbyte )" />
        <Method Sig="instance class StringBuilder Insert(int , byte )" />
        <Method Sig="instance class StringBuilder Insert(int , short )" />
        <Method Sig="instance class StringBuilder Insert(int , char )" />
        <Method Sig="instance class StringBuilder Insert(int , [] char )" />
        <Method Sig="instance class StringBuilder Insert(int , [] char , int , int )" />
        <Method Sig="instance class StringBuilder Insert(int , int )" />
        <Method Sig="instance class StringBuilder Insert(int , in64 )" />
        <Method Sig="instance class StringBuilder Insert(int , float )" />
        <Method Sig="instance class StringBuilder Insert(int , double )" />
        <Method Sig="instance class StringBuilder Insert(int , struct Decimal )" />
        <Method Sig="instance class StringBuilder Insert(int , ushort )" />
        <Method Sig="instance class StringBuilder Insert(int , uint )" />
        <Method Sig="instance class StringBuilder Insert(int , uint64 )" />
        <Method Sig="instance class StringBuilder Insert(int , object )" />
        <Method Sig="instance class StringBuilder AppendFormat(string , object )" />
        <Method Sig="instance class StringBuilder AppendFormat(string , object , object )" />
        <Method Sig="instance class StringBuilder AppendFormat(string , object , object , object )" />
        <Method Sig="instance class StringBuilder AppendFormat(string , [] object )" />
        <Method Sig="instance class StringBuilder AppendFormat(class IFormatProvider , string , [] object )" />
        <Method Sig="instance class StringBuilder Replace(string , string )" />
        <Method Sig="instance class StringBuilder Replace(string , string , int , int )" />
        <Method Sig="instance bool Equals(class StringBuilder )" />
        <Method Sig="instance class StringBuilder Replace(char , char )" />
        <Method Sig="instance class StringBuilder Replace(char , char , int , int )" />
      </Type>
      <Type Name="Encoding">
        <Method Sig="[] byte Convert(class Encoding , class Encoding , [] byte )" />
        <Method Sig="[] byte Convert(class Encoding , class Encoding , [] byte , int , int )" />
        <Method Sig="class Encoding GetEncoding(int )" />
        <Method Sig="class Encoding GetEncoding(int , class EncoderFallback , class DecoderFallback )" />
        <Method Sig="class Encoding GetEncoding(string )" />
        <Method Sig="class Encoding GetEncoding(string , class EncoderFallback , class DecoderFallback )" />
        <Method Sig="[] class EncodingInfo GetEncodings()" />
        <Method Sig="instance [] byte GetPreamble()" />
        <Method Sig="instance string get_BodyName()" />
        <Method Sig="instance string get_EncodingName()" />
        <Method Sig="instance string get_HeaderName()" />
        <Method Sig="instance string get_WebName()" />
        <Method Sig="instance int get_WindowsCodePage()" />
        <Method Sig="instance bool get_IsBrowserDisplay()" />
        <Method Sig="instance bool get_IsBrowserSave()" />
        <Method Sig="instance bool get_IsMailNewsDisplay()" />
        <Method Sig="instance bool get_IsMailNewsSave()" />
        <Method Sig="instance bool get_IsSingleByte()" />
        <Method Sig="instance class EncoderFallback get_EncoderFallback()" />
        <Method Sig="instance void set_EncoderFallback(class EncoderFallback )" />
        <Method Sig="instance class DecoderFallback get_DecoderFallback()" />
        <Method Sig="instance void set_DecoderFallback(class DecoderFallback )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="class Encoding get_ASCII()" />
        <Method Sig="instance int GetByteCount([] char )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance [] byte GetBytes([] char )" />
        <Method Sig="instance [] byte GetBytes([] char , int , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance [] byte GetBytes(string )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance [] char GetChars([] byte )" />
        <Method Sig="instance [] char GetChars([] byte , int , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance int get_CodePage()" />
        <Method Sig="instance bool IsAlwaysNormalized()" />
        <Method Sig="instance bool IsAlwaysNormalized(struct NormalizationForm )" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="class Encoding get_Default()" />
        <Method Sig="instance class Encoder GetEncoder()" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
        <Method Sig="instance string GetString([] byte )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="class Encoding get_Unicode()" />
        <Method Sig="class Encoding get_BigEndianUnicode()" />
        <Method Sig="class Encoding get_UTF7()" />
        <Method Sig="class Encoding get_UTF8()" />
        <Method Sig="class Encoding get_UTF32()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Encoder">
        <Method Sig="instance class EncoderFallback get_Fallback()" />
        <Method Sig="instance void set_Fallback(class EncoderFallback )" />
        <Method Sig="instance class EncoderFallbackBuffer get_FallbackBuffer()" />
        <Method Sig="instance void Reset()" />
        <Method Sig="instance int GetByteCount([] char , int , int , bool )" />
        <Method Sig="instance int GetByteCount(* char , int , bool )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int , bool )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int , bool )" />
        <Method Sig="instance void Convert([] char , int , int , [] byte , int , int , bool , &amp; int , &amp; int , &amp; bool )" />
        <Method Sig="instance void Convert(* char , int , * byte , int , bool , &amp; int , &amp; int , &amp; bool )" />
      </Type>
      <Type Name="Decoder">
        <Method Sig="instance class DecoderFallback get_Fallback()" />
        <Method Sig="instance void set_Fallback(class DecoderFallback )" />
        <Method Sig="instance class DecoderFallbackBuffer get_FallbackBuffer()" />
        <Method Sig="instance void Reset()" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int , bool )" />
        <Method Sig="instance int GetCharCount(* byte , int , bool )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int , bool )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int , bool )" />
        <Method Sig="instance void Convert([] byte , int , int , [] char , int , int , bool , &amp; int , &amp; int , &amp; bool )" />
        <Method Sig="instance void Convert(* byte , int , * char , int , bool , &amp; int , &amp; int , &amp; bool )" />
      </Type>
      <Type Name="ASCIIEncoding">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
        <Method Sig="instance bool get_IsSingleByte()" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="instance class Encoder GetEncoder()" />
      </Type>
      <Type Name="DecoderFallback">
        <Method Sig="class DecoderFallback get_ReplacementFallback()" />
        <Method Sig="class DecoderFallback get_ExceptionFallback()" />
        <Method Sig="instance class DecoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
      </Type>
      <Type Name="DecoderFallbackBuffer">
        <Method Sig="instance bool Fallback([] byte , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void Reset()" />
      </Type>
      <Type Name="DecoderExceptionFallback">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class DecoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="DecoderExceptionFallbackBuffer">
        <Method Sig="instance bool Fallback([] byte , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DecoderFallbackException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , [] byte , int )" />
        <Method Sig="instance [] byte get_BytesUnknown()" />
        <Method Sig="instance int get_Index()" />
      </Type>
      <Type Name="DecoderReplacementFallback">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_DefaultString()" />
        <Method Sig="instance class DecoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="DecoderReplacementFallbackBuffer">
        <Method Sig="instance void .ctor(class DecoderReplacementFallback )" />
        <Method Sig="instance bool Fallback([] byte , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void Reset()" />
      </Type>
      <Type Name="EncoderFallback">
        <Method Sig="class EncoderFallback get_ReplacementFallback()" />
        <Method Sig="class EncoderFallback get_ExceptionFallback()" />
        <Method Sig="instance class EncoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
      </Type>
      <Type Name="EncoderFallbackBuffer">
        <Method Sig="instance bool Fallback(char , int )" />
        <Method Sig="instance bool Fallback(char , char , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void Reset()" />
      </Type>
      <Type Name="EncoderExceptionFallback">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class EncoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="EncoderExceptionFallbackBuffer">
        <Method Sig="instance bool Fallback(char , int )" />
        <Method Sig="instance bool Fallback(char , char , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="EncoderFallbackException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance char get_CharUnknown()" />
        <Method Sig="instance char get_CharUnknownHigh()" />
        <Method Sig="instance char get_CharUnknownLow()" />
        <Method Sig="instance int get_Index()" />
        <Method Sig="instance bool IsUnknownSurrogate()" />
      </Type>
      <Type Name="EncoderReplacementFallback">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_DefaultString()" />
        <Method Sig="instance class EncoderFallbackBuffer CreateFallbackBuffer()" />
        <Method Sig="instance int get_MaxCharCount()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="EncoderReplacementFallbackBuffer">
        <Method Sig="instance void .ctor(class EncoderReplacementFallback )" />
        <Method Sig="instance bool Fallback(char , int )" />
        <Method Sig="instance bool Fallback(char , char , int )" />
        <Method Sig="instance char GetNextChar()" />
        <Method Sig="instance bool MovePrevious()" />
        <Method Sig="instance int get_Remaining()" />
        <Method Sig="instance void Reset()" />
      </Type>
      <Type Name="EncodingInfo">
        <Method Sig="instance int get_CodePage()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance class Encoding GetEncoding()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="UnicodeEncoding">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool , bool )" />
        <Method Sig="instance void .ctor(bool , bool , bool )" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="instance class Encoder GetEncoder()" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="instance [] byte GetPreamble()" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="UTF7Encoding">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="instance class Encoder GetEncoder()" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
      </Type>
      <Type Name="UTF8Encoding">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(bool , bool )" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="instance class Encoder GetEncoder()" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
        <Method Sig="instance [] byte GetPreamble()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="UTF32Encoding">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool , bool )" />
        <Method Sig="instance void .ctor(bool , bool , bool )" />
        <Method Sig="instance int GetByteCount([] char , int , int )" />
        <Method Sig="instance int GetByteCount(string )" />
        <Method Sig="instance int GetByteCount(* char , int )" />
        <Method Sig="instance int GetBytes(string , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes([] char , int , int , [] byte , int )" />
        <Method Sig="instance int GetBytes(* char , int , * byte , int )" />
        <Method Sig="instance int GetCharCount([] byte , int , int )" />
        <Method Sig="instance int GetCharCount(* byte , int )" />
        <Method Sig="instance int GetChars([] byte , int , int , [] char , int )" />
        <Method Sig="instance int GetChars(* byte , int , * char , int )" />
        <Method Sig="instance string GetString([] byte , int , int )" />
        <Method Sig="instance class Decoder GetDecoder()" />
        <Method Sig="instance class Encoder GetEncoder()" />
        <Method Sig="instance int GetMaxByteCount(int )" />
        <Method Sig="instance int GetMaxCharCount(int )" />
        <Method Sig="instance [] byte GetPreamble()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
    </Namespace>
    <Type Name="Exception">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance class IDictionary get_Data()" />
      <Method Sig="instance class Exception GetBaseException()" />
      <Method Sig="instance class Exception get_InnerException()" />
      <Method Sig="instance class MethodBase get_TargetSite()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_StackTrace()" />
      <Method Sig="instance string get_HelpLink()" />
      <Method Sig="instance void set_HelpLink(string )" />
      <Method Sig="instance string get_Source()" />
      <Method Sig="instance void set_Source(string )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class Type GetType()" />
    </Type>
    <Type Name="DateTime">
      <Method Sig="instance void .ctor(in64 )" />
      <Method Sig="instance void .ctor(in64 , struct DateTimeKind )" />
      <Method Sig="instance void .ctor(int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int , class Calendar )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , struct DateTimeKind )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , class Calendar )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , int , struct DateTimeKind )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , int , class Calendar )" />
      <Method Sig="instance void .ctor(int , int , int , int , int , int , int , class Calendar , struct DateTimeKind )" />
      <Method Sig="instance struct DateTime Add(struct TimeSpan )" />
      <Method Sig="instance struct DateTime AddDays(double )" />
      <Method Sig="instance struct DateTime AddHours(double )" />
      <Method Sig="instance struct DateTime AddMilliseconds(double )" />
      <Method Sig="instance struct DateTime AddMinutes(double )" />
      <Method Sig="instance struct DateTime AddMonths(int )" />
      <Method Sig="instance struct DateTime AddSeconds(double )" />
      <Method Sig="instance struct DateTime AddTicks(in64 )" />
      <Method Sig="instance struct DateTime AddYears(int )" />
      <Method Sig="int Compare(struct DateTime , struct DateTime )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(struct DateTime )" />
      <Method Sig="int DaysInMonth(int , int )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct DateTime )" />
      <Method Sig="bool Equals(struct DateTime , struct DateTime )" />
      <Method Sig="struct DateTime FromBinary(in64 )" />
      <Method Sig="struct DateTime FromFileTime(in64 )" />
      <Method Sig="struct DateTime FromFileTimeUtc(in64 )" />
      <Method Sig="struct DateTime FromOADate(double )" />
      <Method Sig="instance bool IsDaylightSavingTime()" />
      <Method Sig="struct DateTime SpecifyKind(struct DateTime , struct DateTimeKind )" />
      <Method Sig="instance in64 ToBinary()" />
      <Method Sig="instance struct DateTime get_Date()" />
      <Method Sig="instance int get_Day()" />
      <Method Sig="instance struct DayOfWeek get_DayOfWeek()" />
      <Method Sig="instance int get_DayOfYear()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance int get_Hour()" />
      <Method Sig="instance struct DateTimeKind get_Kind()" />
      <Method Sig="instance int get_Millisecond()" />
      <Method Sig="instance int get_Minute()" />
      <Method Sig="instance int get_Month()" />
      <Method Sig="struct DateTime get_Now()" />
      <Method Sig="struct DateTime get_UtcNow()" />
      <Method Sig="instance int get_Second()" />
      <Method Sig="instance in64 get_Ticks()" />
      <Method Sig="instance struct TimeSpan get_TimeOfDay()" />
      <Method Sig="struct DateTime get_Today()" />
      <Method Sig="instance int get_Year()" />
      <Method Sig="bool IsLeapYear(int )" />
      <Method Sig="struct DateTime Parse(string )" />
      <Method Sig="struct DateTime Parse(string , class IFormatProvider )" />
      <Method Sig="struct DateTime Parse(string , class IFormatProvider , struct DateTimeStyles )" />
      <Method Sig="struct DateTime ParseExact(string , string , class IFormatProvider )" />
      <Method Sig="struct DateTime ParseExact(string , string , class IFormatProvider , struct DateTimeStyles )" />
      <Method Sig="struct DateTime ParseExact(string , [] string , class IFormatProvider , struct DateTimeStyles )" />
      <Method Sig="instance struct TimeSpan Subtract(struct DateTime )" />
      <Method Sig="instance struct DateTime Subtract(struct TimeSpan )" />
      <Method Sig="instance double ToOADate()" />
      <Method Sig="instance in64 ToFileTime()" />
      <Method Sig="instance in64 ToFileTimeUtc()" />
      <Method Sig="instance struct DateTime ToLocalTime()" />
      <Method Sig="instance string ToLongDateString()" />
      <Method Sig="instance string ToLongTimeString()" />
      <Method Sig="instance string ToShortDateString()" />
      <Method Sig="instance string ToShortTimeString()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="instance struct DateTime ToUniversalTime()" />
      <Method Sig="bool TryParse(string , &amp; struct DateTime )" />
      <Method Sig="bool TryParse(string , class IFormatProvider , struct DateTimeStyles , &amp; struct DateTime )" />
      <Method Sig="bool TryParseExact(string , string , class IFormatProvider , struct DateTimeStyles , &amp; struct DateTime )" />
      <Method Sig="bool TryParseExact(string , [] string , class IFormatProvider , struct DateTimeStyles , &amp; struct DateTime )" />
      <Method Sig="struct DateTime op_Addition(struct DateTime , struct TimeSpan )" />
      <Method Sig="struct DateTime op_Subtraction(struct DateTime , struct TimeSpan )" />
      <Method Sig="struct TimeSpan op_Subtraction(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_Equality(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_Inequality(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_LessThan(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_LessThanOrEqual(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_GreaterThan(struct DateTime , struct DateTime )" />
      <Method Sig="bool op_GreaterThanOrEqual(struct DateTime , struct DateTime )" />
      <Method Sig="instance [] string GetDateTimeFormats()" />
      <Method Sig="instance [] string GetDateTimeFormats(class IFormatProvider )" />
      <Method Sig="instance [] string GetDateTimeFormats(char )" />
      <Method Sig="instance [] string GetDateTimeFormats(char , class IFormatProvider )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="SystemException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="OutOfMemoryException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="StackOverflowException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="DataMisalignedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="ExecutionEngineException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Delegate">
      <Method Sig="instance object DynamicInvoke([] object )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="class Delegate Combine(class Delegate , class Delegate )" />
      <Method Sig="class Delegate Combine([] class Delegate )" />
      <Method Sig="instance [] class Delegate GetInvocationList()" />
      <Method Sig="instance class MethodInfo get_Method()" />
      <Method Sig="instance object get_Target()" />
      <Method Sig="class Delegate Remove(class Delegate , class Delegate )" />
      <Method Sig="class Delegate RemoveAll(class Delegate , class Delegate )" />
      <Method Sig="instance object Clone()" />
      <Method Sig="class Delegate CreateDelegate(class Type , object , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , object , string , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , object , string , bool , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , class Type , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , class Type , string , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , class Type , string , bool , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , class MethodInfo )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , class MethodInfo , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , object , class MethodInfo )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Delegate CreateDelegate(class Type , object , class MethodInfo , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="bool op_Equality(class Delegate , class Delegate )" />
      <Method Sig="bool op_Inequality(class Delegate , class Delegate )" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
    </Type>
    <Type Name="MulticastDelegate">
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance [] class Delegate GetInvocationList()" />
      <Method Sig="bool op_Equality(class MulticastDelegate , class MulticastDelegate )" />
      <Method Sig="bool op_Inequality(class MulticastDelegate , class MulticastDelegate )" />
      <Method Sig="instance int GetHashCode()" />
    </Type>
    <Type Name="MemberAccessException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Activator">
      <Method Sig="object CreateInstance(class Type , struct BindingFlags , class Binder , [] object , class CultureInfo )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object CreateInstance(class Type , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object CreateInstance(class Type , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object CreateInstance(class Type , [] object , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object CreateInstance(class Type )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object CreateInstance(class Type , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig=" &lt;1&gt; !!0 CreateInstance()" />
      <Method Sig="class ObjectHandle CreateInstanceFrom(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstanceFrom(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstanceFrom(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(class AppDomain , string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </LinkDemand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(class AppDomain , string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </LinkDemand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstanceFrom(class AppDomain , string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </LinkDemand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstanceFrom(class AppDomain , string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </LinkDemand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(class ActivationContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateInstance(class ActivationContext , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateComInstanceFrom(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ObjectHandle CreateComInstanceFrom(string , string , [] byte , struct AssemblyHashAlgorithm )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="object GetObject(class Type , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="object GetObject(class Type , string , object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="AccessViolationException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Namespace Name="Runtime">
      <Namespace Name="Hosting">
        <Type Name="ApplicationActivator">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class ObjectHandle CreateInstance(class ActivationContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ObjectHandle CreateInstance(class ActivationContext , [] string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="ActivationArguments">
          <Method Sig="instance void .ctor(class ApplicationIdentity )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class ApplicationIdentity , [] string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class ActivationContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class ActivationContext , [] string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ApplicationIdentity get_ApplicationIdentity()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ActivationContext get_ActivationContext()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] string get_ActivationData()" />
        </Type>
      </Namespace>
      <Namespace Name="CompilerServices">
        <Type Name="StringFreezingAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="AccessedThroughPropertyAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_PropertyName()" />
        </Type>
        <Type Name="CallConvCdecl">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="CallConvStdcall">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="CallConvThiscall">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="CallConvFastcall">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="RuntimeHelpers">
          <Method Sig="void InitializeArray(class Array , struct RuntimeFieldHandle )" />
          <Method Sig="object GetObjectValue(object )" />
          <Method Sig="void RunClassConstructor(struct RuntimeTypeHandle )" />
          <Method Sig="void RunModuleConstructor(struct ModuleHandle )" />
          <Method Sig="void PrepareMethod(struct RuntimeMethodHandle )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PrepareMethod(struct RuntimeMethodHandle , [] struct RuntimeTypeHandle )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PrepareDelegate(class Delegate )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetHashCode(object )" />
          <Method Sig="bool Equals(object , object )" />
          <Method Sig="int get_OffsetToStringData()" />
          <Method Sig="void ProbeForSufficientStack()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PrepareConstrainedRegions()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PrepareConstrainedRegionsNoOP()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ExecuteCodeWithGuaranteedCleanup(class TryCode , class CleanupCode , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="CompilerGeneratedAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="CustomConstantAttribute">
          <Method Sig="instance object get_Value()" />
        </Type>
        <Type Name="DateTimeConstantAttribute">
          <Method Sig="instance void .ctor(in64 )" />
          <Method Sig="instance object get_Value()" />
        </Type>
        <Type Name="DiscardableAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="DecimalConstantAttribute">
          <Method Sig="instance void .ctor(byte , byte , uint , uint , uint )" />
          <Method Sig="instance void .ctor(byte , byte , int , int , int )" />
          <Method Sig="instance struct Decimal get_Value()" />
        </Type>
        <Type Name="CompilationRelaxationsAttribute">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(struct CompilationRelaxations )" />
          <Method Sig="instance int get_CompilationRelaxations()" />
        </Type>
        <Type Name="CompilerGlobalScopeAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="FixedBufferAttribute">
          <Method Sig="instance void .ctor(class Type , int )" />
          <Method Sig="instance class Type get_ElementType()" />
          <Method Sig="instance int get_Length()" />
        </Type>
        <Type Name="IndexerNameAttribute">
          <Method Sig="instance void .ctor(string )" />
        </Type>
        <Type Name="InternalsVisibleToAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_AssemblyName()" />
        </Type>
        <Type Name="MethodImplAttribute">
          <Method Sig="instance void .ctor(struct MethodImplOptions )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct MethodImplOptions get_Value()" />
        </Type>
        <Type Name="FixedAddressValueTypeAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="UnsafeValueTypeAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="RequiredAttributeAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_RequiredContract()" />
        </Type>
        <Type Name="DefaultDependencyAttribute">
          <Method Sig="instance void .ctor(struct LoadHint )" />
          <Method Sig="instance struct LoadHint get_LoadHint()" />
        </Type>
        <Type Name="DependencyAttribute">
          <Method Sig="instance void .ctor(string , struct LoadHint )" />
          <Method Sig="instance string get_DependentAssembly()" />
          <Method Sig="instance struct LoadHint get_LoadHint()" />
        </Type>
        <Type Name="HasCopySemanticsAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="ScopelessEnumAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SpecialNameAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SuppressIldasmAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="NativeCppClassAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="TypeForwardedToAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_Destination()" />
        </Type>
        <Type Name="RuntimeCompatibilityAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_WrapNonExceptionThrows()" />
          <Method Sig="instance void set_WrapNonExceptionThrows(bool )" />
        </Type>
        <Type Name="RuntimeWrappedException">
          <Method Sig="instance object get_WrappedException()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="IDispatchConstantAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance object get_Value()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="IUnknownConstantAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance object get_Value()" />
        </Type>
      </Namespace>
      <Namespace Name="InteropServices">
        <Type Name="SafeHandle">
          <Method Sig="instance intptr DangerousGetHandle()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsClosed()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Close()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Dispose()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void SetHandleAsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void DangerousAddRef(&amp; bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void DangerousRelease()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CriticalHandle">
          <Method Sig="instance bool get_IsClosed()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Close()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Dispose()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void SetHandleAsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ArrayWithOffset">
          <Method Sig="instance void .ctor(object , int )" />
          <Method Sig="instance object GetArray()" />
          <Method Sig="instance int GetOffset()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct ArrayWithOffset )" />
          <Method Sig="bool op_Equality(struct ArrayWithOffset , struct ArrayWithOffset )" />
          <Method Sig="bool op_Inequality(struct ArrayWithOffset , struct ArrayWithOffset )" />
        </Type>
        <Type Name="UnmanagedFunctionPointerAttribute">
          <Method Sig="instance void .ctor(struct CallingConvention )" />
          <Method Sig="instance struct CallingConvention get_CallingConvention()" />
        </Type>
        <Type Name="DispIdAttribute">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int get_Value()" />
        </Type>
        <Type Name="InterfaceTypeAttribute">
          <Method Sig="instance void .ctor(struct ComInterfaceType )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct ComInterfaceType get_Value()" />
        </Type>
        <Type Name="ComDefaultInterfaceAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_Value()" />
        </Type>
        <Type Name="ClassInterfaceAttribute">
          <Method Sig="instance void .ctor(struct ClassInterfaceType )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct ClassInterfaceType get_Value()" />
        </Type>
        <Type Name="ComVisibleAttribute">
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance bool get_Value()" />
        </Type>
        <Type Name="TypeLibImportClassAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="LCIDConversionAttribute">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int get_Value()" />
        </Type>
        <Type Name="ComRegisterFunctionAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="ComUnregisterFunctionAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="ProgIdAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="ImportedFromTypeLibAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="IDispatchImplAttribute">
          <Method Sig="instance void .ctor(struct IDispatchImplType )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct IDispatchImplType get_Value()" />
        </Type>
        <Type Name="ComSourceInterfacesAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance void .ctor(class Type , class Type )" />
          <Method Sig="instance void .ctor(class Type , class Type , class Type )" />
          <Method Sig="instance void .ctor(class Type , class Type , class Type , class Type )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="ComConversionLossAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="TypeLibTypeAttribute">
          <Method Sig="instance void .ctor(struct TypeLibTypeFlags )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct TypeLibTypeFlags get_Value()" />
        </Type>
        <Type Name="TypeLibFuncAttribute">
          <Method Sig="instance void .ctor(struct TypeLibFuncFlags )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct TypeLibFuncFlags get_Value()" />
        </Type>
        <Type Name="TypeLibVarAttribute">
          <Method Sig="instance void .ctor(struct TypeLibVarFlags )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct TypeLibVarFlags get_Value()" />
        </Type>
        <Type Name="MarshalAsAttribute">
          <Method Sig="instance void .ctor(struct UnmanagedType )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct UnmanagedType get_Value()" />
        </Type>
        <Type Name="ComImportAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="GuidAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="PreserveSigAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="InAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="OutAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="OptionalAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="DllImportAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="StructLayoutAttribute">
          <Method Sig="instance void .ctor(struct LayoutKind )" />
          <Method Sig="instance void .ctor(short )" />
          <Method Sig="instance struct LayoutKind get_Value()" />
        </Type>
        <Type Name="FieldOffsetAttribute">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int get_Value()" />
        </Type>
        <Type Name="ComAliasNameAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
        </Type>
        <Type Name="AutomationProxyAttribute">
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance bool get_Value()" />
        </Type>
        <Type Name="PrimaryInteropAssemblyAttribute">
          <Method Sig="instance void .ctor(int , int )" />
          <Method Sig="instance int get_MajorVersion()" />
          <Method Sig="instance int get_MinorVersion()" />
        </Type>
        <Type Name="CoClassAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_CoClass()" />
        </Type>
        <Type Name="ComEventInterfaceAttribute">
          <Method Sig="instance void .ctor(class Type , class Type )" />
          <Method Sig="instance class Type get_SourceInterface()" />
          <Method Sig="instance class Type get_EventProvider()" />
        </Type>
        <Type Name="TypeLibVersionAttribute">
          <Method Sig="instance void .ctor(int , int )" />
          <Method Sig="instance int get_MajorVersion()" />
          <Method Sig="instance int get_MinorVersion()" />
        </Type>
        <Type Name="ComCompatibleVersionAttribute">
          <Method Sig="instance void .ctor(int , int , int , int )" />
          <Method Sig="instance int get_MajorVersion()" />
          <Method Sig="instance int get_MinorVersion()" />
          <Method Sig="instance int get_BuildNumber()" />
          <Method Sig="instance int get_RevisionNumber()" />
        </Type>
        <Type Name="BestFitMappingAttribute">
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance bool get_BestFitMapping()" />
        </Type>
        <Type Name="DefaultCharSetAttribute">
          <Method Sig="instance void .ctor(struct CharSet )" />
          <Method Sig="instance struct CharSet get_CharSet()" />
        </Type>
        <Type Name="SetWin32ContextInIDispatchAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="ExternalException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="instance int get_ErrorCode()" />
        </Type>
        <Type Name="COMException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="GCHandle">
          <Method Sig="void .cctor()" />
          <Method Sig="struct GCHandle Alloc(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct GCHandle Alloc(object , struct GCHandleType )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Free()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_Target()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Target(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance intptr AddrOfPinnedObject()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsAllocated()" />
          <Method Sig="struct GCHandle op_Explicit(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct GCHandle FromIntPtr(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr op_Explicit(struct GCHandle )" />
          <Method Sig="intptr ToIntPtr(struct GCHandle )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="bool op_Equality(struct GCHandle , struct GCHandle )" />
          <Method Sig="bool op_Inequality(struct GCHandle , struct GCHandle )" />
        </Type>
        <Type Name="HandleRef">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance object get_Wrapper()" />
          <Method Sig="instance intptr get_Handle()" />
          <Method Sig="intptr op_Explicit(struct HandleRef )" />
          <Method Sig="intptr ToIntPtr(struct HandleRef )" />
        </Type>
        <Type Name="InvalidOleVariantTypeException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="Marshal">
          <Method Sig="string PtrToStringAnsi(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringAnsi(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringUni(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringAuto(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringUni(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringAuto(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int SizeOf(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int SizeOf(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr OffsetOf(class Type , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr UnsafeAddrOfPinnedArrayElement(class Array , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] int , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] char , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] short , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] in64 , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] float , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] double , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] byte , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy([] intptr , int , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] int , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] char , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] short , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] in64 , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] float , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] double , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] byte , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Copy(intptr , [] intptr , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="byte ReadByte(object , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="byte ReadByte(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="byte ReadByte(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="short ReadInt16(object , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="short ReadInt16(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="short ReadInt16(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int ReadInt32(object , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int ReadInt32(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int ReadInt32(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr ReadIntPtr(object , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr ReadIntPtr(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr ReadIntPtr(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="in64 ReadInt64(object , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="in64 ReadInt64(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="in64 ReadInt64(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteByte(intptr , int , byte )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteByte(object , int , byte )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteByte(intptr , byte )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(intptr , int , short )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(object , int , short )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(intptr , short )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(intptr , int , char )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(object , int , char )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt16(intptr , char )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt32(intptr , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt32(object , int , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt32(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteIntPtr(intptr , int , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteIntPtr(object , int , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteIntPtr(intptr , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt64(intptr , int , in64 )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt64(object , int , in64 )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void WriteInt64(intptr , in64 )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetLastWin32Error()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetHRForLastWin32Error()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void Prelink(class MethodInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PrelinkAll(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int NumParamBytes(class MethodInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetExceptionPointers()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetExceptionCode()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void StructureToPtr(object , intptr , bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PtrToStructure(intptr , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object PtrToStructure(intptr , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void DestroyStructure(intptr , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetHINSTANCE(class Module )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ThrowExceptionForHR(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ThrowExceptionForHR(int , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Exception GetExceptionForHR(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Exception GetExceptionForHR(int , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetHRForException(class Exception )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetUnmanagedThunkForManagedMethodPtr(intptr , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetManagedThunkForUnmanagedMethodPtr(intptr , intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Thread GetThreadFromFiberCookie(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr AllocHGlobal(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr AllocHGlobal(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void FreeHGlobal(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr ReAllocHGlobal(intptr , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToHGlobalAnsi(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToCoTaskMemAnsi(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToHGlobalUni(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToHGlobalAuto(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetTypeLibName(class UCOMITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetTypeLibName(class ITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct Guid GetTypeLibGuid(class UCOMITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct Guid GetTypeLibGuid(class ITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetTypeLibLcid(class UCOMITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetTypeLibLcid(class ITypeLib )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct Guid GetTypeLibGuidForAssembly(class Assembly )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void GetTypeLibVersionForAssembly(class Assembly , &amp; int , &amp; int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetTypeInfoName(class UCOMITypeInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetTypeInfoName(class ITypeInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Type GetTypeForITypeInfo(intptr )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetITypeInfoForType(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetIUnknownForObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetIUnknownForObjectInContext(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetIDispatchForObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetIDispatchForObjectInContext(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetComInterfaceForObject(object , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetComInterfaceForObjectInContext(object , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetObjectForIUnknown(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetUniqueObjectForIUnknown(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetTypedObjectForIUnknown(intptr , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr CreateAggregatedObject(intptr , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsComObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int ReleaseComObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int FinalReleaseComObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetComObjectData(object , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool SetComObjectData(object , object , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object CreateWrapperOfType(object , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ReleaseThreadCache()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsTypeVisibleFromCom(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int QueryInterface(intptr , &amp; struct Guid , &amp; intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int AddRef(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int Release(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr AllocCoTaskMem(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr ReAllocCoTaskMem(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void FreeCoTaskMem(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void FreeBSTR(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToCoTaskMemUni(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToCoTaskMemAuto(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr StringToBSTR(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string PtrToStringBSTR(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void GetNativeVariantForObject(object , intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetObjectForNativeVariant(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="[] object GetObjectsForNativeVariants(intptr , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetStartComSlot(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetEndComSlot(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class MemberInfo GetMethodInfoForComSlot(class Type , int , &amp; struct ComMemberType )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="int GetComSlotForMethodInfo(class MemberInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct Guid GenerateGuidForType(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GenerateProgIdForType(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object BindToMoniker(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetActiveObject(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ChangeWrapperHandleStrength(object , bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Delegate GetDelegateForFunctionPointer(intptr , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr GetFunctionPointerForDelegate(class Delegate )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr SecureStringToBSTR(class SecureString )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr SecureStringToCoTaskMemAnsi(class SecureString )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr SecureStringToGlobalAllocAnsi(class SecureString )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr SecureStringToCoTaskMemUnicode(class SecureString )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="intptr SecureStringToGlobalAllocUnicode(class SecureString )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ZeroFreeBSTR(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ZeroFreeCoTaskMemAnsi(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ZeroFreeGlobalAllocAnsi(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ZeroFreeCoTaskMemUnicode(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void ZeroFreeGlobalAllocUnicode(intptr )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="MarshalDirectiveException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="RuntimeEnvironment">
          <Method Sig="bool FromGlobalAccessCache(class Assembly )" />
          <Method Sig="string GetSystemVersion()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string GetRuntimeDirectory()" />
          <Method Sig="string get_SystemConfigurationFile()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SEHException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance bool CanResume()" />
        </Type>
        <Type Name="BStrWrapper">
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_WrappedObject()" />
        </Type>
        <Type Name="CurrencyWrapper">
          <Method Sig="instance void .ctor(struct Decimal )" />
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance struct Decimal get_WrappedObject()" />
        </Type>
        <Type Name="DispatchWrapper">
          <Method Sig="instance void .ctor(object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object get_WrappedObject()" />
        </Type>
        <Type Name="ErrorWrapper">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance void .ctor(class Exception )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_ErrorCode()" />
        </Type>
        <Type Name="ExtensibleClassFactory">
          <Method Sig="void RegisterObjectCreationCallback(class ObjectCreationDelegate )" />
        </Type>
        <Type Name="InvalidComObjectException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="ObjectCreationDelegate">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance intptr Invoke(intptr )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(intptr , class AsyncCallback , object )" />
          <Method Sig="instance intptr EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="RegistrationServices">
          <Method Sig="instance bool RegisterAssembly(class Assembly , struct AssemblyRegistrationFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool UnregisterAssembly(class Assembly )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class Type GetRegistrableTypesInAssembly(class Assembly )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance string GetProgIdForType(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RegisterTypeForComClients(class Type , &amp; struct Guid )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance struct Guid GetManagedCategoryGuid()" />
          <Method Sig="instance bool TypeRequiresRegistration(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool TypeRepresentsComType(class Type )" />
          <Method Sig="instance int RegisterTypeForComClients(class Type , struct RegistrationClassContext , struct RegistrationConnectionType )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void UnregisterTypeForComClients(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SafeArrayRankMismatchException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="SafeArrayTypeMismatchException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="TypeLibConverter">
          <Method Sig="instance class AssemblyBuilder ConvertTypeLibToAssembly(object , string , int , class ITypeLibImporterNotifySink , [] byte , class StrongNameKeyPair , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class AssemblyBuilder ConvertTypeLibToAssembly(object , string , struct TypeLibImporterFlags , class ITypeLibImporterNotifySink , [] byte , class StrongNameKeyPair , string , class Version )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object ConvertAssemblyToTypeLib(class Assembly , string , struct TypeLibExporterFlags , class ITypeLibExporterNotifySink )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool GetPrimaryInteropAssembly(struct Guid , int , int , int , &amp; string , &amp; string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="UnknownWrapper">
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance object get_WrappedObject()" />
        </Type>
        <Type Name="VariantWrapper">
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance object get_WrappedObject()" />
        </Type>
      </Namespace>
      <Namespace Name="Serialization">
        <Type Name="Formatter">
          <Method Sig="instance object Deserialize(class Stream )" />
          <Method Sig="instance void Serialize(class Stream , object )" />
          <Method Sig="instance class ISurrogateSelector get_SurrogateSelector()" />
          <Method Sig="instance void set_SurrogateSelector(class ISurrogateSelector )" />
          <Method Sig="instance class SerializationBinder get_Binder()" />
          <Method Sig="instance void set_Binder(class SerializationBinder )" />
          <Method Sig="instance struct StreamingContext get_Context()" />
          <Method Sig="instance void set_Context(struct StreamingContext )" />
        </Type>
        <Type Name="FormatterConverter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance object Convert(object , class Type )" />
          <Method Sig="instance object Convert(object , struct TypeCode )" />
          <Method Sig="instance bool ToBoolean(object )" />
          <Method Sig="instance char ToChar(object )" />
          <Method Sig="instance sbyte ToSByte(object )" />
          <Method Sig="instance byte ToByte(object )" />
          <Method Sig="instance short ToInt16(object )" />
          <Method Sig="instance ushort ToUInt16(object )" />
          <Method Sig="instance int ToInt32(object )" />
          <Method Sig="instance uint ToUInt32(object )" />
          <Method Sig="instance in64 ToInt64(object )" />
          <Method Sig="instance uint64 ToUInt64(object )" />
          <Method Sig="instance float ToSingle(object )" />
          <Method Sig="instance double ToDouble(object )" />
          <Method Sig="instance struct Decimal ToDecimal(object )" />
          <Method Sig="instance struct DateTime ToDateTime(object )" />
          <Method Sig="instance string ToString(object )" />
        </Type>
        <Type Name="FormatterServices">
          <Method Sig="[] class MemberInfo GetSerializableMembers(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="[] class MemberInfo GetSerializableMembers(class Type , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void CheckTypeSecurity(class Type , struct TypeFilterLevel )" />
          <Method Sig="object GetUninitializedObject(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetSafeUninitializedObject(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object PopulateObjectMembers(object , [] class MemberInfo , [] object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="[] object GetObjectData(object , [] class MemberInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Type GetTypeFromAssembly(class Assembly , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ObjectIDGenerator">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance in64 GetId(object , &amp; bool )" />
          <Method Sig="instance in64 HasId(object , &amp; bool )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ObjectManager">
          <Method Sig="instance void .ctor(class ISurrogateSelector , struct StreamingContext )" />
          <Method Sig="void .cctor()" />
          <Method Sig="instance object GetObject(in64 )" />
          <Method Sig="instance void RegisterObject(object , in64 )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RegisterObject(object , in64 , class SerializationInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RegisterObject(object , in64 , class SerializationInfo , in64 , class MemberInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RegisterObject(object , in64 , class SerializationInfo , in64 , class MemberInfo , [] int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void DoFixups()" />
          <Method Sig="instance void RecordFixup(in64 , class MemberInfo , in64 )" />
          <Method Sig="instance void RecordDelayedFixup(in64 , string , in64 )" />
          <Method Sig="instance void RecordArrayElementFixup(in64 , int , in64 )" />
          <Method Sig="instance void RecordArrayElementFixup(in64 , [] int , in64 )" />
          <Method Sig="instance void RaiseDeserializationEvent()" />
          <Method Sig="instance void RaiseOnDeserializingEvent(object )" />
        </Type>
        <Type Name="SerializationObjectManager">
          <Method Sig="instance void .ctor(struct StreamingContext )" />
          <Method Sig="instance void RegisterObject(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RaiseOnSerializedEvent()" />
        </Type>
        <Type Name="OptionalFieldAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_VersionAdded()" />
          <Method Sig="instance void set_VersionAdded(int )" />
        </Type>
        <Type Name="OnSerializingAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="OnSerializedAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="OnDeserializingAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="OnDeserializedAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SerializationBinder">
          <Method Sig="instance class Type BindToType(string , string )" />
        </Type>
        <Type Name="SerializationInfo">
          <Method Sig="instance void .ctor(class Type , class IFormatterConverter )" />
          <Method Sig="instance string get_FullTypeName()" />
          <Method Sig="instance void set_FullTypeName(string )" />
          <Method Sig="instance string get_AssemblyName()" />
          <Method Sig="instance void set_AssemblyName(string )" />
          <Method Sig="instance void SetType(class Type )" />
          <Method Sig="instance int get_MemberCount()" />
          <Method Sig="instance class SerializationInfoEnumerator GetEnumerator()" />
          <Method Sig="instance void AddValue(string , object , class Type )" />
          <Method Sig="instance void AddValue(string , object )" />
          <Method Sig="instance void AddValue(string , bool )" />
          <Method Sig="instance void AddValue(string , char )" />
          <Method Sig="instance void AddValue(string , sbyte )" />
          <Method Sig="instance void AddValue(string , byte )" />
          <Method Sig="instance void AddValue(string , short )" />
          <Method Sig="instance void AddValue(string , ushort )" />
          <Method Sig="instance void AddValue(string , int )" />
          <Method Sig="instance void AddValue(string , uint )" />
          <Method Sig="instance void AddValue(string , in64 )" />
          <Method Sig="instance void AddValue(string , uint64 )" />
          <Method Sig="instance void AddValue(string , float )" />
          <Method Sig="instance void AddValue(string , double )" />
          <Method Sig="instance void AddValue(string , struct Decimal )" />
          <Method Sig="instance void AddValue(string , struct DateTime )" />
          <Method Sig="instance object GetValue(string , class Type )" />
          <Method Sig="instance bool GetBoolean(string )" />
          <Method Sig="instance char GetChar(string )" />
          <Method Sig="instance sbyte GetSByte(string )" />
          <Method Sig="instance byte GetByte(string )" />
          <Method Sig="instance short GetInt16(string )" />
          <Method Sig="instance ushort GetUInt16(string )" />
          <Method Sig="instance int GetInt32(string )" />
          <Method Sig="instance uint GetUInt32(string )" />
          <Method Sig="instance in64 GetInt64(string )" />
          <Method Sig="instance uint64 GetUInt64(string )" />
          <Method Sig="instance float GetSingle(string )" />
          <Method Sig="instance double GetDouble(string )" />
          <Method Sig="instance struct Decimal GetDecimal(string )" />
          <Method Sig="instance struct DateTime GetDateTime(string )" />
          <Method Sig="instance string GetString(string )" />
        </Type>
        <Type Name="SerializationEntry">
          <Method Sig="instance object get_Value()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Type get_ObjectType()" />
        </Type>
        <Type Name="SerializationInfoEnumerator">
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance struct SerializationEntry get_Current()" />
          <Method Sig="instance void Reset()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance object get_Value()" />
          <Method Sig="instance class Type get_ObjectType()" />
        </Type>
        <Type Name="SerializationException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="StreamingContext">
          <Method Sig="instance void .ctor(struct StreamingContextStates )" />
          <Method Sig="instance void .ctor(struct StreamingContextStates , object )" />
          <Method Sig="instance object get_Context()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance struct StreamingContextStates get_State()" />
        </Type>
        <Type Name="SurrogateSelector">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void AddSurrogate(class Type , struct StreamingContext , class ISerializationSurrogate )" />
          <Method Sig="instance void ChainSelector(class ISurrogateSelector )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ISurrogateSelector GetNextSelector()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ISerializationSurrogate GetSurrogate(class Type , struct StreamingContext , &amp; class ISurrogateSelector )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RemoveSurrogate(class Type , struct StreamingContext )" />
        </Type>
        <Namespace Name="Formatters">
          <Type Name="InternalRM">
            <Method Sig="void InfoSoap([] object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Remoting" PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="bool SoapCheckEnabled()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Remoting" PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Remoting" PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="InternalST">
            <Method Sig="void InfoSoap([] object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="bool SoapCheckEnabled()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void Soap([] object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SoapAssert(bool , string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SerializationSetValue(class FieldInfo , object , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class Assembly LoadAssemblyFromString(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission Name="System.Runtime.Serialization.Formatters.Soap" PublicKeyBlob="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="SoapMessage">
            <Method Sig="instance [] string get_ParamNames()" />
            <Method Sig="instance void set_ParamNames([] string )" />
            <Method Sig="instance [] object get_ParamValues()" />
            <Method Sig="instance void set_ParamValues([] object )" />
            <Method Sig="instance [] class Type get_ParamTypes()" />
            <Method Sig="instance void set_ParamTypes([] class Type )" />
            <Method Sig="instance string get_MethodName()" />
            <Method Sig="instance void set_MethodName(string )" />
            <Method Sig="instance string get_XmlNameSpace()" />
            <Method Sig="instance void set_XmlNameSpace(string )" />
            <Method Sig="instance [] class Header get_Headers()" />
            <Method Sig="instance void set_Headers([] class Header )" />
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="SoapFault">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(string , string , string , class ServerFault )" />
            <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_FaultCode()" />
            <Method Sig="instance void set_FaultCode(string )" />
            <Method Sig="instance string get_FaultString()" />
            <Method Sig="instance void set_FaultString(string )" />
            <Method Sig="instance string get_FaultActor()" />
            <Method Sig="instance void set_FaultActor(string )" />
            <Method Sig="instance object get_Detail()" />
            <Method Sig="instance void set_Detail(object )" />
          </Type>
          <Type Name="ServerFault">
            <Method Sig="instance void .ctor(string , string , string )" />
            <Method Sig="instance string get_ExceptionType()" />
            <Method Sig="instance void set_ExceptionType(string )" />
            <Method Sig="instance string get_ExceptionMessage()" />
            <Method Sig="instance void set_ExceptionMessage(string )" />
            <Method Sig="instance string get_StackTrace()" />
            <Method Sig="instance void set_StackTrace(string )" />
          </Type>
          <Namespace Name="Binary">
            <Type Name="BinaryFormatter">
              <Method Sig="instance struct FormatterTypeStyle get_TypeFormat()" />
              <Method Sig="instance void set_TypeFormat(struct FormatterTypeStyle )" />
              <Method Sig="instance struct FormatterAssemblyStyle get_AssemblyFormat()" />
              <Method Sig="instance void set_AssemblyFormat(struct FormatterAssemblyStyle )" />
              <Method Sig="instance struct TypeFilterLevel get_FilterLevel()" />
              <Method Sig="instance void set_FilterLevel(struct TypeFilterLevel )" />
              <Method Sig="instance class ISurrogateSelector get_SurrogateSelector()" />
              <Method Sig="instance void set_SurrogateSelector(class ISurrogateSelector )" />
              <Method Sig="instance class SerializationBinder get_Binder()" />
              <Method Sig="instance void set_Binder(class SerializationBinder )" />
              <Method Sig="instance struct StreamingContext get_Context()" />
              <Method Sig="instance void set_Context(struct StreamingContext )" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(class ISurrogateSelector , struct StreamingContext )" />
              <Method Sig="instance object Deserialize(class Stream )">
                <Demand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                    <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                  </PermissionSet>
                </Demand>
              </Method>
              <Method Sig="instance object Deserialize(class Stream , class HeaderHandler )">
                <Demand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                    <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                  </PermissionSet>
                </Demand>
              </Method>
              <Method Sig="instance object DeserializeMethodResponse(class Stream , class HeaderHandler , class IMethodCallMessage )">
                <Demand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                    <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                  </PermissionSet>
                </Demand>
              </Method>
              <Method Sig="instance object UnsafeDeserialize(class Stream , class HeaderHandler )">
                <Demand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                    <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                  </PermissionSet>
                </Demand>
                <LinkDemand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
                  </PermissionSet>
                </LinkDemand>
              </Method>
              <Method Sig="instance object UnsafeDeserializeMethodResponse(class Stream , class HeaderHandler , class IMethodCallMessage )">
                <Demand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                    <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                  </PermissionSet>
                </Demand>
                <LinkDemand>
                  <PermissionSet version="1" class="System.Security.PermissionSet">
                    <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
                  </PermissionSet>
                </LinkDemand>
              </Method>
              <Method Sig="instance void Serialize(class Stream , object )" />
              <Method Sig="instance void Serialize(class Stream , object , [] class Header )" />
            </Type>
          </Namespace>
        </Namespace>
      </Namespace>
      <Namespace Name="ConstrainedExecution">
        <Type Name="ReliabilityContractAttribute">
          <Method Sig="instance void .ctor(struct Consistency , struct Cer )" />
          <Method Sig="instance struct Consistency get_ConsistencyGuarantee()" />
          <Method Sig="instance struct Cer get_Cer()" />
        </Type>
        <Type Name="PrePrepareMethodAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
      </Namespace>
      <Type Name="MemoryFailPoint">
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor(int )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Dispose()" />
      </Type>
      <Type Name="GCSettings">
        <Method Sig="bool get_IsServerGC()" />
      </Type>
      <Namespace Name="Remoting">
        <Namespace Name="Contexts">
          <Type Name="ContextAttribute">
            <Method Sig="instance void .ctor(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Name()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool IsNewContextOK(class Context )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Freeze(class Context )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool Equals(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int GetHashCode()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool IsContextOK(class Context , class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetPropertiesForNewContext(class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="CrossContextDelegate">
            <Method Sig="instance void .ctor(object , intptr )" />
            <Method Sig="instance void Invoke()" />
            <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
            <Method Sig="instance void EndInvoke(class IAsyncResult )" />
          </Type>
          <Type Name="Context">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ContextID()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class Context get_DefaultContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IContextProperty GetProperty(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void SetProperty(class IContextProperty )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Freeze()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] class IContextProperty get_ContextProperties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string ToString()" />
            <Method Sig="instance void DoCallBack(class CrossContextDelegate )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class LocalDataStoreSlot AllocateDataSlot()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class LocalDataStoreSlot AllocateNamedDataSlot(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class LocalDataStoreSlot GetNamedDataSlot(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void FreeNamedDataSlot(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SetData(class LocalDataStoreSlot , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="object GetData(class LocalDataStoreSlot )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="bool RegisterDynamicProperty(class IDynamicProperty , class ContextBoundObject , class Context )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="bool UnregisterDynamicProperty(string , class ContextBoundObject , class Context )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="void .cctor()" />
          </Type>
          <Type Name="ContextProperty">
            <Method Sig="instance string get_Name()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Property()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="SynchronizationAttribute">
            <Method Sig="instance bool get_Locked()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Locked(bool )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_IsReEntrant()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(bool )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(int , bool )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool IsContextOK(class Context , class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetPropertiesForNewContext(class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessageSink GetServerContextSink(class IMessageSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessageSink GetClientContextSink(class IMessageSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Namespace Name="Messaging">
          <Type Name="AsyncResult">
            <Method Sig="instance bool get_IsCompleted()" />
            <Method Sig="instance object get_AsyncDelegate()" />
            <Method Sig="instance object get_AsyncState()" />
            <Method Sig="instance bool get_CompletedSynchronously()" />
            <Method Sig="instance bool get_EndInvokeCalled()" />
            <Method Sig="instance void set_EndInvokeCalled(bool )" />
            <Method Sig="instance class WaitHandle get_AsyncWaitHandle()" />
            <Method Sig="instance void SetMessageCtrl(class IMessageCtrl )" />
            <Method Sig="instance class IMessage SyncProcessMessage(class IMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessageCtrl AsyncProcessMessage(class IMessage , class IMessageSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessageSink get_NextSink()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessage GetReplyMessage()" />
          </Type>
          <Type Name="CallContext">
            <Method Sig="void FreeNamedDataSlot(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="object LogicalGetData(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="object get_HostContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void set_HostContext(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="object GetData(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SetData(string , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void LogicalSetData(string , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="[] class Header GetHeaders()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SetHeaders([] class Header )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="LogicalCallContext">
            <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object Clone()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasInfo()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void FreeNamedDataSlot(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetData(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void SetData(string , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="Header">
            <Method Sig="instance void .ctor(string , object )" />
            <Method Sig="instance void .ctor(string , object , bool )" />
            <Method Sig="instance void .ctor(string , object , bool , string )" />
          </Type>
          <Type Name="HeaderHandler">
            <Method Sig="instance void .ctor(object , intptr )" />
            <Method Sig="instance object Invoke([] class Header )" />
            <Method Sig="instance class IAsyncResult BeginInvoke([] class Header , class AsyncCallback , object )" />
            <Method Sig="instance object EndInvoke(class IAsyncResult )" />
          </Type>
          <Type Name="ReturnMessage">
            <Method Sig="instance void .ctor(object , [] object , int , class LogicalCallContext , class IMethodCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class Exception , class IMethodCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Uri()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Uri(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_MethodName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_TypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_MethodSignature()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MethodBase get_MethodBase()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasVarArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_Args()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_OutArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetOutArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetOutArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_OutArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Exception get_Exception()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_ReturnValue()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class LogicalCallContext get_LogicalCallContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="MethodCall">
            <Method Sig="instance void .ctor([] class Header )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class IMessage )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void RootSetObjectData(class SerializationInfo , struct StreamingContext )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void ResolveMethod()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Init()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetArgName(int )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_Args()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_InArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetInArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetInArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_InArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_MethodName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_TypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_MethodSignature()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MethodBase get_MethodBase()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Uri()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Uri(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasVarArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class LogicalCallContext get_LogicalCallContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object HeaderHandler([] class Header )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="ConstructionCall">
            <Method Sig="instance void .ctor([] class Header )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class IMessage )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_CallSiteActivationAttributes()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Type get_ActivationType()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_ActivationTypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IList get_ContextProperties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IActivator get_Activator()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Activator(class IActivator )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="MethodResponse">
            <Method Sig="instance void .ctor([] class Header , class IMethodCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object HeaderHandler([] class Header )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void RootSetObjectData(class SerializationInfo , struct StreamingContext )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Uri()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Uri(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_MethodName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_TypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_MethodSignature()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MethodBase get_MethodBase()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasVarArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_Args()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_OutArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetOutArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetOutArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_OutArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Exception get_Exception()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_ReturnValue()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class LogicalCallContext get_LogicalCallContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="ConstructionResponse">
            <Method Sig="instance void .ctor([] class Header , class IMethodCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="InternalMessageWrapper">
            <Method Sig="instance void .ctor(class IMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="MethodCallMessageWrapper">
            <Method Sig="instance void .ctor(class IMethodCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Uri()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Uri(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_MethodName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_TypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_MethodSignature()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class LogicalCallContext get_LogicalCallContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MethodBase get_MethodBase()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_Args()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Args([] object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasVarArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_InArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetInArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetInArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_InArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="MethodReturnMessageWrapper">
            <Method Sig="instance void .ctor(class IMethodReturnMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Uri()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Uri(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_MethodName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_TypeName()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_MethodSignature()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class LogicalCallContext get_LogicalCallContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MethodBase get_MethodBase()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_ArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_Args()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Args([] object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_HasVarArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_OutArgCount()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetOutArg(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetOutArgName(int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] object get_OutArgs()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Exception get_Exception()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Exception(class Exception )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_ReturnValue()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_ReturnValue(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="OneWayAttribute">
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="MessageSurrogateFilter">
            <Method Sig="instance void .ctor(object , intptr )" />
            <Method Sig="instance bool Invoke(string , object )" />
            <Method Sig="instance class IAsyncResult BeginInvoke(string , object , class AsyncCallback , object )" />
            <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
          </Type>
          <Type Name="RemotingSurrogateSelector">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Filter(class MessageSurrogateFilter )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MessageSurrogateFilter get_Filter()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void SetRootObject(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetRootObject()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void ChainSelector(class ISurrogateSelector )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class ISerializationSurrogate GetSurrogate(class Type , struct StreamingContext , &amp; class ISurrogateSelector )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class ISurrogateSelector GetNextSelector()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void UseSoapFormat()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Namespace Name="Channels">
          <Type Name="ChannelServices">
            <Method Sig="void RegisterChannel(class IChannel , bool )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="void RegisterChannel(class IChannel )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="void UnregisterChannel(class IChannel )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="[] class IChannel get_RegisteredChannels()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IChannel GetChannel(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="[] string GetUrlsForObject(class MarshalByRefObject )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IDictionary GetChannelSinkProperties(object )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="struct ServerProcessing DispatchMessage(class IServerChannelSinkStack , class IMessage , &amp; class IMessage )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IMessage SyncDispatchMessage(class IMessage )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IMessageCtrl AsyncDispatchMessage(class IMessage , class IMessageSink )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IServerChannelSink CreateServerChannelSinkChain(class IServerChannelSinkProvider , class IChannelReceiver )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()" />
          </Type>
          <Type Name="ClientChannelSinkStack">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class IMessageSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Push(class IClientChannelSink , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object Pop(class IClientChannelSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void AsyncProcessResponse(class ITransportHeaders , class Stream )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void DispatchReplyMessage(class IMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void DispatchException(class Exception )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="ServerChannelSinkStack">
            <Method Sig="instance void Push(class IServerChannelSink , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object Pop(class IServerChannelSink )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Store(class IServerChannelSink , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void StoreAndDispatch(class IServerChannelSink , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void AsyncProcessResponse(class IMessage , class ITransportHeaders , class Stream )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Stream GetResponseStream(class IMessage , class ITransportHeaders )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void ServerCallback(class IAsyncResult )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="ChannelDataStore">
            <Method Sig="instance void .ctor([] string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance [] string get_ChannelUris()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_ChannelUris([] string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Item(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Item(object , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="TransportHeaders">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Item(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Item(object , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IEnumerator GetEnumerator()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="SinkProviderData">
            <Method Sig="instance void .ctor(string )" />
            <Method Sig="instance string get_Name()" />
            <Method Sig="instance class IDictionary get_Properties()" />
            <Method Sig="instance class IList get_Children()" />
          </Type>
          <Type Name="BaseChannelObjectWithProperties">
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Item(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Item(object , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class ICollection get_Keys()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class ICollection get_Values()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool Contains(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_IsReadOnly()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_IsFixedSize()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Add(object , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Clear()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Remove(object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IDictionaryEnumerator GetEnumerator()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void CopyTo(class Array , int )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance int get_Count()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_SyncRoot()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_IsSynchronized()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="BaseChannelWithProperties">
            <Method Sig="instance class IDictionary get_Properties()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Namespace Name="Lifetime">
          <Type Name="ClientSponsor">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(struct TimeSpan )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance struct TimeSpan get_RenewalTime()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_RenewalTime(struct TimeSpan )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool Register(class MarshalByRefObject )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Unregister(class MarshalByRefObject )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance struct TimeSpan Renewal(class ILease )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void Close()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object InitializeLifetimeService()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="LifetimeServices">
            <Method Sig="struct TimeSpan get_LeaseTime()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void set_LeaseTime(struct TimeSpan )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="struct TimeSpan get_RenewOnCallTime()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void set_RenewOnCallTime(struct TimeSpan )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="struct TimeSpan get_SponsorshipTimeout()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void set_SponsorshipTimeout(struct TimeSpan )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="struct TimeSpan get_LeaseManagerPollTime()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void set_LeaseManagerPollTime(struct TimeSpan )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Namespace Name="Services">
          <Type Name="EnterpriseServicesHelper">
            <Method Sig="object WrapIUnknownWithComObject(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="class IConstructionReturnMessage CreateConstructionReturnMessage(class IConstructionCallMessage , class MarshalByRefObject )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SwitchWrappers(class RealProxy , class RealProxy )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="TrackingServices">
            <Method Sig="void RegisterTrackingHandler(class ITrackingHandler )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void UnregisterTrackingHandler(class ITrackingHandler )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="[] class ITrackingHandler get_RegisteredHandlers()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Type Name="ObjectHandle">
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance object Unwrap()" />
          <Method Sig="instance object InitializeLifetimeService()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ObjRef">
          <Method Sig="instance void .ctor(class MarshalByRefObject , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_URI()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_URI(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class IRemotingTypeInfo get_TypeInfo()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_TypeInfo(class IRemotingTypeInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class IEnvoyInfo get_EnvoyInfo()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_EnvoyInfo(class IEnvoyInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class IChannelInfo get_ChannelInfo()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_ChannelInfo(class IChannelInfo )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance object GetRealObject(struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter, Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool IsFromThisProcess()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool IsFromThisAppDomain()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Namespace Name="Proxies">
          <Type Name="ProxyAttribute">
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class MarshalByRefObject CreateInstance(class Type )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class RealProxy CreateProxy(class ObjRef , class Type , object , class Context )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool IsContextOK(class Context , class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetPropertiesForNewContext(class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="RealProxy">
            <Method Sig="instance class IConstructionReturnMessage InitializeServerObject(class IConstructionCallMessage )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void SetStubData(class RealProxy , object )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="object GetStubData(class RealProxy )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class Type GetProxiedType()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class IMessage Invoke(class IMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class ObjRef CreateObjRef(class Type )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance intptr GetCOMIUnknown(bool )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void SetCOMIUnknown(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance intptr SupportsInterface(&amp; struct Guid )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance object GetTransparentProxy()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
          </Type>
        </Namespace>
        <Namespace Name="Metadata">
          <Type Name="SoapAttribute">
            <Method Sig="instance string get_XmlNamespace()" />
            <Method Sig="instance void set_XmlNamespace(string )" />
            <Method Sig="instance bool get_UseAttribute()" />
            <Method Sig="instance void set_UseAttribute(bool )" />
            <Method Sig="instance bool get_Embedded()" />
            <Method Sig="instance void set_Embedded(bool )" />
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="SoapTypeAttribute">
            <Method Sig="instance struct SoapOption get_SoapOptions()" />
            <Method Sig="instance void set_SoapOptions(struct SoapOption )" />
            <Method Sig="instance string get_XmlElementName()" />
            <Method Sig="instance void set_XmlElementName(string )" />
            <Method Sig="instance string get_XmlNamespace()" />
            <Method Sig="instance void set_XmlNamespace(string )" />
            <Method Sig="instance string get_XmlTypeName()" />
            <Method Sig="instance void set_XmlTypeName(string )" />
            <Method Sig="instance string get_XmlTypeNamespace()" />
            <Method Sig="instance void set_XmlTypeNamespace(string )" />
            <Method Sig="instance struct XmlFieldOrderOption get_XmlFieldOrder()" />
            <Method Sig="instance void set_XmlFieldOrder(struct XmlFieldOrderOption )" />
            <Method Sig="instance bool get_UseAttribute()" />
            <Method Sig="instance void set_UseAttribute(bool )" />
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="SoapMethodAttribute">
            <Method Sig="instance string get_SoapAction()" />
            <Method Sig="instance void set_SoapAction(string )" />
            <Method Sig="instance bool get_UseAttribute()" />
            <Method Sig="instance void set_UseAttribute(bool )" />
            <Method Sig="instance string get_XmlNamespace()" />
            <Method Sig="instance void set_XmlNamespace(string )" />
            <Method Sig="instance string get_ResponseXmlElementName()" />
            <Method Sig="instance void set_ResponseXmlElementName(string )" />
            <Method Sig="instance string get_ResponseXmlNamespace()" />
            <Method Sig="instance void set_ResponseXmlNamespace(string )" />
            <Method Sig="instance string get_ReturnXmlElementName()" />
            <Method Sig="instance void set_ReturnXmlElementName(string )" />
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="SoapFieldAttribute">
            <Method Sig="instance bool IsInteropXmlElement()" />
            <Method Sig="instance string get_XmlElementName()" />
            <Method Sig="instance void set_XmlElementName(string )" />
            <Method Sig="instance int get_Order()" />
            <Method Sig="instance void set_Order(int )" />
            <Method Sig="instance void .ctor()" />
          </Type>
          <Type Name="SoapParameterAttribute">
            <Method Sig="instance void .ctor()" />
          </Type>
          <Namespace Name="W3cXsd2001">
            <Type Name="SoapDateTime">
              <Method Sig="string get_XsdType()" />
              <Method Sig="string ToString(struct DateTime )" />
              <Method Sig="struct DateTime Parse(string )" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapDuration">
              <Method Sig="string get_XsdType()" />
              <Method Sig="string ToString(struct TimeSpan )" />
              <Method Sig="struct TimeSpan Parse(string )" />
              <Method Sig="instance void .ctor()" />
            </Type>
            <Type Name="SoapTime">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapTime Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapDate">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance void .ctor(struct DateTime , int )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance int get_Sign()" />
              <Method Sig="instance void set_Sign(int )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapDate Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapYearMonth">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance void .ctor(struct DateTime , int )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance int get_Sign()" />
              <Method Sig="instance void set_Sign(int )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapYearMonth Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapYear">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance void .ctor(struct DateTime , int )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance int get_Sign()" />
              <Method Sig="instance void set_Sign(int )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapYear Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapMonthDay">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapMonthDay Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapDay">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapDay Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapMonth">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct DateTime )" />
              <Method Sig="instance struct DateTime get_Value()" />
              <Method Sig="instance void set_Value(struct DateTime )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapMonth Parse(string )" />
              <Method Sig="void .cctor()" />
            </Type>
            <Type Name="SoapHexBinary">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor([] byte )" />
              <Method Sig="instance [] byte get_Value()" />
              <Method Sig="instance void set_Value([] byte )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapHexBinary Parse(string )" />
            </Type>
            <Type Name="SoapBase64Binary">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor([] byte )" />
              <Method Sig="instance [] byte get_Value()" />
              <Method Sig="instance void set_Value([] byte )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapBase64Binary Parse(string )" />
            </Type>
            <Type Name="SoapInteger">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct Decimal )" />
              <Method Sig="instance struct Decimal get_Value()" />
              <Method Sig="instance void set_Value(struct Decimal )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapInteger Parse(string )" />
            </Type>
            <Type Name="SoapPositiveInteger">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct Decimal )" />
              <Method Sig="instance struct Decimal get_Value()" />
              <Method Sig="instance void set_Value(struct Decimal )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapPositiveInteger Parse(string )" />
            </Type>
            <Type Name="SoapNonPositiveInteger">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct Decimal )" />
              <Method Sig="instance struct Decimal get_Value()" />
              <Method Sig="instance void set_Value(struct Decimal )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNonPositiveInteger Parse(string )" />
            </Type>
            <Type Name="SoapNonNegativeInteger">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct Decimal )" />
              <Method Sig="instance struct Decimal get_Value()" />
              <Method Sig="instance void set_Value(struct Decimal )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNonNegativeInteger Parse(string )" />
            </Type>
            <Type Name="SoapNegativeInteger">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(struct Decimal )" />
              <Method Sig="instance struct Decimal get_Value()" />
              <Method Sig="instance void set_Value(struct Decimal )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNegativeInteger Parse(string )" />
            </Type>
            <Type Name="SoapAnyUri">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapAnyUri Parse(string )" />
            </Type>
            <Type Name="SoapQName">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance void .ctor(string , string )" />
              <Method Sig="instance void .ctor(string , string , string )" />
              <Method Sig="instance string get_Name()" />
              <Method Sig="instance void set_Name(string )" />
              <Method Sig="instance string get_Namespace()" />
              <Method Sig="instance void set_Namespace(string )" />
              <Method Sig="instance string get_Key()" />
              <Method Sig="instance void set_Key(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapQName Parse(string )" />
            </Type>
            <Type Name="SoapNotation">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNotation Parse(string )" />
            </Type>
            <Type Name="SoapNormalizedString">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNormalizedString Parse(string )" />
            </Type>
            <Type Name="SoapToken">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapToken Parse(string )" />
            </Type>
            <Type Name="SoapLanguage">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapLanguage Parse(string )" />
            </Type>
            <Type Name="SoapName">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapName Parse(string )" />
            </Type>
            <Type Name="SoapIdrefs">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapIdrefs Parse(string )" />
            </Type>
            <Type Name="SoapEntities">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapEntities Parse(string )" />
            </Type>
            <Type Name="SoapNmtoken">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNmtoken Parse(string )" />
            </Type>
            <Type Name="SoapNmtokens">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNmtokens Parse(string )" />
            </Type>
            <Type Name="SoapNcName">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapNcName Parse(string )" />
            </Type>
            <Type Name="SoapId">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapId Parse(string )" />
            </Type>
            <Type Name="SoapIdref">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapIdref Parse(string )" />
            </Type>
            <Type Name="SoapEntity">
              <Method Sig="string get_XsdType()" />
              <Method Sig="instance string GetXsdType()" />
              <Method Sig="instance void .ctor()" />
              <Method Sig="instance void .ctor(string )" />
              <Method Sig="instance string get_Value()" />
              <Method Sig="instance void set_Value(string )" />
              <Method Sig="instance string ToString()" />
              <Method Sig="class SoapEntity Parse(string )" />
            </Type>
          </Namespace>
        </Namespace>
        <Type Name="RemotingConfiguration">
          <Method Sig="void Configure(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void Configure(string , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string get_ApplicationName()" />
          <Method Sig="void set_ApplicationName(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string get_ApplicationId()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string get_ProcessId()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="struct CustomErrorsModes get_CustomErrorsMode()" />
          <Method Sig="void set_CustomErrorsMode(struct CustomErrorsModes )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool CustomErrorsEnabled(bool )" />
          <Method Sig="void RegisterActivatedServiceType(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterActivatedServiceType(class ActivatedServiceTypeEntry )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterWellKnownServiceType(class Type , string , struct WellKnownObjectMode )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterWellKnownServiceType(class WellKnownServiceTypeEntry )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterActivatedClientType(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterActivatedClientType(class ActivatedClientTypeEntry )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterWellKnownClientType(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void RegisterWellKnownClientType(class WellKnownClientTypeEntry )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="[] class ActivatedServiceTypeEntry GetRegisteredActivatedServiceTypes()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="[] class WellKnownServiceTypeEntry GetRegisteredWellKnownServiceTypes()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="[] class ActivatedClientTypeEntry GetRegisteredActivatedClientTypes()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="[] class WellKnownClientTypeEntry GetRegisteredWellKnownClientTypes()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class ActivatedClientTypeEntry IsRemotelyActivatedClientType(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class ActivatedClientTypeEntry IsRemotelyActivatedClientType(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WellKnownClientTypeEntry IsWellKnownClientType(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WellKnownClientTypeEntry IsWellKnownClientType(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool IsActivationAllowed(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="TypeEntry">
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance void set_TypeName(string )" />
          <Method Sig="instance string get_AssemblyName()" />
          <Method Sig="instance void set_AssemblyName(string )" />
        </Type>
        <Type Name="ActivatedClientTypeEntry">
          <Method Sig="instance void .ctor(string , string , string )" />
          <Method Sig="instance void .ctor(class Type , string )" />
          <Method Sig="instance string get_ApplicationUrl()" />
          <Method Sig="instance class Type get_ObjectType()" />
          <Method Sig="instance [] class IContextAttribute get_ContextAttributes()" />
          <Method Sig="instance void set_ContextAttributes([] class IContextAttribute )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="ActivatedServiceTypeEntry">
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_ObjectType()" />
          <Method Sig="instance [] class IContextAttribute get_ContextAttributes()" />
          <Method Sig="instance void set_ContextAttributes([] class IContextAttribute )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="WellKnownClientTypeEntry">
          <Method Sig="instance void .ctor(string , string , string )" />
          <Method Sig="instance void .ctor(class Type , string )" />
          <Method Sig="instance string get_ObjectUrl()" />
          <Method Sig="instance class Type get_ObjectType()" />
          <Method Sig="instance string get_ApplicationUrl()" />
          <Method Sig="instance void set_ApplicationUrl(string )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="WellKnownServiceTypeEntry">
          <Method Sig="instance void .ctor(string , string , string , struct WellKnownObjectMode )" />
          <Method Sig="instance void .ctor(class Type , string , struct WellKnownObjectMode )" />
          <Method Sig="instance string get_ObjectUri()" />
          <Method Sig="instance struct WellKnownObjectMode get_Mode()" />
          <Method Sig="instance class Type get_ObjectType()" />
          <Method Sig="instance [] class IContextAttribute get_ContextAttributes()" />
          <Method Sig="instance void set_ContextAttributes([] class IContextAttribute )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="RemotingException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ServerException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="RemotingTimeoutException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="RemotingServices">
          <Method Sig="void .cctor()" />
          <Method Sig="bool IsTransparentProxy(object )" />
          <Method Sig="bool IsObjectOutOfContext(object )" />
          <Method Sig="bool IsObjectOutOfAppDomain(object )" />
          <Method Sig="class RealProxy GetRealProxy(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetSessionIdForMethodMessage(class IMethodMessage )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object GetLifetimeService(class MarshalByRefObject )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string GetObjectUri(class MarshalByRefObject )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void SetObjectUriForMarshal(class MarshalByRefObject , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class ObjRef Marshal(class MarshalByRefObject )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class ObjRef Marshal(class MarshalByRefObject , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class ObjRef Marshal(class MarshalByRefObject , string , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void GetObjectData(object , class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object Unmarshal(class ObjRef )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object Unmarshal(class ObjRef , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="object Connect(class Type , string )" />
          <Method Sig="object Connect(class Type , string , object )" />
          <Method Sig="bool Disconnect(class MarshalByRefObject )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class IMessageSink GetEnvoyChainForProxy(class MarshalByRefObject )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class ObjRef GetObjRefForProxy(class MarshalByRefObject )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class MethodBase GetMethodBaseFromMethodMessage(class IMethodMessage )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsMethodOverloaded(class IMethodMessage )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsOneWay(class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Type GetServerTypeForUri(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class IMethodReturnMessage ExecuteMessage(class MarshalByRefObject , class IMethodCallMessage )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void LogRemotingStage(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="InternalRemotingServices">
          <Method Sig="void DebugOutChnl(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void RemotingTrace([] object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void RemotingAssert(bool , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void SetServerIdentity(class MethodCall , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class SoapAttribute GetCachedSoapAttribute(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SoapServices">
          <Method Sig="void RegisterInteropXmlElement(string , string , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void RegisterInteropXmlType(string , string , class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PreLoad(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void PreLoad(class Assembly )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Type GetInteropTypeFromXmlElement(string , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class Type GetInteropTypeFromXmlType(string , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void GetInteropFieldTypeAndNameFromXmlElement(class Type , string , string , &amp; class Type , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void GetInteropFieldTypeAndNameFromXmlAttribute(class Type , string , string , &amp; class Type , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool GetXmlElementForInteropType(class Type , &amp; string , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool GetXmlTypeForInteropType(class Type , &amp; string , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetXmlNamespaceForMethodCall(class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetXmlNamespaceForMethodResponse(class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void RegisterSoapActionForMethodBase(class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void RegisterSoapActionForMethodBase(class MethodBase , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string GetSoapActionFromMethodBase(class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsSoapActionValidForMethodBase(string , class MethodBase )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool GetTypeAndMethodNameFromSoapAction(string , &amp; string , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string get_XmlNsForClrType()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string get_XmlNsForClrTypeWithAssembly()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string get_XmlNsForClrTypeWithNs()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string get_XmlNsForClrTypeWithNsAndAssembly()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool IsClrTypeNamespace(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="string CodeXmlNamespaceForClrTypeNamespace(string , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="bool DecodeXmlNamespaceForClrTypeNamespace(string , &amp; string , &amp; string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Namespace Name="Activation">
          <Type Name="UrlAttribute">
            <Method Sig="instance void .ctor(string )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance bool Equals(object )" />
            <Method Sig="instance int GetHashCode()" />
            <Method Sig="instance bool IsContextOK(class Context , class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void GetPropertiesForNewContext(class IConstructionCallMessage )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_UrlValue()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="void .cctor()" />
          </Type>
        </Namespace>
      </Namespace>
      <Namespace Name="Versioning">
        <Type Name="ResourceConsumptionAttribute">
          <Method Sig="instance void .ctor(struct ResourceScope )" />
          <Method Sig="instance void .ctor(struct ResourceScope , struct ResourceScope )" />
          <Method Sig="instance struct ResourceScope get_ResourceScope()" />
          <Method Sig="instance struct ResourceScope get_ConsumptionScope()" />
        </Type>
        <Type Name="ResourceExposureAttribute">
          <Method Sig="instance void .ctor(struct ResourceScope )" />
          <Method Sig="instance struct ResourceScope get_ResourceExposureLevel()" />
        </Type>
        <Type Name="VersioningHelper">
          <Method Sig="string MakeVersionSafeName(string , struct ResourceScope , struct ResourceScope )" />
          <Method Sig="string MakeVersionSafeName(string , struct ResourceScope , struct ResourceScope , class Type )" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
    </Namespace>
    <Type Name="ApplicationException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="EventArgs">
      <Method Sig="instance void .ctor()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="ResolveEventArgs">
      <Method Sig="instance string get_Name()" />
      <Method Sig="instance void .ctor(string )" />
    </Type>
    <Type Name="AssemblyLoadEventArgs">
      <Method Sig="instance class Assembly get_LoadedAssembly()" />
      <Method Sig="instance void .ctor(class Assembly )" />
    </Type>
    <Type Name="ResolveEventHandler">
      <Method Sig="instance void .ctor(object , intptr )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Invoke(object , class ResolveEventArgs )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , class ResolveEventArgs , class AsyncCallback , object )" />
      <Method Sig="instance class Assembly EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="AssemblyLoadEventHandler">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(object , class AssemblyLoadEventArgs )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , class AssemblyLoadEventArgs , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="AppDomainInitializer">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke([] string )" />
      <Method Sig="instance class IAsyncResult BeginInvoke([] string , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="MarshalByRefObject">
      <Method Sig="instance object GetLifetimeService()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance object InitializeLifetimeService()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="RemotingConfiguration" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class ObjRef CreateObjRef(class Type )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="AppDomain">
      <Method Sig="instance void add_AssemblyLoad(class AssemblyLoadEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_AssemblyLoad(class AssemblyLoadEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_TypeResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_TypeResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_ResourceResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_ResourceResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_AssemblyResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_AssemblyResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_ReflectionOnlyAssemblyResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_ReflectionOnlyAssemblyResolve(class ResolveEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class Type GetType()" />
      <Method Sig="instance class AppDomainManager get_DomainManager()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlDomainPolicy" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , class PermissionSet , class PermissionSet , class PermissionSet )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , string , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , string , class PermissionSet , class PermissionSet , class PermissionSet )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , class Evidence , class PermissionSet , class PermissionSet , class PermissionSet )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , string , class Evidence , class PermissionSet , class PermissionSet , class PermissionSet )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class AssemblyBuilder DefineDynamicAssembly(class AssemblyName , struct AssemblyBuilderAccess , string , class Evidence , class PermissionSet , class PermissionSet , class PermissionSet , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string ApplyPolicy(string )" />
      <Method Sig="instance class ObjectHandle CreateInstance(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateInstanceFrom(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateComInstanceFrom(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateComInstanceFrom(string , string , [] byte , struct AssemblyHashAlgorithm )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateInstance(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateInstanceFrom(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateInstance(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ObjectHandle CreateInstanceFrom(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Load(class AssemblyName )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Load(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Load([] byte )" />
      <Method Sig="instance class Assembly Load([] byte , [] byte )" />
      <Method Sig="instance class Assembly Load([] byte , [] byte , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Load(class AssemblyName , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class Assembly Load(string , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssembly(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssembly(string , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssembly(string , class Evidence , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssembly(string , class Evidence , [] string , [] byte , struct AssemblyHashAlgorithm )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssemblyByName(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssemblyByName(string , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssemblyByName(string , class Evidence , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int ExecuteAssemblyByName(class AssemblyName , class Evidence , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class AppDomain get_CurrentDomain()" />
      <Method Sig="instance class Evidence get_Evidence()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_FriendlyName()" />
      <Method Sig="instance string get_BaseDirectory()" />
      <Method Sig="instance string get_RelativeSearchPath()" />
      <Method Sig="instance bool get_ShadowCopyFiles()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance [] class Assembly GetAssemblies()" />
      <Method Sig="instance [] class Assembly ReflectionOnlyGetAssemblies()" />
      <Method Sig="instance bool IsFinalizingForUnload()" />
      <Method Sig="instance void AppendPrivatePath(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void ClearPrivatePath()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void ClearShadowCopyPath()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetCachePath(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetData(string , object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetData(string , object , class IPermission )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance object GetData(string )" />
      <Method Sig="int GetCurrentThreadId()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void Unload(class AppDomain )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void SetAppDomainPolicy(class PolicyLevel )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlDomainPolicy" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class ActivationContext get_ActivationContext()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlDomainPolicy" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class ApplicationIdentity get_ApplicationIdentity()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlDomainPolicy" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class ApplicationTrust get_ApplicationTrust()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlDomainPolicy" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetThreadPrincipal(class IPrincipal )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void SetPrincipalPolicy(struct PrincipalPolicy )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object InitializeLifetimeService()" />
      <Method Sig="instance void DoCallBack(class CrossAppDomainDelegate )" />
      <Method Sig="instance string get_DynamicDirectory()" />
      <Method Sig="class AppDomain CreateDomain(string , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class AppDomain CreateDomain(string , class Evidence , string , string , bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class AppDomain CreateDomain(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void add_ProcessExit(class EventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_ProcessExit(class EventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_DomainUnload(class EventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_DomainUnload(class EventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void add_UnhandledException(class UnhandledExceptionEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void remove_UnhandledException(class UnhandledExceptionEventHandler )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="class AppDomain CreateDomain(string , class Evidence , class AppDomainSetup )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class AppDomain CreateDomain(string , class Evidence , class AppDomainSetup , class PermissionSet , [] class StrongName )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class AppDomain CreateDomain(string , class Evidence , string , string , bool , class AppDomainInitializer , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void SetShadowCopyPath(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetShadowCopyFiles()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void SetDynamicBase(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class AppDomainSetup get_SetupInformation()" />
      <Method Sig="instance object CreateInstanceAndUnwrap(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object CreateInstanceAndUnwrap(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object CreateInstanceAndUnwrap(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object CreateInstanceFromAndUnwrap(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object CreateInstanceFromAndUnwrap(string , string , [] object )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance object CreateInstanceFromAndUnwrap(string , string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object , class Evidence )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance int get_Id()" />
      <Method Sig="instance bool IsDefaultAppDomain()" />
    </Type>
    <Type Name="CrossAppDomainDelegate">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke()" />
      <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="AppDomainManager">
      <Method Sig="instance void .ctor()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class AppDomain CreateDomain(string , class Evidence , class AppDomainSetup )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlAppDomain" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void InitializeNewDomain(class AppDomainSetup )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance struct AppDomainManagerInitializationOptions get_InitializationFlags()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance void set_InitializationFlags(struct AppDomainManagerInitializationOptions )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class ApplicationActivator get_ApplicationActivator()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class HostSecurityManager get_HostSecurityManager()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class HostExecutionContextManager get_HostExecutionContextManager()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance class Assembly get_EntryAssembly()">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="AppDomainSetup">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(class ActivationContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void .ctor(class ActivationArguments )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_ApplicationBase()" />
      <Method Sig="instance void set_ApplicationBase(string )" />
      <Method Sig="instance string get_ConfigurationFile()" />
      <Method Sig="instance void set_ConfigurationFile(string )" />
      <Method Sig="instance [] byte GetConfigurationBytes()" />
      <Method Sig="instance void SetConfigurationBytes([] byte )" />
      <Method Sig="instance string get_DynamicBase()" />
      <Method Sig="instance void set_DynamicBase(string )" />
      <Method Sig="instance bool get_DisallowPublisherPolicy()" />
      <Method Sig="instance void set_DisallowPublisherPolicy(bool )" />
      <Method Sig="instance bool get_DisallowBindingRedirects()" />
      <Method Sig="instance void set_DisallowBindingRedirects(bool )" />
      <Method Sig="instance bool get_DisallowCodeDownload()" />
      <Method Sig="instance void set_DisallowCodeDownload(bool )" />
      <Method Sig="instance bool get_DisallowApplicationBaseProbing()" />
      <Method Sig="instance void set_DisallowApplicationBaseProbing(bool )" />
      <Method Sig="instance string get_ApplicationName()" />
      <Method Sig="instance void set_ApplicationName(string )" />
      <Method Sig="instance class AppDomainInitializer get_AppDomainInitializer()" />
      <Method Sig="instance void set_AppDomainInitializer(class AppDomainInitializer )" />
      <Method Sig="instance [] string get_AppDomainInitializerArguments()" />
      <Method Sig="instance void set_AppDomainInitializerArguments([] string )" />
      <Method Sig="instance class ActivationArguments get_ActivationArguments()" />
      <Method Sig="instance void set_ActivationArguments(class ActivationArguments )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ApplicationTrust get_ApplicationTrust()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void set_ApplicationTrust(class ApplicationTrust )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_PrivateBinPath()" />
      <Method Sig="instance void set_PrivateBinPath(string )" />
      <Method Sig="instance string get_PrivateBinPathProbe()" />
      <Method Sig="instance void set_PrivateBinPathProbe(string )" />
      <Method Sig="instance string get_ShadowCopyDirectories()" />
      <Method Sig="instance void set_ShadowCopyDirectories(string )" />
      <Method Sig="instance string get_ShadowCopyFiles()" />
      <Method Sig="instance void set_ShadowCopyFiles(string )" />
      <Method Sig="instance string get_CachePath()" />
      <Method Sig="instance void set_CachePath(string )" />
      <Method Sig="instance string get_LicenseFile()" />
      <Method Sig="instance void set_LicenseFile(string )" />
      <Method Sig="instance struct LoaderOptimization get_LoaderOptimization()" />
      <Method Sig="instance void set_LoaderOptimization(struct LoaderOptimization )" />
    </Type>
    <Type Name="Attribute">
      <Method Sig="[] class Attribute GetCustomAttributes(class MemberInfo , class Type )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class MemberInfo , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class MemberInfo )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class MemberInfo , bool )" />
      <Method Sig="bool IsDefined(class MemberInfo , class Type )" />
      <Method Sig="bool IsDefined(class MemberInfo , class Type , bool )" />
      <Method Sig="class Attribute GetCustomAttribute(class MemberInfo , class Type )" />
      <Method Sig="class Attribute GetCustomAttribute(class MemberInfo , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class ParameterInfo )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class ParameterInfo , class Type )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class ParameterInfo , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class ParameterInfo , bool )" />
      <Method Sig="bool IsDefined(class ParameterInfo , class Type )" />
      <Method Sig="bool IsDefined(class ParameterInfo , class Type , bool )" />
      <Method Sig="class Attribute GetCustomAttribute(class ParameterInfo , class Type )" />
      <Method Sig="class Attribute GetCustomAttribute(class ParameterInfo , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Module , class Type )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Module )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Module , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Module , class Type , bool )" />
      <Method Sig="bool IsDefined(class Module , class Type )" />
      <Method Sig="bool IsDefined(class Module , class Type , bool )" />
      <Method Sig="class Attribute GetCustomAttribute(class Module , class Type )" />
      <Method Sig="class Attribute GetCustomAttribute(class Module , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Assembly , class Type )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Assembly , class Type , bool )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Assembly )" />
      <Method Sig="[] class Attribute GetCustomAttributes(class Assembly , bool )" />
      <Method Sig="bool IsDefined(class Assembly , class Type )" />
      <Method Sig="bool IsDefined(class Assembly , class Type , bool )" />
      <Method Sig="class Attribute GetCustomAttribute(class Assembly , class Type )" />
      <Method Sig="class Attribute GetCustomAttribute(class Assembly , class Type , bool )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance object get_TypeId()" />
      <Method Sig="instance bool Match(object )" />
      <Method Sig="instance bool IsDefaultAttribute()" />
    </Type>
    <Type Name="LoaderOptimizationAttribute">
      <Method Sig="instance void .ctor(byte )" />
      <Method Sig="instance void .ctor(struct LoaderOptimization )" />
      <Method Sig="instance struct LoaderOptimization get_Value()" />
    </Type>
    <Type Name="AppDomainUnloadedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="ActivationContext">
      <Method Sig="class ActivationContext CreatePartialActivationContext(class ApplicationIdentity )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class ActivationContext CreatePartialActivationContext(class ApplicationIdentity , [] string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance class ApplicationIdentity get_Identity()" />
      <Method Sig="instance struct ContextForm get_Form()" />
      <Method Sig="instance void Dispose()" />
    </Type>
    <Type Name="ApplicationIdentity">
      <Method Sig="instance void .ctor(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_FullName()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_CodeBase()" />
      <Method Sig="instance string ToString()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
    </Type>
    <Namespace Name="Deployment">
      <Namespace Name="Internal">
        <Type Name="InternalApplicationIdentityHelper">
          <Method Sig="object GetInternalAppId(class ApplicationIdentity )" />
        </Type>
        <Type Name="InternalActivationContextHelper">
          <Method Sig="object GetActivationContextData(class ActivationContext )" />
          <Method Sig="object GetApplicationComponentManifest(class ActivationContext )" />
          <Method Sig="object GetDeploymentComponentManifest(class ActivationContext )" />
          <Method Sig="void PrepareForExecution(class ActivationContext )" />
          <Method Sig="bool IsFirstRun(class ActivationContext )" />
        </Type>
      </Namespace>
    </Namespace>
    <Type Name="ApplicationId">
      <Method Sig="instance void .ctor([] byte , string , class Version , string , string )" />
      <Method Sig="instance [] byte get_PublicKeyToken()" />
      <Method Sig="instance string get_Name()" />
      <Method Sig="instance class Version get_Version()" />
      <Method Sig="instance string get_ProcessorArchitecture()" />
      <Method Sig="instance string get_Culture()" />
      <Method Sig="instance class ApplicationId Copy()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
    </Type>
    <Type Name="ArgumentException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , string , class Exception )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance string get_ParamName()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="ArgumentNullException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , string )" />
    </Type>
    <Type Name="ArgumentOutOfRangeException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , object , string )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance object get_ActualValue()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="ArgIterator">
      <Method Sig="instance void .ctor(struct RuntimeArgumentHandle )" />
      <Method Sig="instance void .ctor(struct RuntimeArgumentHandle , * void )" />
      <Method Sig="instance typedbyref GetNextArg()" />
      <Method Sig="instance typedbyref GetNextArg(struct RuntimeTypeHandle )" />
      <Method Sig="instance void End()" />
      <Method Sig="instance int GetRemainingCount()" />
      <Method Sig="instance struct RuntimeTypeHandle GetNextArgType()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
    </Type>
    <Type Name="ArithmeticException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="ArrayTypeMismatchException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="AsyncCallback">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(class IAsyncResult )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(class IAsyncResult , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="AttributeUsageAttribute">
      <Method Sig="instance void .ctor(struct AttributeTargets )" />
      <Method Sig="instance struct AttributeTargets get_ValidOn()" />
      <Method Sig="instance bool get_AllowMultiple()" />
      <Method Sig="instance void set_AllowMultiple(bool )" />
      <Method Sig="instance bool get_Inherited()" />
      <Method Sig="instance void set_Inherited(bool )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="BadImageFormatException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void .ctor(string , string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance string get_FileName()" />
      <Method Sig="instance string ToString()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance string get_FusionLog()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="BitConverter">
      <Method Sig="[] byte GetBytes(bool )" />
      <Method Sig="[] byte GetBytes(char )" />
      <Method Sig="[] byte GetBytes(short )" />
      <Method Sig="[] byte GetBytes(int )" />
      <Method Sig="[] byte GetBytes(in64 )" />
      <Method Sig="[] byte GetBytes(ushort )" />
      <Method Sig="[] byte GetBytes(uint )" />
      <Method Sig="[] byte GetBytes(uint64 )" />
      <Method Sig="[] byte GetBytes(float )" />
      <Method Sig="[] byte GetBytes(double )" />
      <Method Sig="char ToChar([] byte , int )" />
      <Method Sig="short ToInt16([] byte , int )" />
      <Method Sig="int ToInt32([] byte , int )" />
      <Method Sig="in64 ToInt64([] byte , int )" />
      <Method Sig="ushort ToUInt16([] byte , int )" />
      <Method Sig="uint ToUInt32([] byte , int )" />
      <Method Sig="uint64 ToUInt64([] byte , int )" />
      <Method Sig="float ToSingle([] byte , int )" />
      <Method Sig="double ToDouble([] byte , int )" />
      <Method Sig="string ToString([] byte , int , int )" />
      <Method Sig="string ToString([] byte )" />
      <Method Sig="string ToString([] byte , int )" />
      <Method Sig="bool ToBoolean([] byte , int )" />
      <Method Sig="in64 DoubleToInt64Bits(double )" />
      <Method Sig="double Int64BitsToDouble(in64 )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Boolean">
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(bool )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(bool )" />
      <Method Sig="bool Parse(string )" />
      <Method Sig="bool TryParse(string , &amp; bool )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Buffer">
      <Method Sig="void BlockCopy(class Array , int , class Array , int , int )" />
      <Method Sig="byte GetByte(class Array , int )" />
      <Method Sig="void SetByte(class Array , int , byte )" />
      <Method Sig="int ByteLength(class Array )" />
    </Type>
    <Type Name="Byte">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(byte )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(byte )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="byte Parse(string )" />
      <Method Sig="byte Parse(string , struct NumberStyles )" />
      <Method Sig="byte Parse(string , class IFormatProvider )" />
      <Method Sig="byte Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; byte )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; byte )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="CannotUnloadAppDomainException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Char">
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(char )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(char )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="string ToString(char )" />
      <Method Sig="char Parse(string )" />
      <Method Sig="bool TryParse(string , &amp; char )" />
      <Method Sig="bool IsDigit(char )" />
      <Method Sig="bool IsLetter(char )" />
      <Method Sig="bool IsWhiteSpace(char )" />
      <Method Sig="bool IsUpper(char )" />
      <Method Sig="bool IsLower(char )" />
      <Method Sig="bool IsPunctuation(char )" />
      <Method Sig="bool IsLetterOrDigit(char )" />
      <Method Sig="char ToUpper(char , class CultureInfo )" />
      <Method Sig="char ToUpper(char )" />
      <Method Sig="char ToUpperInvariant(char )" />
      <Method Sig="char ToLower(char , class CultureInfo )" />
      <Method Sig="char ToLower(char )" />
      <Method Sig="char ToLowerInvariant(char )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="bool IsControl(char )" />
      <Method Sig="bool IsControl(string , int )" />
      <Method Sig="bool IsDigit(string , int )" />
      <Method Sig="bool IsLetter(string , int )" />
      <Method Sig="bool IsLetterOrDigit(string , int )" />
      <Method Sig="bool IsLower(string , int )" />
      <Method Sig="bool IsNumber(char )" />
      <Method Sig="bool IsNumber(string , int )" />
      <Method Sig="bool IsPunctuation(string , int )" />
      <Method Sig="bool IsSeparator(char )" />
      <Method Sig="bool IsSeparator(string , int )" />
      <Method Sig="bool IsSurrogate(char )" />
      <Method Sig="bool IsSurrogate(string , int )" />
      <Method Sig="bool IsSymbol(char )" />
      <Method Sig="bool IsSymbol(string , int )" />
      <Method Sig="bool IsUpper(string , int )" />
      <Method Sig="bool IsWhiteSpace(string , int )" />
      <Method Sig="struct UnicodeCategory GetUnicodeCategory(char )" />
      <Method Sig="struct UnicodeCategory GetUnicodeCategory(string , int )" />
      <Method Sig="double GetNumericValue(char )" />
      <Method Sig="double GetNumericValue(string , int )" />
      <Method Sig="bool IsHighSurrogate(char )" />
      <Method Sig="bool IsHighSurrogate(string , int )" />
      <Method Sig="bool IsLowSurrogate(char )" />
      <Method Sig="bool IsLowSurrogate(string , int )" />
      <Method Sig="bool IsSurrogatePair(string , int )" />
      <Method Sig="bool IsSurrogatePair(char , char )" />
      <Method Sig="string ConvertFromUtf32(int )" />
      <Method Sig="int ConvertToUtf32(char , char )" />
      <Method Sig="int ConvertToUtf32(string , int )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="CharEnumerator">
      <Method Sig="instance object Clone()" />
      <Method Sig="instance bool MoveNext()" />
      <Method Sig="instance char get_Current()" />
      <Method Sig="instance void Reset()" />
    </Type>
    <Type Name="CLSCompliantAttribute">
      <Method Sig="instance void .ctor(bool )" />
      <Method Sig="instance bool get_IsCompliant()" />
    </Type>
    <Type Name="TypeUnloadedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Console">
      <Method Sig="class TextWriter get_Error()" />
      <Method Sig="class TextReader get_In()" />
      <Method Sig="class TextWriter get_Out()" />
      <Method Sig="class Encoding get_InputEncoding()" />
      <Method Sig="void set_InputEncoding(class Encoding )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Encoding get_OutputEncoding()" />
      <Method Sig="void set_OutputEncoding(class Encoding )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void Beep()" />
      <Method Sig="void Beep(int , int )" />
      <Method Sig="void Clear()" />
      <Method Sig="struct ConsoleColor get_BackgroundColor()" />
      <Method Sig="void set_BackgroundColor(struct ConsoleColor )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="struct ConsoleColor get_ForegroundColor()" />
      <Method Sig="void set_ForegroundColor(struct ConsoleColor )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void ResetColor()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void MoveBufferArea(int , int , int , int , int , int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void MoveBufferArea(int , int , int , int , int , int , char , struct ConsoleColor , struct ConsoleColor )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_BufferHeight()" />
      <Method Sig="void set_BufferHeight(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_BufferWidth()" />
      <Method Sig="void set_BufferWidth(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetBufferSize(int , int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_WindowHeight()" />
      <Method Sig="void set_WindowHeight(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_WindowWidth()" />
      <Method Sig="void set_WindowWidth(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetWindowSize(int , int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_LargestWindowWidth()" />
      <Method Sig="int get_LargestWindowHeight()" />
      <Method Sig="int get_WindowLeft()" />
      <Method Sig="void set_WindowLeft(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_WindowTop()" />
      <Method Sig="void set_WindowTop(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetWindowPosition(int , int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_CursorLeft()" />
      <Method Sig="void set_CursorLeft(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_CursorTop()" />
      <Method Sig="void set_CursorTop(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetCursorPosition(int , int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_CursorSize()" />
      <Method Sig="void set_CursorSize(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="bool get_CursorVisible()" />
      <Method Sig="void set_CursorVisible(bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="string get_Title()" />
      <Method Sig="void set_Title(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="struct ConsoleKeyInfo ReadKey()" />
      <Method Sig="struct ConsoleKeyInfo ReadKey(bool )" />
      <Method Sig="bool get_KeyAvailable()" />
      <Method Sig="bool get_NumberLock()" />
      <Method Sig="bool get_CapsLock()" />
      <Method Sig="bool get_TreatControlCAsInput()" />
      <Method Sig="void set_TreatControlCAsInput(bool )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void add_CancelKeyPress(class ConsoleCancelEventHandler )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void remove_CancelKeyPress(class ConsoleCancelEventHandler )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class Stream OpenStandardError()" />
      <Method Sig="class Stream OpenStandardError(int )" />
      <Method Sig="class Stream OpenStandardInput()" />
      <Method Sig="class Stream OpenStandardInput(int )" />
      <Method Sig="class Stream OpenStandardOutput()" />
      <Method Sig="class Stream OpenStandardOutput(int )" />
      <Method Sig="void SetIn(class TextReader )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetOut(class TextWriter )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetError(class TextWriter )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int Read()" />
      <Method Sig="string ReadLine()" />
      <Method Sig="void WriteLine()" />
      <Method Sig="void WriteLine(bool )" />
      <Method Sig="void WriteLine(char )" />
      <Method Sig="void WriteLine([] char )" />
      <Method Sig="void WriteLine([] char , int , int )" />
      <Method Sig="void WriteLine(struct Decimal )" />
      <Method Sig="void WriteLine(double )" />
      <Method Sig="void WriteLine(float )" />
      <Method Sig="void WriteLine(int )" />
      <Method Sig="void WriteLine(uint )" />
      <Method Sig="void WriteLine(in64 )" />
      <Method Sig="void WriteLine(uint64 )" />
      <Method Sig="void WriteLine(object )" />
      <Method Sig="void WriteLine(string )" />
      <Method Sig="void WriteLine(string , object )" />
      <Method Sig="void WriteLine(string , object , object )" />
      <Method Sig="void WriteLine(string , object , object , object )" />
      <Method Sig="vararg void WriteLine(string , object , object , object , object )" />
      <Method Sig="void WriteLine(string , [] object )" />
      <Method Sig="void Write(string , object )" />
      <Method Sig="void Write(string , object , object )" />
      <Method Sig="void Write(string , object , object , object )" />
      <Method Sig="vararg void Write(string , object , object , object , object )" />
      <Method Sig="void Write(string , [] object )" />
      <Method Sig="void Write(bool )" />
      <Method Sig="void Write(char )" />
      <Method Sig="void Write([] char )" />
      <Method Sig="void Write([] char , int , int )" />
      <Method Sig="void Write(double )" />
      <Method Sig="void Write(struct Decimal )" />
      <Method Sig="void Write(float )" />
      <Method Sig="void Write(int )" />
      <Method Sig="void Write(uint )" />
      <Method Sig="void Write(in64 )" />
      <Method Sig="void Write(uint64 )" />
      <Method Sig="void Write(object )" />
      <Method Sig="void Write(string )" />
    </Type>
    <Type Name="ConsoleCancelEventHandler">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(object , class ConsoleCancelEventArgs )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , class ConsoleCancelEventArgs , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="ConsoleCancelEventArgs">
      <Method Sig="instance bool get_Cancel()" />
      <Method Sig="instance void set_Cancel(bool )" />
      <Method Sig="instance struct ConsoleSpecialKey get_SpecialKey()" />
    </Type>
    <Type Name="ConsoleKeyInfo">
      <Method Sig="instance void .ctor(char , struct ConsoleKey , bool , bool , bool )" />
      <Method Sig="instance char get_KeyChar()" />
      <Method Sig="instance struct ConsoleKey get_Key()" />
      <Method Sig="instance struct ConsoleModifiers get_Modifiers()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct ConsoleKeyInfo )" />
      <Method Sig="bool op_Equality(struct ConsoleKeyInfo , struct ConsoleKeyInfo )" />
      <Method Sig="bool op_Inequality(struct ConsoleKeyInfo , struct ConsoleKeyInfo )" />
      <Method Sig="instance int GetHashCode()" />
    </Type>
    <Type Name="ContextMarshalException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Convert">
      <Method Sig="struct TypeCode GetTypeCode(object )" />
      <Method Sig="bool IsDBNull(object )" />
      <Method Sig="object ChangeType(object , struct TypeCode )" />
      <Method Sig="object ChangeType(object , struct TypeCode , class IFormatProvider )" />
      <Method Sig="object ChangeType(object , class Type )" />
      <Method Sig="object ChangeType(object , class Type , class IFormatProvider )" />
      <Method Sig="bool ToBoolean(object )" />
      <Method Sig="bool ToBoolean(object , class IFormatProvider )" />
      <Method Sig="bool ToBoolean(bool )" />
      <Method Sig="bool ToBoolean(sbyte )" />
      <Method Sig="bool ToBoolean(char )" />
      <Method Sig="bool ToBoolean(byte )" />
      <Method Sig="bool ToBoolean(short )" />
      <Method Sig="bool ToBoolean(ushort )" />
      <Method Sig="bool ToBoolean(int )" />
      <Method Sig="bool ToBoolean(uint )" />
      <Method Sig="bool ToBoolean(in64 )" />
      <Method Sig="bool ToBoolean(uint64 )" />
      <Method Sig="bool ToBoolean(string )" />
      <Method Sig="bool ToBoolean(string , class IFormatProvider )" />
      <Method Sig="bool ToBoolean(float )" />
      <Method Sig="bool ToBoolean(double )" />
      <Method Sig="bool ToBoolean(struct Decimal )" />
      <Method Sig="bool ToBoolean(struct DateTime )" />
      <Method Sig="char ToChar(object )" />
      <Method Sig="char ToChar(object , class IFormatProvider )" />
      <Method Sig="char ToChar(bool )" />
      <Method Sig="char ToChar(char )" />
      <Method Sig="char ToChar(sbyte )" />
      <Method Sig="char ToChar(byte )" />
      <Method Sig="char ToChar(short )" />
      <Method Sig="char ToChar(ushort )" />
      <Method Sig="char ToChar(int )" />
      <Method Sig="char ToChar(uint )" />
      <Method Sig="char ToChar(in64 )" />
      <Method Sig="char ToChar(uint64 )" />
      <Method Sig="char ToChar(string )" />
      <Method Sig="char ToChar(string , class IFormatProvider )" />
      <Method Sig="char ToChar(float )" />
      <Method Sig="char ToChar(double )" />
      <Method Sig="char ToChar(struct Decimal )" />
      <Method Sig="char ToChar(struct DateTime )" />
      <Method Sig="sbyte ToSByte(object )" />
      <Method Sig="sbyte ToSByte(object , class IFormatProvider )" />
      <Method Sig="sbyte ToSByte(bool )" />
      <Method Sig="sbyte ToSByte(sbyte )" />
      <Method Sig="sbyte ToSByte(char )" />
      <Method Sig="sbyte ToSByte(byte )" />
      <Method Sig="sbyte ToSByte(short )" />
      <Method Sig="sbyte ToSByte(ushort )" />
      <Method Sig="sbyte ToSByte(int )" />
      <Method Sig="sbyte ToSByte(uint )" />
      <Method Sig="sbyte ToSByte(in64 )" />
      <Method Sig="sbyte ToSByte(uint64 )" />
      <Method Sig="sbyte ToSByte(float )" />
      <Method Sig="sbyte ToSByte(double )" />
      <Method Sig="sbyte ToSByte(struct Decimal )" />
      <Method Sig="sbyte ToSByte(string )" />
      <Method Sig="sbyte ToSByte(string , class IFormatProvider )" />
      <Method Sig="sbyte ToSByte(struct DateTime )" />
      <Method Sig="byte ToByte(object )" />
      <Method Sig="byte ToByte(object , class IFormatProvider )" />
      <Method Sig="byte ToByte(bool )" />
      <Method Sig="byte ToByte(byte )" />
      <Method Sig="byte ToByte(char )" />
      <Method Sig="byte ToByte(sbyte )" />
      <Method Sig="byte ToByte(short )" />
      <Method Sig="byte ToByte(ushort )" />
      <Method Sig="byte ToByte(int )" />
      <Method Sig="byte ToByte(uint )" />
      <Method Sig="byte ToByte(in64 )" />
      <Method Sig="byte ToByte(uint64 )" />
      <Method Sig="byte ToByte(float )" />
      <Method Sig="byte ToByte(double )" />
      <Method Sig="byte ToByte(struct Decimal )" />
      <Method Sig="byte ToByte(string )" />
      <Method Sig="byte ToByte(string , class IFormatProvider )" />
      <Method Sig="byte ToByte(struct DateTime )" />
      <Method Sig="short ToInt16(object )" />
      <Method Sig="short ToInt16(object , class IFormatProvider )" />
      <Method Sig="short ToInt16(bool )" />
      <Method Sig="short ToInt16(char )" />
      <Method Sig="short ToInt16(sbyte )" />
      <Method Sig="short ToInt16(byte )" />
      <Method Sig="short ToInt16(ushort )" />
      <Method Sig="short ToInt16(int )" />
      <Method Sig="short ToInt16(uint )" />
      <Method Sig="short ToInt16(short )" />
      <Method Sig="short ToInt16(in64 )" />
      <Method Sig="short ToInt16(uint64 )" />
      <Method Sig="short ToInt16(float )" />
      <Method Sig="short ToInt16(double )" />
      <Method Sig="short ToInt16(struct Decimal )" />
      <Method Sig="short ToInt16(string )" />
      <Method Sig="short ToInt16(string , class IFormatProvider )" />
      <Method Sig="short ToInt16(struct DateTime )" />
      <Method Sig="ushort ToUInt16(object )" />
      <Method Sig="ushort ToUInt16(object , class IFormatProvider )" />
      <Method Sig="ushort ToUInt16(bool )" />
      <Method Sig="ushort ToUInt16(char )" />
      <Method Sig="ushort ToUInt16(sbyte )" />
      <Method Sig="ushort ToUInt16(byte )" />
      <Method Sig="ushort ToUInt16(short )" />
      <Method Sig="ushort ToUInt16(int )" />
      <Method Sig="ushort ToUInt16(ushort )" />
      <Method Sig="ushort ToUInt16(uint )" />
      <Method Sig="ushort ToUInt16(in64 )" />
      <Method Sig="ushort ToUInt16(uint64 )" />
      <Method Sig="ushort ToUInt16(float )" />
      <Method Sig="ushort ToUInt16(double )" />
      <Method Sig="ushort ToUInt16(struct Decimal )" />
      <Method Sig="ushort ToUInt16(string )" />
      <Method Sig="ushort ToUInt16(string , class IFormatProvider )" />
      <Method Sig="ushort ToUInt16(struct DateTime )" />
      <Method Sig="int ToInt32(object )" />
      <Method Sig="int ToInt32(object , class IFormatProvider )" />
      <Method Sig="int ToInt32(bool )" />
      <Method Sig="int ToInt32(char )" />
      <Method Sig="int ToInt32(sbyte )" />
      <Method Sig="int ToInt32(byte )" />
      <Method Sig="int ToInt32(short )" />
      <Method Sig="int ToInt32(ushort )" />
      <Method Sig="int ToInt32(uint )" />
      <Method Sig="int ToInt32(int )" />
      <Method Sig="int ToInt32(in64 )" />
      <Method Sig="int ToInt32(uint64 )" />
      <Method Sig="int ToInt32(float )" />
      <Method Sig="int ToInt32(double )" />
      <Method Sig="int ToInt32(struct Decimal )" />
      <Method Sig="int ToInt32(string )" />
      <Method Sig="int ToInt32(string , class IFormatProvider )" />
      <Method Sig="int ToInt32(struct DateTime )" />
      <Method Sig="uint ToUInt32(object )" />
      <Method Sig="uint ToUInt32(object , class IFormatProvider )" />
      <Method Sig="uint ToUInt32(bool )" />
      <Method Sig="uint ToUInt32(char )" />
      <Method Sig="uint ToUInt32(sbyte )" />
      <Method Sig="uint ToUInt32(byte )" />
      <Method Sig="uint ToUInt32(short )" />
      <Method Sig="uint ToUInt32(ushort )" />
      <Method Sig="uint ToUInt32(int )" />
      <Method Sig="uint ToUInt32(uint )" />
      <Method Sig="uint ToUInt32(in64 )" />
      <Method Sig="uint ToUInt32(uint64 )" />
      <Method Sig="uint ToUInt32(float )" />
      <Method Sig="uint ToUInt32(double )" />
      <Method Sig="uint ToUInt32(struct Decimal )" />
      <Method Sig="uint ToUInt32(string )" />
      <Method Sig="uint ToUInt32(string , class IFormatProvider )" />
      <Method Sig="uint ToUInt32(struct DateTime )" />
      <Method Sig="in64 ToInt64(object )" />
      <Method Sig="in64 ToInt64(object , class IFormatProvider )" />
      <Method Sig="in64 ToInt64(bool )" />
      <Method Sig="in64 ToInt64(char )" />
      <Method Sig="in64 ToInt64(sbyte )" />
      <Method Sig="in64 ToInt64(byte )" />
      <Method Sig="in64 ToInt64(short )" />
      <Method Sig="in64 ToInt64(ushort )" />
      <Method Sig="in64 ToInt64(int )" />
      <Method Sig="in64 ToInt64(uint )" />
      <Method Sig="in64 ToInt64(uint64 )" />
      <Method Sig="in64 ToInt64(in64 )" />
      <Method Sig="in64 ToInt64(float )" />
      <Method Sig="in64 ToInt64(double )" />
      <Method Sig="in64 ToInt64(struct Decimal )" />
      <Method Sig="in64 ToInt64(string )" />
      <Method Sig="in64 ToInt64(string , class IFormatProvider )" />
      <Method Sig="in64 ToInt64(struct DateTime )" />
      <Method Sig="uint64 ToUInt64(object )" />
      <Method Sig="uint64 ToUInt64(object , class IFormatProvider )" />
      <Method Sig="uint64 ToUInt64(bool )" />
      <Method Sig="uint64 ToUInt64(char )" />
      <Method Sig="uint64 ToUInt64(sbyte )" />
      <Method Sig="uint64 ToUInt64(byte )" />
      <Method Sig="uint64 ToUInt64(short )" />
      <Method Sig="uint64 ToUInt64(ushort )" />
      <Method Sig="uint64 ToUInt64(int )" />
      <Method Sig="uint64 ToUInt64(uint )" />
      <Method Sig="uint64 ToUInt64(in64 )" />
      <Method Sig="uint64 ToUInt64(uint64 )" />
      <Method Sig="uint64 ToUInt64(float )" />
      <Method Sig="uint64 ToUInt64(double )" />
      <Method Sig="uint64 ToUInt64(struct Decimal )" />
      <Method Sig="uint64 ToUInt64(string )" />
      <Method Sig="uint64 ToUInt64(string , class IFormatProvider )" />
      <Method Sig="uint64 ToUInt64(struct DateTime )" />
      <Method Sig="float ToSingle(object )" />
      <Method Sig="float ToSingle(object , class IFormatProvider )" />
      <Method Sig="float ToSingle(sbyte )" />
      <Method Sig="float ToSingle(byte )" />
      <Method Sig="float ToSingle(char )" />
      <Method Sig="float ToSingle(short )" />
      <Method Sig="float ToSingle(ushort )" />
      <Method Sig="float ToSingle(int )" />
      <Method Sig="float ToSingle(uint )" />
      <Method Sig="float ToSingle(in64 )" />
      <Method Sig="float ToSingle(uint64 )" />
      <Method Sig="float ToSingle(float )" />
      <Method Sig="float ToSingle(double )" />
      <Method Sig="float ToSingle(struct Decimal )" />
      <Method Sig="float ToSingle(string )" />
      <Method Sig="float ToSingle(string , class IFormatProvider )" />
      <Method Sig="float ToSingle(bool )" />
      <Method Sig="float ToSingle(struct DateTime )" />
      <Method Sig="double ToDouble(object )" />
      <Method Sig="double ToDouble(object , class IFormatProvider )" />
      <Method Sig="double ToDouble(sbyte )" />
      <Method Sig="double ToDouble(byte )" />
      <Method Sig="double ToDouble(short )" />
      <Method Sig="double ToDouble(char )" />
      <Method Sig="double ToDouble(ushort )" />
      <Method Sig="double ToDouble(int )" />
      <Method Sig="double ToDouble(uint )" />
      <Method Sig="double ToDouble(in64 )" />
      <Method Sig="double ToDouble(uint64 )" />
      <Method Sig="double ToDouble(float )" />
      <Method Sig="double ToDouble(double )" />
      <Method Sig="double ToDouble(struct Decimal )" />
      <Method Sig="double ToDouble(string )" />
      <Method Sig="double ToDouble(string , class IFormatProvider )" />
      <Method Sig="double ToDouble(bool )" />
      <Method Sig="double ToDouble(struct DateTime )" />
      <Method Sig="struct Decimal ToDecimal(object )" />
      <Method Sig="struct Decimal ToDecimal(object , class IFormatProvider )" />
      <Method Sig="struct Decimal ToDecimal(sbyte )" />
      <Method Sig="struct Decimal ToDecimal(byte )" />
      <Method Sig="struct Decimal ToDecimal(char )" />
      <Method Sig="struct Decimal ToDecimal(short )" />
      <Method Sig="struct Decimal ToDecimal(ushort )" />
      <Method Sig="struct Decimal ToDecimal(int )" />
      <Method Sig="struct Decimal ToDecimal(uint )" />
      <Method Sig="struct Decimal ToDecimal(in64 )" />
      <Method Sig="struct Decimal ToDecimal(uint64 )" />
      <Method Sig="struct Decimal ToDecimal(float )" />
      <Method Sig="struct Decimal ToDecimal(double )" />
      <Method Sig="struct Decimal ToDecimal(string )" />
      <Method Sig="struct Decimal ToDecimal(string , class IFormatProvider )" />
      <Method Sig="struct Decimal ToDecimal(struct Decimal )" />
      <Method Sig="struct Decimal ToDecimal(bool )" />
      <Method Sig="struct Decimal ToDecimal(struct DateTime )" />
      <Method Sig="struct DateTime ToDateTime(struct DateTime )" />
      <Method Sig="struct DateTime ToDateTime(object )" />
      <Method Sig="struct DateTime ToDateTime(object , class IFormatProvider )" />
      <Method Sig="struct DateTime ToDateTime(string )" />
      <Method Sig="struct DateTime ToDateTime(string , class IFormatProvider )" />
      <Method Sig="struct DateTime ToDateTime(sbyte )" />
      <Method Sig="struct DateTime ToDateTime(byte )" />
      <Method Sig="struct DateTime ToDateTime(short )" />
      <Method Sig="struct DateTime ToDateTime(ushort )" />
      <Method Sig="struct DateTime ToDateTime(int )" />
      <Method Sig="struct DateTime ToDateTime(uint )" />
      <Method Sig="struct DateTime ToDateTime(in64 )" />
      <Method Sig="struct DateTime ToDateTime(uint64 )" />
      <Method Sig="struct DateTime ToDateTime(bool )" />
      <Method Sig="struct DateTime ToDateTime(char )" />
      <Method Sig="struct DateTime ToDateTime(float )" />
      <Method Sig="struct DateTime ToDateTime(double )" />
      <Method Sig="struct DateTime ToDateTime(struct Decimal )" />
      <Method Sig="string ToString(object )" />
      <Method Sig="string ToString(object , class IFormatProvider )" />
      <Method Sig="string ToString(bool )" />
      <Method Sig="string ToString(bool , class IFormatProvider )" />
      <Method Sig="string ToString(char )" />
      <Method Sig="string ToString(char , class IFormatProvider )" />
      <Method Sig="string ToString(sbyte )" />
      <Method Sig="string ToString(sbyte , class IFormatProvider )" />
      <Method Sig="string ToString(byte )" />
      <Method Sig="string ToString(byte , class IFormatProvider )" />
      <Method Sig="string ToString(short )" />
      <Method Sig="string ToString(short , class IFormatProvider )" />
      <Method Sig="string ToString(ushort )" />
      <Method Sig="string ToString(ushort , class IFormatProvider )" />
      <Method Sig="string ToString(int )" />
      <Method Sig="string ToString(int , class IFormatProvider )" />
      <Method Sig="string ToString(uint )" />
      <Method Sig="string ToString(uint , class IFormatProvider )" />
      <Method Sig="string ToString(in64 )" />
      <Method Sig="string ToString(in64 , class IFormatProvider )" />
      <Method Sig="string ToString(uint64 )" />
      <Method Sig="string ToString(uint64 , class IFormatProvider )" />
      <Method Sig="string ToString(float )" />
      <Method Sig="string ToString(float , class IFormatProvider )" />
      <Method Sig="string ToString(double )" />
      <Method Sig="string ToString(double , class IFormatProvider )" />
      <Method Sig="string ToString(struct Decimal )" />
      <Method Sig="string ToString(struct Decimal , class IFormatProvider )" />
      <Method Sig="string ToString(struct DateTime )" />
      <Method Sig="string ToString(struct DateTime , class IFormatProvider )" />
      <Method Sig="string ToString(string )" />
      <Method Sig="string ToString(string , class IFormatProvider )" />
      <Method Sig="byte ToByte(string , int )" />
      <Method Sig="sbyte ToSByte(string , int )" />
      <Method Sig="short ToInt16(string , int )" />
      <Method Sig="ushort ToUInt16(string , int )" />
      <Method Sig="int ToInt32(string , int )" />
      <Method Sig="uint ToUInt32(string , int )" />
      <Method Sig="in64 ToInt64(string , int )" />
      <Method Sig="uint64 ToUInt64(string , int )" />
      <Method Sig="string ToString(byte , int )" />
      <Method Sig="string ToString(short , int )" />
      <Method Sig="string ToString(int , int )" />
      <Method Sig="string ToString(in64 , int )" />
      <Method Sig="string ToBase64String([] byte )" />
      <Method Sig="string ToBase64String([] byte , struct Base64FormattingOptions )" />
      <Method Sig="string ToBase64String([] byte , int , int )" />
      <Method Sig="string ToBase64String([] byte , int , int , struct Base64FormattingOptions )" />
      <Method Sig="int ToBase64CharArray([] byte , int , int , [] char , int )" />
      <Method Sig="int ToBase64CharArray([] byte , int , int , [] char , int , struct Base64FormattingOptions )" />
      <Method Sig="[] byte FromBase64String(string )" />
      <Method Sig="[] byte FromBase64CharArray([] char , int , int )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="ContextStaticAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="TimeZone">
      <Method Sig="class TimeZone get_CurrentTimeZone()" />
      <Method Sig="instance string get_StandardName()" />
      <Method Sig="instance string get_DaylightName()" />
      <Method Sig="instance struct TimeSpan GetUtcOffset(struct DateTime )" />
      <Method Sig="instance struct DateTime ToUniversalTime(struct DateTime )" />
      <Method Sig="instance struct DateTime ToLocalTime(struct DateTime )" />
      <Method Sig="instance class DaylightTime GetDaylightChanges(int )" />
      <Method Sig="instance bool IsDaylightSavingTime(struct DateTime )" />
      <Method Sig="bool IsDaylightSavingTime(struct DateTime , class DaylightTime )" />
    </Type>
    <Type Name="DBNull">
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Decimal">
      <Method Sig="instance void .ctor(int )" />
      <Method Sig="instance void .ctor(uint )" />
      <Method Sig="instance void .ctor(in64 )" />
      <Method Sig="instance void .ctor(uint64 )" />
      <Method Sig="instance void .ctor(float )" />
      <Method Sig="instance void .ctor(double )" />
      <Method Sig="in64 ToOACurrency(struct Decimal )" />
      <Method Sig="struct Decimal FromOACurrency(in64 )" />
      <Method Sig="instance void .ctor([] int )" />
      <Method Sig="instance void .ctor(int , int , int , bool , byte )" />
      <Method Sig="struct Decimal Add(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal Ceiling(struct Decimal )" />
      <Method Sig="int Compare(struct Decimal , struct Decimal )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(struct Decimal )" />
      <Method Sig="struct Decimal Divide(struct Decimal , struct Decimal )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct Decimal )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="bool Equals(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal Floor(struct Decimal )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="struct Decimal Parse(string )" />
      <Method Sig="struct Decimal Parse(string , struct NumberStyles )" />
      <Method Sig="struct Decimal Parse(string , class IFormatProvider )" />
      <Method Sig="struct Decimal Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; struct Decimal )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; struct Decimal )" />
      <Method Sig="[] int GetBits(struct Decimal )" />
      <Method Sig="struct Decimal Remainder(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal Multiply(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal Negate(struct Decimal )" />
      <Method Sig="struct Decimal Round(struct Decimal )" />
      <Method Sig="struct Decimal Round(struct Decimal , int )" />
      <Method Sig="struct Decimal Round(struct Decimal , struct MidpointRounding )" />
      <Method Sig="struct Decimal Round(struct Decimal , int , struct MidpointRounding )" />
      <Method Sig="struct Decimal Subtract(struct Decimal , struct Decimal )" />
      <Method Sig="byte ToByte(struct Decimal )" />
      <Method Sig="sbyte ToSByte(struct Decimal )" />
      <Method Sig="short ToInt16(struct Decimal )" />
      <Method Sig="double ToDouble(struct Decimal )" />
      <Method Sig="int ToInt32(struct Decimal )" />
      <Method Sig="in64 ToInt64(struct Decimal )" />
      <Method Sig="ushort ToUInt16(struct Decimal )" />
      <Method Sig="uint ToUInt32(struct Decimal )" />
      <Method Sig="uint64 ToUInt64(struct Decimal )" />
      <Method Sig="float ToSingle(struct Decimal )" />
      <Method Sig="struct Decimal Truncate(struct Decimal )" />
      <Method Sig="struct Decimal op_Implicit(byte )" />
      <Method Sig="struct Decimal op_Implicit(sbyte )" />
      <Method Sig="struct Decimal op_Implicit(short )" />
      <Method Sig="struct Decimal op_Implicit(ushort )" />
      <Method Sig="struct Decimal op_Implicit(char )" />
      <Method Sig="struct Decimal op_Implicit(int )" />
      <Method Sig="struct Decimal op_Implicit(uint )" />
      <Method Sig="struct Decimal op_Implicit(in64 )" />
      <Method Sig="struct Decimal op_Implicit(uint64 )" />
      <Method Sig="struct Decimal op_Explicit(float )" />
      <Method Sig="struct Decimal op_Explicit(double )" />
      <Method Sig="byte op_Explicit(struct Decimal )" />
      <Method Sig="sbyte op_Explicit(struct Decimal )" />
      <Method Sig="char op_Explicit(struct Decimal )" />
      <Method Sig="short op_Explicit(struct Decimal )" />
      <Method Sig="ushort op_Explicit(struct Decimal )" />
      <Method Sig="int op_Explicit(struct Decimal )" />
      <Method Sig="uint op_Explicit(struct Decimal )" />
      <Method Sig="in64 op_Explicit(struct Decimal )" />
      <Method Sig="uint64 op_Explicit(struct Decimal )" />
      <Method Sig="float op_Explicit(struct Decimal )" />
      <Method Sig="double op_Explicit(struct Decimal )" />
      <Method Sig="struct Decimal op_UnaryPlus(struct Decimal )" />
      <Method Sig="struct Decimal op_UnaryNegation(struct Decimal )" />
      <Method Sig="struct Decimal op_Increment(struct Decimal )" />
      <Method Sig="struct Decimal op_Decrement(struct Decimal )" />
      <Method Sig="struct Decimal op_Addition(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal op_Subtraction(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal op_Multiply(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal op_Division(struct Decimal , struct Decimal )" />
      <Method Sig="struct Decimal op_Modulus(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_Equality(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_Inequality(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_LessThan(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_LessThanOrEqual(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_GreaterThan(struct Decimal , struct Decimal )" />
      <Method Sig="bool op_GreaterThanOrEqual(struct Decimal , struct Decimal )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Namespace Name="Reflection">
      <Type Name="Binder">
        <Method Sig="instance class MethodBase BindToMethod(struct BindingFlags , [] class MethodBase , &amp; [] object , [] struct ParameterModifier , class CultureInfo , [] string , &amp; object )" />
        <Method Sig="instance class FieldInfo BindToField(struct BindingFlags , [] class FieldInfo , object , class CultureInfo )" />
        <Method Sig="instance class MethodBase SelectMethod(struct BindingFlags , [] class MethodBase , [] class Type , [] struct ParameterModifier )" />
        <Method Sig="instance class PropertyInfo SelectProperty(struct BindingFlags , [] class PropertyInfo , class Type , [] class Type , [] struct ParameterModifier )" />
        <Method Sig="instance object ChangeType(object , class Type , class CultureInfo )" />
        <Method Sig="instance void ReorderArgumentArray(&amp; [] object , object )" />
      </Type>
      <Type Name="MemberInfo">
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance class Type get_DeclaringType()" />
        <Method Sig="instance class Type get_ReflectedType()" />
        <Method Sig="instance [] object GetCustomAttributes(bool )" />
        <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
        <Method Sig="instance bool IsDefined(class Type , bool )" />
        <Method Sig="instance int get_MetadataToken()" />
        <Method Sig="instance class Module get_Module()" />
      </Type>
      <Type Name="AmbiguousMatchException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="ModuleResolveEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance class Module Invoke(object , class ResolveEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ResolveEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance class Module EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="Assembly">
        <Method Sig="instance void add_ModuleResolve(class ModuleResolveEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_ModuleResolve(class ModuleResolveEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlAppDomain" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_CodeBase()" />
        <Method Sig="instance string get_EscapedCodeBase()" />
        <Method Sig="instance class AssemblyName GetName()" />
        <Method Sig="instance class AssemblyName GetName(bool )" />
        <Method Sig="instance string get_FullName()" />
        <Method Sig="string CreateQualifiedName(string , string )" />
        <Method Sig="instance class MethodInfo get_EntryPoint()" />
        <Method Sig="class Assembly GetAssembly(class Type )" />
        <Method Sig="instance class Type GetType(string )" />
        <Method Sig="instance class Type GetType(string , bool )" />
        <Method Sig="instance class Type GetType(string , bool , bool )" />
        <Method Sig="instance [] class Type GetExportedTypes()" />
        <Method Sig="instance [] class Type GetTypes()" />
        <Method Sig="instance class Stream GetManifestResourceStream(class Type , string )" />
        <Method Sig="instance class Stream GetManifestResourceStream(string )" />
        <Method Sig="instance class Assembly GetSatelliteAssembly(class CultureInfo )" />
        <Method Sig="instance class Assembly GetSatelliteAssembly(class CultureInfo , class Version )" />
        <Method Sig="instance class Evidence get_Evidence()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class Module get_ManifestModule()" />
        <Method Sig="instance [] object GetCustomAttributes(bool )" />
        <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
        <Method Sig="instance bool IsDefined(class Type , bool )" />
        <Method Sig="class Assembly LoadFrom(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly ReflectionOnlyLoadFrom(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadFrom(string , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadFrom(string , class Evidence , [] byte , struct AssemblyHashAlgorithm )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly Load(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly ReflectionOnlyLoad(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly Load(string , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly Load(class AssemblyName )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly Load(class AssemblyName , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadWithPartialName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadWithPartialName(string , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_ReflectionOnly()" />
        <Method Sig="class Assembly Load([] byte )" />
        <Method Sig="class Assembly ReflectionOnlyLoad([] byte )" />
        <Method Sig="class Assembly Load([] byte , [] byte )" />
        <Method Sig="class Assembly Load([] byte , [] byte , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadFile(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Assembly LoadFile(string , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Module LoadModule(string , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Module LoadModule(string , [] byte , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object CreateInstance(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object CreateInstance(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object CreateInstance(string , bool , struct BindingFlags , class Binder , [] object , class CultureInfo , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] class Module GetLoadedModules()" />
        <Method Sig="instance [] class Module GetLoadedModules(bool )" />
        <Method Sig="instance [] class Module GetModules()" />
        <Method Sig="instance [] class Module GetModules(bool )" />
        <Method Sig="instance class Module GetModule(string )" />
        <Method Sig="instance class FileStream GetFile(string )" />
        <Method Sig="instance [] class FileStream GetFiles()" />
        <Method Sig="instance [] class FileStream GetFiles(bool )" />
        <Method Sig="instance [] string GetManifestResourceNames()" />
        <Method Sig="class Assembly GetExecutingAssembly()" />
        <Method Sig="class Assembly GetCallingAssembly()" />
        <Method Sig="class Assembly GetEntryAssembly()" />
        <Method Sig="instance [] class AssemblyName GetReferencedAssemblies()" />
        <Method Sig="instance class ManifestResourceInfo GetManifestResourceInfo(string )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance string get_Location()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_ImageRuntimeVersion()" />
        <Method Sig="instance bool get_GlobalAssemblyCache()" />
        <Method Sig="instance in64 get_HostContext()" />
      </Type>
      <Type Name="AssemblyCopyrightAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Copyright()" />
      </Type>
      <Type Name="AssemblyTrademarkAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Trademark()" />
      </Type>
      <Type Name="AssemblyProductAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Product()" />
      </Type>
      <Type Name="AssemblyCompanyAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Company()" />
      </Type>
      <Type Name="AssemblyDescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
      <Type Name="AssemblyTitleAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Title()" />
      </Type>
      <Type Name="AssemblyConfigurationAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Configuration()" />
      </Type>
      <Type Name="AssemblyDefaultAliasAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_DefaultAlias()" />
      </Type>
      <Type Name="AssemblyInformationalVersionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_InformationalVersion()" />
      </Type>
      <Type Name="AssemblyFileVersionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Version()" />
      </Type>
      <Type Name="AssemblyCultureAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Culture()" />
      </Type>
      <Type Name="AssemblyVersionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Version()" />
      </Type>
      <Type Name="AssemblyKeyFileAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_KeyFile()" />
      </Type>
      <Type Name="AssemblyDelaySignAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_DelaySign()" />
      </Type>
      <Type Name="AssemblyAlgorithmIdAttribute">
        <Method Sig="instance void .ctor(struct AssemblyHashAlgorithm )" />
        <Method Sig="instance void .ctor(uint )" />
        <Method Sig="instance uint get_AlgorithmId()" />
      </Type>
      <Type Name="AssemblyFlagsAttribute">
        <Method Sig="instance void .ctor(uint )" />
        <Method Sig="instance uint get_Flags()" />
        <Method Sig="instance int get_AssemblyFlags()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(struct AssemblyNameFlags )" />
      </Type>
      <Type Name="AssemblyKeyNameAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_KeyName()" />
      </Type>
      <Type Name="AssemblyName">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class Version get_Version()" />
        <Method Sig="instance void set_Version(class Version )" />
        <Method Sig="instance class CultureInfo get_CultureInfo()" />
        <Method Sig="instance void set_CultureInfo(class CultureInfo )" />
        <Method Sig="instance string get_CodeBase()" />
        <Method Sig="instance void set_CodeBase(string )" />
        <Method Sig="instance string get_EscapedCodeBase()" />
        <Method Sig="instance struct ProcessorArchitecture get_ProcessorArchitecture()" />
        <Method Sig="instance void set_ProcessorArchitecture(struct ProcessorArchitecture )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="class AssemblyName GetAssemblyName(string )" />
        <Method Sig="instance [] byte GetPublicKey()" />
        <Method Sig="instance void SetPublicKey([] byte )" />
        <Method Sig="instance [] byte GetPublicKeyToken()" />
        <Method Sig="instance void SetPublicKeyToken([] byte )" />
        <Method Sig="instance struct AssemblyNameFlags get_Flags()" />
        <Method Sig="instance void set_Flags(struct AssemblyNameFlags )" />
        <Method Sig="instance struct AssemblyHashAlgorithm get_HashAlgorithm()" />
        <Method Sig="instance void set_HashAlgorithm(struct AssemblyHashAlgorithm )" />
        <Method Sig="instance struct AssemblyVersionCompatibility get_VersionCompatibility()" />
        <Method Sig="instance void set_VersionCompatibility(struct AssemblyVersionCompatibility )" />
        <Method Sig="instance class StrongNameKeyPair get_KeyPair()" />
        <Method Sig="instance void set_KeyPair(class StrongNameKeyPair )" />
        <Method Sig="instance string get_FullName()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
        <Method Sig="instance void OnDeserialization(object )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="bool ReferenceMatchesDefinition(class AssemblyName , class AssemblyName )" />
      </Type>
      <Type Name="AssemblyNameProxy">
        <Method Sig="instance class AssemblyName GetAssemblyName(string )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CustomAttributeFormatException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="CustomAttributeData">
        <Method Sig="GetCustomAttributes(class IList`1 )" />
        <Method Sig="GetCustomAttributes(class IList`1 )" />
        <Method Sig="GetCustomAttributes(class IList`1 )" />
        <Method Sig="GetCustomAttributes(class IList`1 )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance class ConstructorInfo get_Constructor()" />
        <Method Sig="instance get_ConstructorArguments()" />
        <Method Sig="instance get_NamedArguments()" />
      </Type>
      <Type Name="CustomAttributeNamedArgument">
        <Method Sig="bool op_Equality(struct CustomAttributeNamedArgument , struct CustomAttributeNamedArgument )" />
        <Method Sig="bool op_Inequality(struct CustomAttributeNamedArgument , struct CustomAttributeNamedArgument )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance class MemberInfo get_MemberInfo()" />
        <Method Sig="instance struct CustomAttributeTypedArgument get_TypedValue()" />
      </Type>
      <Type Name="CustomAttributeTypedArgument">
        <Method Sig="bool op_Equality(struct CustomAttributeTypedArgument , struct CustomAttributeTypedArgument )" />
        <Method Sig="bool op_Inequality(struct CustomAttributeTypedArgument , struct CustomAttributeTypedArgument )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance class Type get_ArgumentType()" />
        <Method Sig="instance object get_Value()" />
      </Type>
      <Type Name="DefaultMemberAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_MemberName()" />
      </Type>
      <Type Name="InvalidFilterCriteriaException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="ManifestResourceInfo">
        <Method Sig="instance class Assembly get_ReferencedAssembly()" />
        <Method Sig="instance string get_FileName()" />
        <Method Sig="instance struct ResourceLocation get_ResourceLocation()" />
      </Type>
      <Type Name="MemberFilter">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance bool Invoke(class MemberInfo , object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class MemberInfo , object , class AsyncCallback , object )" />
        <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="Missing">
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Module">
        <Method Sig="void .cctor()" />
        <Method Sig="instance class MethodBase ResolveMethod(int )" />
        <Method Sig="instance [] byte ResolveSignature(int )" />
        <Method Sig="instance class MethodBase ResolveMethod(int , [] class Type , [] class Type )" />
        <Method Sig="instance class FieldInfo ResolveField(int )" />
        <Method Sig="instance class FieldInfo ResolveField(int , [] class Type , [] class Type )" />
        <Method Sig="instance class Type ResolveType(int )" />
        <Method Sig="instance class Type ResolveType(int , [] class Type , [] class Type )" />
        <Method Sig="instance class MemberInfo ResolveMember(int )" />
        <Method Sig="instance class MemberInfo ResolveMember(int , [] class Type , [] class Type )" />
        <Method Sig="instance string ResolveString(int )" />
        <Method Sig="instance void GetPEKind(&amp; struct PortableExecutableKinds , &amp; struct ImageFileMachine )" />
        <Method Sig="instance int get_MDStreamVersion()" />
        <Method Sig="instance [] object GetCustomAttributes(bool )" />
        <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
        <Method Sig="instance bool IsDefined(class Type , bool )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class Type GetType(string , bool )" />
        <Method Sig="instance class Type GetType(string )" />
        <Method Sig="instance class Type GetType(string , bool , bool )" />
        <Method Sig="instance string get_FullyQualifiedName()" />
        <Method Sig="instance [] class Type FindTypes(class TypeFilter , object )" />
        <Method Sig="instance [] class Type GetTypes()" />
        <Method Sig="instance struct Guid get_ModuleVersionId()" />
        <Method Sig="instance int get_MetadataToken()" />
        <Method Sig="instance bool IsResource()" />
        <Method Sig="instance [] class FieldInfo GetFields()" />
        <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
        <Method Sig="instance class FieldInfo GetField(string )" />
        <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
        <Method Sig="instance [] class MethodInfo GetMethods()" />
        <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
        <Method Sig="instance class MethodInfo GetMethod(string , struct BindingFlags , class Binder , struct CallingConventions , [] class Type , [] struct ParameterModifier )" />
        <Method Sig="instance class MethodInfo GetMethod(string , [] class Type )" />
        <Method Sig="instance class MethodInfo GetMethod(string )" />
        <Method Sig="instance string get_ScopeName()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance class Assembly get_Assembly()" />
        <Method Sig="instance struct ModuleHandle get_ModuleHandle()" />
        <Method Sig="instance class X509Certificate GetSignerCertificate()" />
      </Type>
      <Type Name="ObfuscateAssemblyAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_AssemblyIsPrivate()" />
        <Method Sig="instance bool get_StripAfterObfuscation()" />
        <Method Sig="instance void set_StripAfterObfuscation(bool )" />
      </Type>
      <Type Name="ObfuscationAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_StripAfterObfuscation()" />
        <Method Sig="instance void set_StripAfterObfuscation(bool )" />
        <Method Sig="instance bool get_Exclude()" />
        <Method Sig="instance void set_Exclude(bool )" />
        <Method Sig="instance bool get_ApplyToMembers()" />
        <Method Sig="instance void set_ApplyToMembers(bool )" />
        <Method Sig="instance string get_Feature()" />
        <Method Sig="instance void set_Feature(string )" />
      </Type>
      <Type Name="ExceptionHandlingClause">
        <Method Sig="instance struct ExceptionHandlingClauseOptions get_Flags()" />
        <Method Sig="instance int get_TryOffset()" />
        <Method Sig="instance int get_TryLength()" />
        <Method Sig="instance int get_HandlerOffset()" />
        <Method Sig="instance int get_HandlerLength()" />
        <Method Sig="instance int get_FilterOffset()" />
        <Method Sig="instance class Type get_CatchType()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="MethodBody">
        <Method Sig="instance int get_LocalSignatureMetadataToken()" />
        <Method Sig="instance get_LocalVariables()" />
        <Method Sig="instance int get_MaxStackSize()" />
        <Method Sig="instance bool get_InitLocals()" />
        <Method Sig="instance [] byte GetILAsByteArray()" />
        <Method Sig="instance get_ExceptionHandlingClauses()" />
      </Type>
      <Type Name="LocalVariableInfo">
        <Method Sig="instance string ToString()" />
        <Method Sig="instance class Type get_LocalType()" />
        <Method Sig="instance bool get_IsPinned()" />
        <Method Sig="instance int get_LocalIndex()" />
      </Type>
      <Type Name="ParameterModifier">
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance bool get_Item(int )" />
        <Method Sig="instance void set_Item(int , bool )" />
      </Type>
      <Type Name="Pointer">
        <Method Sig="object Box(* void , class Type )" />
        <Method Sig="* void Unbox(object )" />
      </Type>
      <Type Name="ReflectionTypeLoadException">
        <Method Sig="instance void .ctor([] class Type , [] class Exception )" />
        <Method Sig="instance void .ctor([] class Type , [] class Exception , string )" />
        <Method Sig="instance [] class Type get_Types()" />
        <Method Sig="instance [] class Exception get_LoaderExceptions()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="StrongNameKeyPair">
        <Method Sig="instance void .ctor(class FileStream )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor([] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte get_PublicKey()" />
      </Type>
      <Type Name="TargetException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="TargetInvocationException">
        <Method Sig="instance void .ctor(class Exception )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="TargetParameterCountException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="TypeDelegator">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance struct Guid get_GUID()" />
        <Method Sig="instance int get_MetadataToken()" />
        <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , [] struct ParameterModifier , class CultureInfo , [] string )" />
        <Method Sig="instance class Module get_Module()" />
        <Method Sig="instance class Assembly get_Assembly()" />
        <Method Sig="instance struct RuntimeTypeHandle get_TypeHandle()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_FullName()" />
        <Method Sig="instance string get_Namespace()" />
        <Method Sig="instance string get_AssemblyQualifiedName()" />
        <Method Sig="instance class Type get_BaseType()" />
        <Method Sig="instance [] class ConstructorInfo GetConstructors(struct BindingFlags )" />
        <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
        <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
        <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
        <Method Sig="instance class Type GetInterface(string , bool )" />
        <Method Sig="instance [] class Type GetInterfaces()" />
        <Method Sig="instance class EventInfo GetEvent(string , struct BindingFlags )" />
        <Method Sig="instance [] class EventInfo GetEvents()" />
        <Method Sig="instance [] class PropertyInfo GetProperties(struct BindingFlags )" />
        <Method Sig="instance [] class EventInfo GetEvents(struct BindingFlags )" />
        <Method Sig="instance [] class Type GetNestedTypes(struct BindingFlags )" />
        <Method Sig="instance class Type GetNestedType(string , struct BindingFlags )" />
        <Method Sig="instance [] class MemberInfo GetMember(string , struct MemberTypes , struct BindingFlags )" />
        <Method Sig="instance [] class MemberInfo GetMembers(struct BindingFlags )" />
        <Method Sig="instance class Type GetElementType()" />
        <Method Sig="instance class Type get_UnderlyingSystemType()" />
        <Method Sig="instance [] object GetCustomAttributes(bool )" />
        <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
        <Method Sig="instance bool IsDefined(class Type , bool )" />
        <Method Sig="instance struct InterfaceMapping GetInterfaceMap(class Type )" />
      </Type>
      <Type Name="TypeFilter">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance bool Invoke(class Type , object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class Type , object , class AsyncCallback , object )" />
        <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="MethodBase">
        <Method Sig="class MethodBase GetMethodFromHandle(struct RuntimeMethodHandle )" />
        <Method Sig="class MethodBase GetMethodFromHandle(struct RuntimeMethodHandle , struct RuntimeTypeHandle )" />
        <Method Sig="class MethodBase GetCurrentMethod()" />
        <Method Sig="instance [] class ParameterInfo GetParameters()" />
        <Method Sig="instance struct MethodImplAttributes GetMethodImplementationFlags()" />
        <Method Sig="instance struct RuntimeMethodHandle get_MethodHandle()" />
        <Method Sig="instance struct MethodAttributes get_Attributes()" />
        <Method Sig="instance object Invoke(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
        <Method Sig="instance struct CallingConventions get_CallingConvention()" />
        <Method Sig="instance [] class Type GetGenericArguments()" />
        <Method Sig="instance bool get_IsGenericMethodDefinition()" />
        <Method Sig="instance bool get_ContainsGenericParameters()" />
        <Method Sig="instance bool get_IsGenericMethod()" />
        <Method Sig="instance object Invoke(object , [] object )" />
        <Method Sig="instance bool get_IsPublic()" />
        <Method Sig="instance bool get_IsPrivate()" />
        <Method Sig="instance bool get_IsFamily()" />
        <Method Sig="instance bool get_IsAssembly()" />
        <Method Sig="instance bool get_IsFamilyAndAssembly()" />
        <Method Sig="instance bool get_IsFamilyOrAssembly()" />
        <Method Sig="instance bool get_IsStatic()" />
        <Method Sig="instance bool get_IsFinal()" />
        <Method Sig="instance bool get_IsVirtual()" />
        <Method Sig="instance bool get_IsHideBySig()" />
        <Method Sig="instance bool get_IsAbstract()" />
        <Method Sig="instance bool get_IsSpecialName()" />
        <Method Sig="instance bool get_IsConstructor()" />
        <Method Sig="instance class MethodBody GetMethodBody()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ConstructorInfo">
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance object Invoke(struct BindingFlags , class Binder , [] object , class CultureInfo )" />
        <Method Sig="instance object Invoke([] object )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MethodInfo">
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance class Type get_ReturnType()" />
        <Method Sig="instance class ParameterInfo get_ReturnParameter()" />
        <Method Sig="instance class ICustomAttributeProvider get_ReturnTypeCustomAttributes()" />
        <Method Sig="instance class MethodInfo GetBaseDefinition()" />
        <Method Sig="instance [] class Type GetGenericArguments()" />
        <Method Sig="instance class MethodInfo GetGenericMethodDefinition()" />
        <Method Sig="instance bool get_IsGenericMethodDefinition()" />
        <Method Sig="instance bool get_ContainsGenericParameters()" />
        <Method Sig="instance class MethodInfo MakeGenericMethod([] class Type )" />
        <Method Sig="instance bool get_IsGenericMethod()" />
      </Type>
      <Type Name="FieldInfo">
        <Method Sig="class FieldInfo GetFieldFromHandle(struct RuntimeFieldHandle )" />
        <Method Sig="class FieldInfo GetFieldFromHandle(struct RuntimeFieldHandle , struct RuntimeTypeHandle )" />
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance [] class Type GetRequiredCustomModifiers()" />
        <Method Sig="instance [] class Type GetOptionalCustomModifiers()" />
        <Method Sig="instance void SetValueDirect(typedbyref , object )" />
        <Method Sig="instance object GetValueDirect(typedbyref )" />
        <Method Sig="instance struct RuntimeFieldHandle get_FieldHandle()" />
        <Method Sig="instance class Type get_FieldType()" />
        <Method Sig="instance object GetValue(object )" />
        <Method Sig="instance object GetRawConstantValue()" />
        <Method Sig="instance void SetValue(object , object , struct BindingFlags , class Binder , class CultureInfo )" />
        <Method Sig="instance struct FieldAttributes get_Attributes()" />
        <Method Sig="instance void SetValue(object , object )" />
        <Method Sig="instance bool get_IsPublic()" />
        <Method Sig="instance bool get_IsPrivate()" />
        <Method Sig="instance bool get_IsFamily()" />
        <Method Sig="instance bool get_IsAssembly()" />
        <Method Sig="instance bool get_IsFamilyAndAssembly()" />
        <Method Sig="instance bool get_IsFamilyOrAssembly()" />
        <Method Sig="instance bool get_IsStatic()" />
        <Method Sig="instance bool get_IsInitOnly()" />
        <Method Sig="instance bool get_IsLiteral()" />
        <Method Sig="instance bool get_IsNotSerialized()" />
        <Method Sig="instance bool get_IsSpecialName()" />
        <Method Sig="instance bool get_IsPinvokeImpl()" />
      </Type>
      <Type Name="EventInfo">
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance [] class MethodInfo GetOtherMethods(bool )" />
        <Method Sig="instance class MethodInfo GetAddMethod(bool )" />
        <Method Sig="instance class MethodInfo GetRemoveMethod(bool )" />
        <Method Sig="instance class MethodInfo GetRaiseMethod(bool )" />
        <Method Sig="instance struct EventAttributes get_Attributes()" />
        <Method Sig="instance [] class MethodInfo GetOtherMethods()" />
        <Method Sig="instance class MethodInfo GetAddMethod()" />
        <Method Sig="instance class MethodInfo GetRemoveMethod()" />
        <Method Sig="instance class MethodInfo GetRaiseMethod()" />
        <Method Sig="instance void AddEventHandler(object , class Delegate )" />
        <Method Sig="instance void RemoveEventHandler(object , class Delegate )" />
        <Method Sig="instance class Type get_EventHandlerType()" />
        <Method Sig="instance bool get_IsSpecialName()" />
        <Method Sig="instance bool get_IsMulticast()" />
      </Type>
      <Type Name="PropertyInfo">
        <Method Sig="instance struct MemberTypes get_MemberType()" />
        <Method Sig="instance object GetConstantValue()" />
        <Method Sig="instance object GetRawConstantValue()" />
        <Method Sig="instance class Type get_PropertyType()" />
        <Method Sig="instance void SetValue(object , object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
        <Method Sig="instance [] class MethodInfo GetAccessors(bool )" />
        <Method Sig="instance class MethodInfo GetGetMethod(bool )" />
        <Method Sig="instance class MethodInfo GetSetMethod(bool )" />
        <Method Sig="instance [] class ParameterInfo GetIndexParameters()" />
        <Method Sig="instance struct PropertyAttributes get_Attributes()" />
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance object GetValue(object , [] object )" />
        <Method Sig="instance object GetValue(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
        <Method Sig="instance void SetValue(object , object , [] object )" />
        <Method Sig="instance [] class Type GetRequiredCustomModifiers()" />
        <Method Sig="instance [] class Type GetOptionalCustomModifiers()" />
        <Method Sig="instance [] class MethodInfo GetAccessors()" />
        <Method Sig="instance class MethodInfo GetGetMethod()" />
        <Method Sig="instance class MethodInfo GetSetMethod()" />
        <Method Sig="instance bool get_IsSpecialName()" />
      </Type>
      <Type Name="ParameterInfo">
        <Method Sig="instance class Type get_ParameterType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance object get_DefaultValue()" />
        <Method Sig="instance object get_RawDefaultValue()" />
        <Method Sig="instance int get_Position()" />
        <Method Sig="instance struct ParameterAttributes get_Attributes()" />
        <Method Sig="instance class MemberInfo get_Member()" />
        <Method Sig="instance bool get_IsIn()" />
        <Method Sig="instance bool get_IsOut()" />
        <Method Sig="instance bool get_IsLcid()" />
        <Method Sig="instance bool get_IsRetval()" />
        <Method Sig="instance bool get_IsOptional()" />
        <Method Sig="instance int get_MetadataToken()" />
        <Method Sig="instance [] class Type GetRequiredCustomModifiers()" />
        <Method Sig="instance [] class Type GetOptionalCustomModifiers()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance [] object GetCustomAttributes(bool )" />
        <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
        <Method Sig="instance bool IsDefined(class Type , bool )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Namespace Name="Emit">
        <Type Name="AssemblyBuilder">
          <Method Sig="instance class ModuleBuilder DefineDynamicModule(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ModuleBuilder DefineDynamicModule(string , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ModuleBuilder DefineDynamicModule(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ModuleBuilder DefineDynamicModule(string , string , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_ReflectionOnly()" />
          <Method Sig="instance class IResourceWriter DefineResource(string , string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IResourceWriter DefineResource(string , string , string , struct ResourceAttributes )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddResourceFile(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddResourceFile(string , string , struct ResourceAttributes )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] string GetManifestResourceNames()" />
          <Method Sig="instance class FileStream GetFile(string )" />
          <Method Sig="instance [] class FileStream GetFiles(bool )" />
          <Method Sig="instance class Stream GetManifestResourceStream(class Type , string )" />
          <Method Sig="instance class Stream GetManifestResourceStream(string )" />
          <Method Sig="instance class ManifestResourceInfo GetManifestResourceInfo(string )" />
          <Method Sig="instance string get_Location()" />
          <Method Sig="instance string get_ImageRuntimeVersion()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_CodeBase()" />
          <Method Sig="instance void DefineVersionInfoResource(string , string , string , string , string )" />
          <Method Sig="instance void DefineVersionInfoResource()" />
          <Method Sig="instance void DefineUnmanagedResource([] byte )" />
          <Method Sig="instance void DefineUnmanagedResource(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ModuleBuilder GetDynamicModule(string )" />
          <Method Sig="instance void SetEntryPoint(class MethodInfo )" />
          <Method Sig="instance void SetEntryPoint(class MethodInfo , struct PEFileKinds )" />
          <Method Sig="instance class MethodInfo get_EntryPoint()" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance void Save(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Save(string , struct PortableExecutableKinds , struct ImageFileMachine )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] class Type GetExportedTypes()" />
        </Type>
        <Type Name="ConstructorBuilder">
          <Method Sig="instance string ToString()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance object Invoke(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance [] class ParameterInfo GetParameters()" />
          <Method Sig="instance struct MethodAttributes get_Attributes()" />
          <Method Sig="instance struct MethodImplAttributes GetMethodImplementationFlags()" />
          <Method Sig="instance struct RuntimeMethodHandle get_MethodHandle()" />
          <Method Sig="instance object Invoke(struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance struct MethodToken GetToken()" />
          <Method Sig="instance class ParameterBuilder DefineParameter(int , struct ParameterAttributes , string )" />
          <Method Sig="instance void SetSymCustomAttribute(string , [] byte )" />
          <Method Sig="instance class ILGenerator GetILGenerator()" />
          <Method Sig="instance class ILGenerator GetILGenerator(int )" />
          <Method Sig="instance void AddDeclarativeSecurity(struct SecurityAction , class PermissionSet )" />
          <Method Sig="instance struct CallingConventions get_CallingConvention()" />
          <Method Sig="instance class Module GetModule()" />
          <Method Sig="instance class Type get_ReturnType()" />
          <Method Sig="instance string get_Signature()" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance void SetImplementationFlags(struct MethodImplAttributes )" />
          <Method Sig="instance bool get_InitLocals()" />
          <Method Sig="instance void set_InitLocals(bool )" />
        </Type>
        <Type Name="ILGenerator">
          <Method Sig="instance void Emit(struct OpCode )" />
          <Method Sig="instance void Emit(struct OpCode , byte )" />
          <Method Sig="instance void Emit(struct OpCode , sbyte )" />
          <Method Sig="instance void Emit(struct OpCode , short )" />
          <Method Sig="instance void Emit(struct OpCode , int )" />
          <Method Sig="instance void Emit(struct OpCode , class MethodInfo )" />
          <Method Sig="instance void EmitCalli(struct OpCode , struct CallingConventions , class Type , [] class Type , [] class Type )" />
          <Method Sig="instance void EmitCalli(struct OpCode , struct CallingConvention , class Type , [] class Type )" />
          <Method Sig="instance void EmitCall(struct OpCode , class MethodInfo , [] class Type )" />
          <Method Sig="instance void Emit(struct OpCode , class SignatureHelper )" />
          <Method Sig="instance void Emit(struct OpCode , class ConstructorInfo )" />
          <Method Sig="instance void Emit(struct OpCode , class Type )" />
          <Method Sig="instance void Emit(struct OpCode , in64 )" />
          <Method Sig="instance void Emit(struct OpCode , float )" />
          <Method Sig="instance void Emit(struct OpCode , double )" />
          <Method Sig="instance void Emit(struct OpCode , struct Label )" />
          <Method Sig="instance void Emit(struct OpCode , [] struct Label )" />
          <Method Sig="instance void Emit(struct OpCode , class FieldInfo )" />
          <Method Sig="instance void Emit(struct OpCode , string )" />
          <Method Sig="instance void Emit(struct OpCode , class LocalBuilder )" />
          <Method Sig="instance struct Label BeginExceptionBlock()" />
          <Method Sig="instance void EndExceptionBlock()" />
          <Method Sig="instance void BeginExceptFilterBlock()" />
          <Method Sig="instance void BeginCatchBlock(class Type )" />
          <Method Sig="instance void BeginFaultBlock()" />
          <Method Sig="instance void BeginFinallyBlock()" />
          <Method Sig="instance struct Label DefineLabel()" />
          <Method Sig="instance void MarkLabel(struct Label )" />
          <Method Sig="instance void ThrowException(class Type )" />
          <Method Sig="instance void EmitWriteLine(string )" />
          <Method Sig="instance void EmitWriteLine(class LocalBuilder )" />
          <Method Sig="instance void EmitWriteLine(class FieldInfo )" />
          <Method Sig="instance class LocalBuilder DeclareLocal(class Type )" />
          <Method Sig="instance class LocalBuilder DeclareLocal(class Type , bool )" />
          <Method Sig="instance void UsingNamespace(string )" />
          <Method Sig="instance void MarkSequencePoint(class ISymbolDocumentWriter , int , int , int , int )" />
          <Method Sig="instance void BeginScope()" />
          <Method Sig="instance void EndScope()" />
        </Type>
        <Type Name="DynamicILInfo">
          <Method Sig="instance class DynamicMethod get_DynamicMethod()" />
          <Method Sig="instance void SetCode([] byte , int )" />
          <Method Sig="instance void SetCode(* byte , int , int )" />
          <Method Sig="instance void SetExceptions([] byte )" />
          <Method Sig="instance void SetExceptions(* byte , int )" />
          <Method Sig="instance void SetLocalSignature([] byte )" />
          <Method Sig="instance void SetLocalSignature(* byte , int )" />
          <Method Sig="instance int GetTokenFor(struct RuntimeMethodHandle )" />
          <Method Sig="instance int GetTokenFor(class DynamicMethod )" />
          <Method Sig="instance int GetTokenFor(struct RuntimeMethodHandle , struct RuntimeTypeHandle )" />
          <Method Sig="instance int GetTokenFor(struct RuntimeFieldHandle )" />
          <Method Sig="instance int GetTokenFor(struct RuntimeTypeHandle )" />
          <Method Sig="instance int GetTokenFor(string )" />
          <Method Sig="instance int GetTokenFor([] byte )" />
        </Type>
        <Type Name="DynamicMethod">
          <Method Sig="instance void .ctor(string , class Type , [] class Type , class Module )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , class Type , [] class Type , class Module , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , class Module , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , class Type , [] class Type , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , class Type , [] class Type , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess, ReflectionEmit" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Delegate CreateDelegate(class Type )" />
          <Method Sig="instance class Delegate CreateDelegate(class Type , object )" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance struct RuntimeMethodHandle get_MethodHandle()" />
          <Method Sig="instance struct MethodAttributes get_Attributes()" />
          <Method Sig="instance struct CallingConventions get_CallingConvention()" />
          <Method Sig="instance class MethodInfo GetBaseDefinition()" />
          <Method Sig="instance [] class ParameterInfo GetParameters()" />
          <Method Sig="instance struct MethodImplAttributes GetMethodImplementationFlags()" />
          <Method Sig="instance object Invoke(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance class Type get_ReturnType()" />
          <Method Sig="instance class ParameterInfo get_ReturnParameter()" />
          <Method Sig="instance class ICustomAttributeProvider get_ReturnTypeCustomAttributes()" />
          <Method Sig="instance class ParameterBuilder DefineParameter(int , struct ParameterAttributes , string )" />
          <Method Sig="instance class DynamicILInfo GetDynamicILInfo()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ILGenerator GetILGenerator()" />
          <Method Sig="instance class ILGenerator GetILGenerator(int )" />
          <Method Sig="instance bool get_InitLocals()" />
          <Method Sig="instance void set_InitLocals(bool )" />
        </Type>
        <Type Name="EventBuilder">
          <Method Sig="instance struct EventToken GetEventToken()" />
          <Method Sig="instance void SetAddOnMethod(class MethodBuilder )" />
          <Method Sig="instance void SetRemoveOnMethod(class MethodBuilder )" />
          <Method Sig="instance void SetRaiseMethod(class MethodBuilder )" />
          <Method Sig="instance void AddOtherMethod(class MethodBuilder )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
        </Type>
        <Type Name="EventToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct EventToken )" />
          <Method Sig="bool op_Equality(struct EventToken , struct EventToken )" />
          <Method Sig="bool op_Inequality(struct EventToken , struct EventToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="FieldBuilder">
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance class Type get_FieldType()" />
          <Method Sig="instance object GetValue(object )" />
          <Method Sig="instance void SetValue(object , object , struct BindingFlags , class Binder , class CultureInfo )" />
          <Method Sig="instance struct RuntimeFieldHandle get_FieldHandle()" />
          <Method Sig="instance struct FieldAttributes get_Attributes()" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance struct FieldToken GetToken()" />
          <Method Sig="instance void SetOffset(int )" />
          <Method Sig="instance void SetMarshal(class UnmanagedMarshal )" />
          <Method Sig="instance void SetConstant(object )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
        </Type>
        <Type Name="FieldToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct FieldToken )" />
          <Method Sig="bool op_Equality(struct FieldToken , struct FieldToken )" />
          <Method Sig="bool op_Inequality(struct FieldToken , struct FieldToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="Label">
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct Label )" />
          <Method Sig="bool op_Equality(struct Label , struct Label )" />
          <Method Sig="bool op_Inequality(struct Label , struct Label )" />
        </Type>
        <Type Name="LocalBuilder">
          <Method Sig="instance bool get_IsPinned()" />
          <Method Sig="instance class Type get_LocalType()" />
          <Method Sig="instance int get_LocalIndex()" />
          <Method Sig="instance void SetLocalSymInfo(string )" />
          <Method Sig="instance void SetLocalSymInfo(string , int , int )" />
        </Type>
        <Type Name="MethodBuilder">
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class ICustomAttributeProvider get_ReturnTypeCustomAttributes()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance object Invoke(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance struct MethodImplAttributes GetMethodImplementationFlags()" />
          <Method Sig="instance struct MethodAttributes get_Attributes()" />
          <Method Sig="instance struct CallingConventions get_CallingConvention()" />
          <Method Sig="instance struct RuntimeMethodHandle get_MethodHandle()" />
          <Method Sig="instance class MethodInfo GetBaseDefinition()" />
          <Method Sig="instance [] class ParameterInfo GetParameters()" />
          <Method Sig="instance class ParameterInfo get_ReturnParameter()" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance bool get_IsGenericMethodDefinition()" />
          <Method Sig="instance bool get_ContainsGenericParameters()" />
          <Method Sig="instance class MethodInfo GetGenericMethodDefinition()" />
          <Method Sig="instance bool get_IsGenericMethod()" />
          <Method Sig="instance [] class Type GetGenericArguments()" />
          <Method Sig="instance class MethodInfo MakeGenericMethod([] class Type )" />
          <Method Sig="instance [] class GenericTypeParameterBuilder DefineGenericParameters([] string )" />
          <Method Sig="instance struct MethodToken GetToken()" />
          <Method Sig="instance void SetParameters([] class Type )" />
          <Method Sig="instance void SetReturnType(class Type )" />
          <Method Sig="instance void SetSignature(class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance class ParameterBuilder DefineParameter(int , struct ParameterAttributes , string )" />
          <Method Sig="instance void SetMarshal(class UnmanagedMarshal )" />
          <Method Sig="instance void SetSymCustomAttribute(string , [] byte )" />
          <Method Sig="instance void AddDeclarativeSecurity(struct SecurityAction , class PermissionSet )" />
          <Method Sig="instance void CreateMethodBody([] byte , int )" />
          <Method Sig="instance void SetImplementationFlags(struct MethodImplAttributes )" />
          <Method Sig="instance class ILGenerator GetILGenerator()" />
          <Method Sig="instance class ILGenerator GetILGenerator(int )" />
          <Method Sig="instance bool get_InitLocals()" />
          <Method Sig="instance void set_InitLocals(bool )" />
          <Method Sig="instance class Module GetModule()" />
          <Method Sig="instance string get_Signature()" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
        </Type>
        <Type Name="CustomAttributeBuilder">
          <Method Sig="instance void .ctor(class ConstructorInfo , [] object )" />
          <Method Sig="instance void .ctor(class ConstructorInfo , [] object , [] class PropertyInfo , [] object )" />
          <Method Sig="instance void .ctor(class ConstructorInfo , [] object , [] class FieldInfo , [] object )" />
          <Method Sig="instance void .ctor(class ConstructorInfo , [] object , [] class PropertyInfo , [] object , [] class FieldInfo , [] object )" />
        </Type>
        <Type Name="MethodRental">
          <Method Sig="void SwapMethodBody(class Type , int , intptr , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="MethodToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct MethodToken )" />
          <Method Sig="bool op_Equality(struct MethodToken , struct MethodToken )" />
          <Method Sig="bool op_Inequality(struct MethodToken , struct MethodToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ModuleBuilder">
          <Method Sig="instance [] class Type GetTypes()" />
          <Method Sig="instance class Type GetType(string )" />
          <Method Sig="instance class Type GetType(string , bool )" />
          <Method Sig="instance class Type GetType(string , bool , bool )" />
          <Method Sig="instance string get_FullyQualifiedName()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class TypeBuilder DefineType(string )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes , class Type )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes , class Type , int )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes , class Type , struct PackingSize , int )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes , class Type , [] class Type )" />
          <Method Sig="instance class TypeBuilder DefineType(string , struct TypeAttributes , class Type , struct PackingSize )" />
          <Method Sig="instance class EnumBuilder DefineEnum(string , struct TypeAttributes , class Type )" />
          <Method Sig="instance class IResourceWriter DefineResource(string , string )" />
          <Method Sig="instance class IResourceWriter DefineResource(string , string , struct ResourceAttributes )" />
          <Method Sig="instance void DefineManifestResource(string , class Stream , struct ResourceAttributes )" />
          <Method Sig="instance void DefineUnmanagedResource([] byte )" />
          <Method Sig="instance void DefineUnmanagedResource(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class MethodBuilder DefineGlobalMethod(string , struct MethodAttributes , class Type , [] class Type )" />
          <Method Sig="instance class MethodBuilder DefineGlobalMethod(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type )" />
          <Method Sig="instance class MethodBuilder DefineGlobalMethod(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance class MethodBuilder DefinePInvokeMethod(string , string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , struct CallingConvention , struct CharSet )" />
          <Method Sig="instance class MethodBuilder DefinePInvokeMethod(string , string , string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , struct CallingConvention , struct CharSet )" />
          <Method Sig="instance void CreateGlobalFunctions()" />
          <Method Sig="instance class FieldBuilder DefineInitializedData(string , [] byte , struct FieldAttributes )" />
          <Method Sig="instance class FieldBuilder DefineUninitializedData(string , int , struct FieldAttributes )" />
          <Method Sig="instance struct TypeToken GetTypeToken(class Type )" />
          <Method Sig="instance struct TypeToken GetTypeToken(string )" />
          <Method Sig="instance struct MethodToken GetMethodToken(class MethodInfo )" />
          <Method Sig="instance struct MethodToken GetArrayMethodToken(class Type , string , struct CallingConventions , class Type , [] class Type )" />
          <Method Sig="instance class MethodInfo GetArrayMethod(class Type , string , struct CallingConventions , class Type , [] class Type )" />
          <Method Sig="instance struct MethodToken GetConstructorToken(class ConstructorInfo )" />
          <Method Sig="instance struct FieldToken GetFieldToken(class FieldInfo )" />
          <Method Sig="instance struct StringToken GetStringConstant(string )" />
          <Method Sig="instance struct SignatureToken GetSignatureToken(class SignatureHelper )" />
          <Method Sig="instance struct SignatureToken GetSignatureToken([] byte , int )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance class ISymbolWriter GetSymWriter()" />
          <Method Sig="instance class ISymbolDocumentWriter DefineDocument(string , struct Guid , struct Guid , struct Guid )" />
          <Method Sig="instance void SetUserEntryPoint(class MethodInfo )" />
          <Method Sig="instance void SetSymCustomAttribute(string , [] byte )" />
          <Method Sig="instance bool IsTransient()" />
        </Type>
        <Type Name="OpCodes">
          <Method Sig="bool TakesSingleByteArgument(struct OpCode )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="OpCode">
          <Method Sig="instance struct OperandType get_OperandType()" />
          <Method Sig="instance struct FlowControl get_FlowControl()" />
          <Method Sig="instance struct OpCodeType get_OpCodeType()" />
          <Method Sig="instance struct StackBehaviour get_StackBehaviourPop()" />
          <Method Sig="instance struct StackBehaviour get_StackBehaviourPush()" />
          <Method Sig="instance int get_Size()" />
          <Method Sig="instance short get_Value()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct OpCode )" />
          <Method Sig="bool op_Equality(struct OpCode , struct OpCode )" />
          <Method Sig="bool op_Inequality(struct OpCode , struct OpCode )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="ParameterBuilder">
          <Method Sig="instance void SetMarshal(class UnmanagedMarshal )" />
          <Method Sig="instance void SetConstant(object )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance struct ParameterToken GetToken()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance int get_Position()" />
          <Method Sig="instance int get_Attributes()" />
          <Method Sig="instance bool get_IsIn()" />
          <Method Sig="instance bool get_IsOut()" />
          <Method Sig="instance bool get_IsOptional()" />
        </Type>
        <Type Name="ParameterToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct ParameterToken )" />
          <Method Sig="bool op_Equality(struct ParameterToken , struct ParameterToken )" />
          <Method Sig="bool op_Inequality(struct ParameterToken , struct ParameterToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="PropertyBuilder">
          <Method Sig="instance void SetConstant(object )" />
          <Method Sig="instance struct PropertyToken get_PropertyToken()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance void SetGetMethod(class MethodBuilder )" />
          <Method Sig="instance void SetSetMethod(class MethodBuilder )" />
          <Method Sig="instance void AddOtherMethod(class MethodBuilder )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance object GetValue(object , [] object )" />
          <Method Sig="instance object GetValue(object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance void SetValue(object , object , [] object )" />
          <Method Sig="instance void SetValue(object , object , struct BindingFlags , class Binder , [] object , class CultureInfo )" />
          <Method Sig="instance [] class MethodInfo GetAccessors(bool )" />
          <Method Sig="instance class MethodInfo GetGetMethod(bool )" />
          <Method Sig="instance class MethodInfo GetSetMethod(bool )" />
          <Method Sig="instance [] class ParameterInfo GetIndexParameters()" />
          <Method Sig="instance class Type get_PropertyType()" />
          <Method Sig="instance struct PropertyAttributes get_Attributes()" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
        </Type>
        <Type Name="PropertyToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct PropertyToken )" />
          <Method Sig="bool op_Equality(struct PropertyToken , struct PropertyToken )" />
          <Method Sig="bool op_Inequality(struct PropertyToken , struct PropertyToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SignatureHelper">
          <Method Sig="class SignatureHelper GetMethodSigHelper(class Module , class Type , [] class Type )" />
          <Method Sig="class SignatureHelper GetMethodSigHelper(class Module , struct CallingConventions , class Type )" />
          <Method Sig="class SignatureHelper GetMethodSigHelper(class Module , struct CallingConvention , class Type )" />
          <Method Sig="class SignatureHelper GetLocalVarSigHelper()" />
          <Method Sig="class SignatureHelper GetMethodSigHelper(struct CallingConventions , class Type )" />
          <Method Sig="class SignatureHelper GetMethodSigHelper(struct CallingConvention , class Type )" />
          <Method Sig="class SignatureHelper GetLocalVarSigHelper(class Module )" />
          <Method Sig="class SignatureHelper GetFieldSigHelper(class Module )" />
          <Method Sig="class SignatureHelper GetPropertySigHelper(class Module , class Type , [] class Type )" />
          <Method Sig="class SignatureHelper GetPropertySigHelper(class Module , class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance void AddArgument(class Type )" />
          <Method Sig="instance void AddArgument(class Type , bool )" />
          <Method Sig="instance void AddArguments([] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance void AddArgument(class Type , [] class Type , [] class Type )" />
          <Method Sig="instance void AddSentinel()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance [] byte GetSignature()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="SignatureToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct SignatureToken )" />
          <Method Sig="bool op_Equality(struct SignatureToken , struct SignatureToken )" />
          <Method Sig="bool op_Inequality(struct SignatureToken , struct SignatureToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="StringToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct StringToken )" />
          <Method Sig="bool op_Equality(struct StringToken , struct StringToken )" />
          <Method Sig="bool op_Inequality(struct StringToken , struct StringToken )" />
        </Type>
        <Type Name="TypeBuilder">
          <Method Sig="class MethodInfo GetMethod(class Type , class MethodInfo )" />
          <Method Sig="class ConstructorInfo GetConstructor(class Type , class ConstructorInfo )" />
          <Method Sig="class FieldInfo GetField(class Type , class FieldInfo )" />
          <Method Sig="instance bool IsCreated()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance struct Guid get_GUID()" />
          <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , [] struct ParameterModifier , class CultureInfo , [] string )" />
          <Method Sig="instance class Assembly get_Assembly()" />
          <Method Sig="instance struct RuntimeTypeHandle get_TypeHandle()" />
          <Method Sig="instance string get_FullName()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance string get_AssemblyQualifiedName()" />
          <Method Sig="instance class Type get_BaseType()" />
          <Method Sig="instance [] class ConstructorInfo GetConstructors(struct BindingFlags )" />
          <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
          <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
          <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
          <Method Sig="instance class Type GetInterface(string , bool )" />
          <Method Sig="instance [] class Type GetInterfaces()" />
          <Method Sig="instance class EventInfo GetEvent(string , struct BindingFlags )" />
          <Method Sig="instance [] class EventInfo GetEvents()" />
          <Method Sig="instance [] class PropertyInfo GetProperties(struct BindingFlags )" />
          <Method Sig="instance [] class Type GetNestedTypes(struct BindingFlags )" />
          <Method Sig="instance class Type GetNestedType(string , struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMember(string , struct MemberTypes , struct BindingFlags )" />
          <Method Sig="instance struct InterfaceMapping GetInterfaceMap(class Type )" />
          <Method Sig="instance [] class EventInfo GetEvents(struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMembers(struct BindingFlags )" />
          <Method Sig="instance bool IsAssignableFrom(class Type )" />
          <Method Sig="instance class Type GetElementType()" />
          <Method Sig="instance bool IsSubclassOf(class Type )" />
          <Method Sig="instance class Type get_UnderlyingSystemType()" />
          <Method Sig="instance class Type MakePointerType()" />
          <Method Sig="instance class Type MakeByRefType()" />
          <Method Sig="instance class Type MakeArrayType()" />
          <Method Sig="instance class Type MakeArrayType(int )" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance struct GenericParameterAttributes get_GenericParameterAttributes()" />
          <Method Sig="instance [] class GenericTypeParameterBuilder DefineGenericParameters([] string )" />
          <Method Sig="instance class Type MakeGenericType([] class Type )" />
          <Method Sig="instance [] class Type GetGenericArguments()" />
          <Method Sig="instance bool get_IsGenericTypeDefinition()" />
          <Method Sig="instance bool get_IsGenericType()" />
          <Method Sig="instance bool get_IsGenericParameter()" />
          <Method Sig="instance int get_GenericParameterPosition()" />
          <Method Sig="instance class MethodBase get_DeclaringMethod()" />
          <Method Sig="instance class Type GetGenericTypeDefinition()" />
          <Method Sig="instance void DefineMethodOverride(class MethodInfo , class MethodInfo )" />
          <Method Sig="instance class MethodBuilder DefineMethod(string , struct MethodAttributes , class Type , [] class Type )" />
          <Method Sig="instance class MethodBuilder DefineMethod(string , struct MethodAttributes )" />
          <Method Sig="instance class MethodBuilder DefineMethod(string , struct MethodAttributes , struct CallingConventions )" />
          <Method Sig="instance class MethodBuilder DefineMethod(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type )" />
          <Method Sig="instance class MethodBuilder DefineMethod(string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance class ConstructorBuilder DefineTypeInitializer()" />
          <Method Sig="instance class ConstructorBuilder DefineDefaultConstructor(struct MethodAttributes )" />
          <Method Sig="instance class ConstructorBuilder DefineConstructor(struct MethodAttributes , struct CallingConventions , [] class Type )" />
          <Method Sig="instance class ConstructorBuilder DefineConstructor(struct MethodAttributes , struct CallingConventions , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance class MethodBuilder DefinePInvokeMethod(string , string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , struct CallingConvention , struct CharSet )" />
          <Method Sig="instance class MethodBuilder DefinePInvokeMethod(string , string , string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , struct CallingConvention , struct CharSet )" />
          <Method Sig="instance class MethodBuilder DefinePInvokeMethod(string , string , string , struct MethodAttributes , struct CallingConventions , class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type , struct CallingConvention , struct CharSet )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string , struct TypeAttributes , class Type , [] class Type )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string , struct TypeAttributes , class Type )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string , struct TypeAttributes )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string , struct TypeAttributes , class Type , int )" />
          <Method Sig="instance class TypeBuilder DefineNestedType(string , struct TypeAttributes , class Type , struct PackingSize )" />
          <Method Sig="instance class FieldBuilder DefineField(string , class Type , struct FieldAttributes )" />
          <Method Sig="instance class FieldBuilder DefineField(string , class Type , [] class Type , [] class Type , struct FieldAttributes )" />
          <Method Sig="instance class FieldBuilder DefineInitializedData(string , [] byte , struct FieldAttributes )" />
          <Method Sig="instance class FieldBuilder DefineUninitializedData(string , int , struct FieldAttributes )" />
          <Method Sig="instance class PropertyBuilder DefineProperty(string , struct PropertyAttributes , class Type , [] class Type )" />
          <Method Sig="instance class PropertyBuilder DefineProperty(string , struct PropertyAttributes , class Type , [] class Type , [] class Type , [] class Type , [] [] class Type , [] [] class Type )" />
          <Method Sig="instance class EventBuilder DefineEvent(string , struct EventAttributes , class Type )" />
          <Method Sig="instance class Type CreateType()" />
          <Method Sig="instance int get_Size()" />
          <Method Sig="instance struct PackingSize get_PackingSize()" />
          <Method Sig="instance void SetParent(class Type )" />
          <Method Sig="instance void AddInterfaceImplementation(class Type )" />
          <Method Sig="instance void AddDeclarativeSecurity(struct SecurityAction , class PermissionSet )" />
          <Method Sig="instance struct TypeToken get_TypeToken()" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
        </Type>
        <Type Name="GenericTypeParameterBuilder">
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance class Type MakePointerType()" />
          <Method Sig="instance class Type MakeByRefType()" />
          <Method Sig="instance class Type MakeArrayType()" />
          <Method Sig="instance class Type MakeArrayType(int )" />
          <Method Sig="instance struct Guid get_GUID()" />
          <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , [] struct ParameterModifier , class CultureInfo , [] string )" />
          <Method Sig="instance class Assembly get_Assembly()" />
          <Method Sig="instance struct RuntimeTypeHandle get_TypeHandle()" />
          <Method Sig="instance string get_FullName()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance string get_AssemblyQualifiedName()" />
          <Method Sig="instance class Type get_BaseType()" />
          <Method Sig="instance [] class ConstructorInfo GetConstructors(struct BindingFlags )" />
          <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
          <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
          <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
          <Method Sig="instance class Type GetInterface(string , bool )" />
          <Method Sig="instance [] class Type GetInterfaces()" />
          <Method Sig="instance class EventInfo GetEvent(string , struct BindingFlags )" />
          <Method Sig="instance [] class EventInfo GetEvents()" />
          <Method Sig="instance [] class PropertyInfo GetProperties(struct BindingFlags )" />
          <Method Sig="instance [] class Type GetNestedTypes(struct BindingFlags )" />
          <Method Sig="instance class Type GetNestedType(string , struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMember(string , struct MemberTypes , struct BindingFlags )" />
          <Method Sig="instance struct InterfaceMapping GetInterfaceMap(class Type )" />
          <Method Sig="instance [] class EventInfo GetEvents(struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMembers(struct BindingFlags )" />
          <Method Sig="instance class Type GetElementType()" />
          <Method Sig="instance class Type get_UnderlyingSystemType()" />
          <Method Sig="instance [] class Type GetGenericArguments()" />
          <Method Sig="instance bool get_IsGenericTypeDefinition()" />
          <Method Sig="instance bool get_IsGenericType()" />
          <Method Sig="instance bool get_IsGenericParameter()" />
          <Method Sig="instance int get_GenericParameterPosition()" />
          <Method Sig="instance bool get_ContainsGenericParameters()" />
          <Method Sig="instance class MethodBase get_DeclaringMethod()" />
          <Method Sig="instance class Type GetGenericTypeDefinition()" />
          <Method Sig="instance class Type MakeGenericType([] class Type )" />
          <Method Sig="instance bool IsAssignableFrom(class Type )" />
          <Method Sig="instance bool IsSubclassOf(class Type )" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance void SetBaseTypeConstraint(class Type )" />
          <Method Sig="instance void SetInterfaceConstraints([] class Type )" />
          <Method Sig="instance void SetGenericParameterAttributes(struct GenericParameterAttributes )" />
        </Type>
        <Type Name="EnumBuilder">
          <Method Sig="instance class FieldBuilder DefineLiteral(string , object )" />
          <Method Sig="instance class Type CreateType()" />
          <Method Sig="instance struct TypeToken get_TypeToken()" />
          <Method Sig="instance class FieldBuilder get_UnderlyingField()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance struct Guid get_GUID()" />
          <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , [] struct ParameterModifier , class CultureInfo , [] string )" />
          <Method Sig="instance class Module get_Module()" />
          <Method Sig="instance class Assembly get_Assembly()" />
          <Method Sig="instance struct RuntimeTypeHandle get_TypeHandle()" />
          <Method Sig="instance string get_FullName()" />
          <Method Sig="instance string get_AssemblyQualifiedName()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance class Type get_BaseType()" />
          <Method Sig="instance [] class ConstructorInfo GetConstructors(struct BindingFlags )" />
          <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
          <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
          <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
          <Method Sig="instance class Type GetInterface(string , bool )" />
          <Method Sig="instance [] class Type GetInterfaces()" />
          <Method Sig="instance class EventInfo GetEvent(string , struct BindingFlags )" />
          <Method Sig="instance [] class EventInfo GetEvents()" />
          <Method Sig="instance [] class PropertyInfo GetProperties(struct BindingFlags )" />
          <Method Sig="instance [] class Type GetNestedTypes(struct BindingFlags )" />
          <Method Sig="instance class Type GetNestedType(string , struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMember(string , struct MemberTypes , struct BindingFlags )" />
          <Method Sig="instance [] class MemberInfo GetMembers(struct BindingFlags )" />
          <Method Sig="instance struct InterfaceMapping GetInterfaceMap(class Type )" />
          <Method Sig="instance [] class EventInfo GetEvents(struct BindingFlags )" />
          <Method Sig="instance class Type GetElementType()" />
          <Method Sig="instance class Type get_UnderlyingSystemType()" />
          <Method Sig="instance [] object GetCustomAttributes(bool )" />
          <Method Sig="instance [] object GetCustomAttributes(class Type , bool )" />
          <Method Sig="instance void SetCustomAttribute(class ConstructorInfo , [] byte )" />
          <Method Sig="instance void SetCustomAttribute(class CustomAttributeBuilder )" />
          <Method Sig="instance class Type get_DeclaringType()" />
          <Method Sig="instance class Type get_ReflectedType()" />
          <Method Sig="instance bool IsDefined(class Type , bool )" />
          <Method Sig="instance class Type MakePointerType()" />
          <Method Sig="instance class Type MakeByRefType()" />
          <Method Sig="instance class Type MakeArrayType()" />
          <Method Sig="instance class Type MakeArrayType(int )" />
        </Type>
        <Type Name="TypeToken">
          <Method Sig="instance int get_Token()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct TypeToken )" />
          <Method Sig="bool op_Equality(struct TypeToken , struct TypeToken )" />
          <Method Sig="bool op_Inequality(struct TypeToken , struct TypeToken )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="UnmanagedMarshal">
          <Method Sig="class UnmanagedMarshal DefineUnmanagedMarshal(struct UnmanagedType )" />
          <Method Sig="class UnmanagedMarshal DefineByValTStr(int )" />
          <Method Sig="class UnmanagedMarshal DefineSafeArray(struct UnmanagedType )" />
          <Method Sig="class UnmanagedMarshal DefineByValArray(int )" />
          <Method Sig="class UnmanagedMarshal DefineLPArray(struct UnmanagedType )" />
          <Method Sig="instance struct UnmanagedType get_GetUnmanagedType()" />
          <Method Sig="instance struct Guid get_IIDGuid()" />
          <Method Sig="instance int get_ElementCount()" />
          <Method Sig="instance struct UnmanagedType get_BaseType()" />
        </Type>
      </Namespace>
    </Namespace>
    <Type Name="DivideByZeroException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Double">
      <Method Sig="bool IsInfinity(double )" />
      <Method Sig="bool IsPositiveInfinity(double )" />
      <Method Sig="bool IsNegativeInfinity(double )" />
      <Method Sig="bool IsNaN(double )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(double )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(double )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="double Parse(string )" />
      <Method Sig="double Parse(string , struct NumberStyles )" />
      <Method Sig="double Parse(string , class IFormatProvider )" />
      <Method Sig="double Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; double )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; double )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="DuplicateWaitObjectException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="TypeLoadException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance string get_TypeName()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="EntryPointNotFoundException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="DllNotFoundException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Environment">
      <Method Sig="int get_TickCount()" />
      <Method Sig="void Exit(int )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_ExitCode()" />
      <Method Sig="void set_ExitCode(int )" />
      <Method Sig="void FailFast(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="string get_CommandLine()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="Path" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="string get_CurrentDirectory()" />
      <Method Sig="void set_CurrentDirectory(string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="string get_SystemDirectory()" />
      <Method Sig="string ExpandEnvironmentVariables(string )" />
      <Method Sig="string get_MachineName()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="int get_ProcessorCount()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="NUMBER_OF_PROCESSORS" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="[] string GetCommandLineArgs()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="Path" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="string GetEnvironmentVariable(string )" />
      <Method Sig="string GetEnvironmentVariable(string , struct EnvironmentVariableTarget )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class IDictionary GetEnvironmentVariables()" />
      <Method Sig="class IDictionary GetEnvironmentVariables(struct EnvironmentVariableTarget )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetEnvironmentVariable(string , string )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="void SetEnvironmentVariable(string , string , struct EnvironmentVariableTarget )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="[] string GetLogicalDrives()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="string get_NewLine()" />
      <Method Sig="class Version get_Version()" />
      <Method Sig="in64 get_WorkingSet()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="class OperatingSystem get_OSVersion()" />
      <Method Sig="string get_StackTrace()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="bool get_HasShutdownStarted()" />
      <Method Sig="string get_UserName()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="UserName" />
          </PermissionSet>
        </Demand>
      </Method>
      <Method Sig="bool get_UserInteractive()" />
      <Method Sig="string GetFolderPath(struct SpecialFolder )" />
      <Method Sig="string get_UserDomainName()">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="UserName;UserDomain" />
          </PermissionSet>
        </Demand>
      </Method>
    </Type>
    <Type Name="EventHandler">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(object , class EventArgs )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , class EventArgs , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="EventHandler`1">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(object , !0)" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , !0, class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="FieldAccessException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="FlagsAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="FormatException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="GC">
      <Method Sig="void AddMemoryPressure(in64 )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="void RemoveMemoryPressure(in64 )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="int GetGeneration(object )" />
      <Method Sig="void Collect(int )" />
      <Method Sig="void Collect()" />
      <Method Sig="int CollectionCount(int )" />
      <Method Sig="void KeepAlive(object )" />
      <Method Sig="int GetGeneration(class WeakReference )" />
      <Method Sig="int get_MaxGeneration()" />
      <Method Sig="void WaitForPendingFinalizers()" />
      <Method Sig="void SuppressFinalize(object )" />
      <Method Sig="void ReRegisterForFinalize(object )" />
      <Method Sig="in64 GetTotalMemory(bool )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Guid">
      <Method Sig="instance void .ctor([] byte )" />
      <Method Sig="instance void .ctor(uint , ushort , ushort , byte , byte , byte , byte , byte , byte , byte , byte )" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(int , short , short , [] byte )" />
      <Method Sig="instance void .ctor(int , short , short , byte , byte , byte , byte , byte , byte , byte , byte )" />
      <Method Sig="instance [] byte ToByteArray()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct Guid )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(struct Guid )" />
      <Method Sig="bool op_Equality(struct Guid , struct Guid )" />
      <Method Sig="bool op_Inequality(struct Guid , struct Guid )" />
      <Method Sig="struct Guid NewGuid()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="IndexOutOfRangeException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="InsufficientMemoryException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Int16">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(short )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(short )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="short Parse(string )" />
      <Method Sig="short Parse(string , struct NumberStyles )" />
      <Method Sig="short Parse(string , class IFormatProvider )" />
      <Method Sig="short Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; short )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; short )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="Int32">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(int )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(int )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="int Parse(string )" />
      <Method Sig="int Parse(string , struct NumberStyles )" />
      <Method Sig="int Parse(string , class IFormatProvider )" />
      <Method Sig="int Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; int )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; int )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="Int64">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(in64 )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(in64 )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="in64 Parse(string )" />
      <Method Sig="in64 Parse(string , struct NumberStyles )" />
      <Method Sig="in64 Parse(string , class IFormatProvider )" />
      <Method Sig="in64 Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; in64 )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; in64 )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="IntPtr">
      <Method Sig="instance void .ctor(int )" />
      <Method Sig="instance void .ctor(in64 )" />
      <Method Sig="instance void .ctor(* void )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance int ToInt32()" />
      <Method Sig="instance in64 ToInt64()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="intptr op_Explicit(int )" />
      <Method Sig="intptr op_Explicit(in64 )" />
      <Method Sig="intptr op_Explicit(* void )" />
      <Method Sig="* void op_Explicit(intptr )" />
      <Method Sig="int op_Explicit(intptr )" />
      <Method Sig="in64 op_Explicit(intptr )" />
      <Method Sig="bool op_Equality(intptr , intptr )" />
      <Method Sig="bool op_Inequality(intptr , intptr )" />
      <Method Sig="int get_Size()" />
      <Method Sig="instance * void ToPointer()" />
    </Type>
    <Type Name="InvalidCastException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , int )" />
    </Type>
    <Type Name="InvalidOperationException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="InvalidProgramException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="LocalDataStoreSlot">
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Math">
      <Method Sig="double Acos(double )" />
      <Method Sig="double Asin(double )" />
      <Method Sig="double Atan(double )" />
      <Method Sig="double Atan2(double , double )" />
      <Method Sig="struct Decimal Ceiling(struct Decimal )" />
      <Method Sig="double Ceiling(double )" />
      <Method Sig="double Cos(double )" />
      <Method Sig="double Cosh(double )" />
      <Method Sig="struct Decimal Floor(struct Decimal )" />
      <Method Sig="double Floor(double )" />
      <Method Sig="double Sin(double )" />
      <Method Sig="double Tan(double )" />
      <Method Sig="double Sinh(double )" />
      <Method Sig="double Tanh(double )" />
      <Method Sig="double Round(double )" />
      <Method Sig="double Round(double , int )" />
      <Method Sig="double Round(double , struct MidpointRounding )" />
      <Method Sig="double Round(double , int , struct MidpointRounding )" />
      <Method Sig="struct Decimal Round(struct Decimal )" />
      <Method Sig="struct Decimal Round(struct Decimal , int )" />
      <Method Sig="struct Decimal Round(struct Decimal , struct MidpointRounding )" />
      <Method Sig="struct Decimal Round(struct Decimal , int , struct MidpointRounding )" />
      <Method Sig="struct Decimal Truncate(struct Decimal )" />
      <Method Sig="double Truncate(double )" />
      <Method Sig="double Sqrt(double )" />
      <Method Sig="double Log(double )" />
      <Method Sig="double Log10(double )" />
      <Method Sig="double Exp(double )" />
      <Method Sig="double Pow(double , double )" />
      <Method Sig="double IEEERemainder(double , double )" />
      <Method Sig="sbyte Abs(sbyte )" />
      <Method Sig="short Abs(short )" />
      <Method Sig="int Abs(int )" />
      <Method Sig="in64 Abs(in64 )" />
      <Method Sig="float Abs(float )" />
      <Method Sig="double Abs(double )" />
      <Method Sig="struct Decimal Abs(struct Decimal )" />
      <Method Sig="sbyte Max(sbyte , sbyte )" />
      <Method Sig="byte Max(byte , byte )" />
      <Method Sig="short Max(short , short )" />
      <Method Sig="ushort Max(ushort , ushort )" />
      <Method Sig="int Max(int , int )" />
      <Method Sig="uint Max(uint , uint )" />
      <Method Sig="in64 Max(in64 , in64 )" />
      <Method Sig="uint64 Max(uint64 , uint64 )" />
      <Method Sig="float Max(float , float )" />
      <Method Sig="double Max(double , double )" />
      <Method Sig="struct Decimal Max(struct Decimal , struct Decimal )" />
      <Method Sig="sbyte Min(sbyte , sbyte )" />
      <Method Sig="byte Min(byte , byte )" />
      <Method Sig="short Min(short , short )" />
      <Method Sig="ushort Min(ushort , ushort )" />
      <Method Sig="int Min(int , int )" />
      <Method Sig="uint Min(uint , uint )" />
      <Method Sig="in64 Min(in64 , in64 )" />
      <Method Sig="uint64 Min(uint64 , uint64 )" />
      <Method Sig="float Min(float , float )" />
      <Method Sig="double Min(double , double )" />
      <Method Sig="struct Decimal Min(struct Decimal , struct Decimal )" />
      <Method Sig="double Log(double , double )" />
      <Method Sig="int Sign(sbyte )" />
      <Method Sig="int Sign(short )" />
      <Method Sig="int Sign(int )" />
      <Method Sig="int Sign(in64 )" />
      <Method Sig="int Sign(float )" />
      <Method Sig="int Sign(double )" />
      <Method Sig="int Sign(struct Decimal )" />
      <Method Sig="in64 BigMul(int , int )" />
      <Method Sig="int DivRem(int , int , &amp; int )" />
      <Method Sig="in64 DivRem(in64 , in64 , &amp; in64 )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="MethodAccessException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="MissingMemberException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="MissingFieldException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance void .ctor(string , string )" />
    </Type>
    <Type Name="MissingMethodException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance void .ctor(string , string )" />
    </Type>
    <Type Name="MulticastNotSupportedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="NonSerializedAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="NotFiniteNumberException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(double )" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , double )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance void .ctor(string , double , class Exception )" />
      <Method Sig="instance double get_OffendingNumber()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="NotImplementedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="NotSupportedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="NullReferenceException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="ObjectDisposedException">
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance string get_ObjectName()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="ObsoleteAttribute">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , bool )" />
      <Method Sig="instance string get_Message()" />
      <Method Sig="instance bool get_IsError()" />
    </Type>
    <Type Name="OperatingSystem">
      <Method Sig="instance void .ctor(struct PlatformID , class Version )" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance struct PlatformID get_Platform()" />
      <Method Sig="instance string get_ServicePack()" />
      <Method Sig="instance class Version get_Version()" />
      <Method Sig="instance object Clone()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string get_VersionString()" />
    </Type>
    <Type Name="OperationCanceledException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="OverflowException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="ParamArrayAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="PlatformNotSupportedException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Random">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(int )" />
      <Method Sig="instance int Next()" />
      <Method Sig="instance int Next(int , int )" />
      <Method Sig="instance int Next(int )" />
      <Method Sig="instance double NextDouble()" />
      <Method Sig="instance void NextBytes([] byte )" />
    </Type>
    <Type Name="RankException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="Type">
      <Method Sig="void .cctor()" />
      <Method Sig="instance struct MemberTypes get_MemberType()" />
      <Method Sig="instance class Type get_DeclaringType()" />
      <Method Sig="instance class MethodBase get_DeclaringMethod()" />
      <Method Sig="instance class Type get_ReflectedType()" />
      <Method Sig="instance class Type GetType()" />
      <Method Sig="class Type GetType(string , bool , bool )" />
      <Method Sig="class Type GetType(string , bool )" />
      <Method Sig="class Type GetType(string )" />
      <Method Sig="class Type ReflectionOnlyGetType(string , bool , bool )" />
      <Method Sig="instance class Type MakePointerType()" />
      <Method Sig="instance class StructLayoutAttribute get_StructLayoutAttribute()" />
      <Method Sig="instance class Type MakeByRefType()" />
      <Method Sig="instance class Type MakeArrayType()" />
      <Method Sig="instance class Type MakeArrayType(int )" />
      <Method Sig="class Type GetTypeFromProgID(string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="class Type GetTypeFromProgID(string , bool )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="class Type GetTypeFromProgID(string , string )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="class Type GetTypeFromProgID(string , string , bool )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="class Type GetTypeFromCLSID(struct Guid )" />
      <Method Sig="class Type GetTypeFromCLSID(struct Guid , bool )" />
      <Method Sig="class Type GetTypeFromCLSID(struct Guid , string )" />
      <Method Sig="class Type GetTypeFromCLSID(struct Guid , string , bool )" />
      <Method Sig="struct TypeCode GetTypeCode(class Type )" />
      <Method Sig="instance struct Guid get_GUID()" />
      <Method Sig="class Binder get_DefaultBinder()" />
      <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , [] struct ParameterModifier , class CultureInfo , [] string )" />
      <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object , class CultureInfo )" />
      <Method Sig="instance object InvokeMember(string , struct BindingFlags , class Binder , object , [] object )" />
      <Method Sig="instance class Module get_Module()" />
      <Method Sig="instance class Assembly get_Assembly()" />
      <Method Sig="instance struct RuntimeTypeHandle get_TypeHandle()" />
      <Method Sig="struct RuntimeTypeHandle GetTypeHandle(object )" />
      <Method Sig="class Type GetTypeFromHandle(struct RuntimeTypeHandle )" />
      <Method Sig="instance string get_FullName()" />
      <Method Sig="instance string get_Namespace()" />
      <Method Sig="instance string get_AssemblyQualifiedName()" />
      <Method Sig="instance int GetArrayRank()" />
      <Method Sig="instance class Type get_BaseType()" />
      <Method Sig="instance class ConstructorInfo GetConstructor(struct BindingFlags , class Binder , struct CallingConventions , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class ConstructorInfo GetConstructor(struct BindingFlags , class Binder , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class ConstructorInfo GetConstructor([] class Type )" />
      <Method Sig="instance [] class ConstructorInfo GetConstructors()" />
      <Method Sig="instance [] class ConstructorInfo GetConstructors(struct BindingFlags )" />
      <Method Sig="instance class ConstructorInfo get_TypeInitializer()" />
      <Method Sig="instance class MethodInfo GetMethod(string , struct BindingFlags , class Binder , struct CallingConventions , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class MethodInfo GetMethod(string , struct BindingFlags , class Binder , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class MethodInfo GetMethod(string , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class MethodInfo GetMethod(string , [] class Type )" />
      <Method Sig="instance class MethodInfo GetMethod(string , struct BindingFlags )" />
      <Method Sig="instance class MethodInfo GetMethod(string )" />
      <Method Sig="instance [] class MethodInfo GetMethods()" />
      <Method Sig="instance [] class MethodInfo GetMethods(struct BindingFlags )" />
      <Method Sig="instance class FieldInfo GetField(string , struct BindingFlags )" />
      <Method Sig="instance class FieldInfo GetField(string )" />
      <Method Sig="instance [] class FieldInfo GetFields()" />
      <Method Sig="instance [] class FieldInfo GetFields(struct BindingFlags )" />
      <Method Sig="instance class Type GetInterface(string )" />
      <Method Sig="instance class Type GetInterface(string , bool )" />
      <Method Sig="instance [] class Type GetInterfaces()" />
      <Method Sig="instance [] class Type FindInterfaces(class TypeFilter , object )" />
      <Method Sig="instance class EventInfo GetEvent(string )" />
      <Method Sig="instance class EventInfo GetEvent(string , struct BindingFlags )" />
      <Method Sig="instance [] class EventInfo GetEvents()" />
      <Method Sig="instance [] class EventInfo GetEvents(struct BindingFlags )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , struct BindingFlags , class Binder , class Type , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , class Type , [] class Type , [] struct ParameterModifier )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , struct BindingFlags )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , class Type , [] class Type )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , [] class Type )" />
      <Method Sig="instance class PropertyInfo GetProperty(string , class Type )" />
      <Method Sig="instance class PropertyInfo GetProperty(string )" />
      <Method Sig="instance [] class PropertyInfo GetProperties(struct BindingFlags )" />
      <Method Sig="instance [] class PropertyInfo GetProperties()" />
      <Method Sig="instance [] class Type GetNestedTypes()" />
      <Method Sig="instance [] class Type GetNestedTypes(struct BindingFlags )" />
      <Method Sig="instance class Type GetNestedType(string )" />
      <Method Sig="instance class Type GetNestedType(string , struct BindingFlags )" />
      <Method Sig="instance [] class MemberInfo GetMember(string )" />
      <Method Sig="instance [] class MemberInfo GetMember(string , struct BindingFlags )" />
      <Method Sig="instance [] class MemberInfo GetMember(string , struct MemberTypes , struct BindingFlags )" />
      <Method Sig="instance [] class MemberInfo GetMembers()" />
      <Method Sig="instance [] class MemberInfo GetMembers(struct BindingFlags )" />
      <Method Sig="instance [] class MemberInfo GetDefaultMembers()" />
      <Method Sig="instance [] class MemberInfo FindMembers(struct MemberTypes , struct BindingFlags , class MemberFilter , object )" />
      <Method Sig="instance bool get_IsNested()" />
      <Method Sig="instance struct TypeAttributes get_Attributes()" />
      <Method Sig="instance struct GenericParameterAttributes get_GenericParameterAttributes()" />
      <Method Sig="instance bool get_IsVisible()" />
      <Method Sig="instance bool get_IsNotPublic()" />
      <Method Sig="instance bool get_IsPublic()" />
      <Method Sig="instance bool get_IsNestedPublic()" />
      <Method Sig="instance bool get_IsNestedPrivate()" />
      <Method Sig="instance bool get_IsNestedFamily()" />
      <Method Sig="instance bool get_IsNestedAssembly()" />
      <Method Sig="instance bool get_IsNestedFamANDAssem()" />
      <Method Sig="instance bool get_IsNestedFamORAssem()" />
      <Method Sig="instance bool get_IsAutoLayout()" />
      <Method Sig="instance bool get_IsLayoutSequential()" />
      <Method Sig="instance bool get_IsExplicitLayout()" />
      <Method Sig="instance bool get_IsClass()" />
      <Method Sig="instance bool get_IsInterface()" />
      <Method Sig="instance bool get_IsValueType()" />
      <Method Sig="instance bool get_IsAbstract()" />
      <Method Sig="instance bool get_IsSealed()" />
      <Method Sig="instance bool get_IsEnum()" />
      <Method Sig="instance bool get_IsSpecialName()" />
      <Method Sig="instance bool get_IsImport()" />
      <Method Sig="instance bool get_IsSerializable()" />
      <Method Sig="instance bool get_IsAnsiClass()" />
      <Method Sig="instance bool get_IsUnicodeClass()" />
      <Method Sig="instance bool get_IsAutoClass()" />
      <Method Sig="instance bool get_IsArray()" />
      <Method Sig="instance bool get_IsGenericType()" />
      <Method Sig="instance bool get_IsGenericTypeDefinition()" />
      <Method Sig="instance bool get_IsGenericParameter()" />
      <Method Sig="instance int get_GenericParameterPosition()" />
      <Method Sig="instance bool get_ContainsGenericParameters()" />
      <Method Sig="instance [] class Type GetGenericParameterConstraints()" />
      <Method Sig="instance bool get_IsByRef()" />
      <Method Sig="instance bool get_IsPointer()" />
      <Method Sig="instance bool get_IsPrimitive()" />
      <Method Sig="instance bool get_IsCOMObject()" />
      <Method Sig="instance bool get_HasElementType()" />
      <Method Sig="instance bool get_IsContextful()" />
      <Method Sig="instance bool get_IsMarshalByRef()" />
      <Method Sig="instance class Type MakeGenericType([] class Type )" />
      <Method Sig="instance class Type GetElementType()" />
      <Method Sig="instance [] class Type GetGenericArguments()" />
      <Method Sig="instance class Type GetGenericTypeDefinition()" />
      <Method Sig="instance class Type get_UnderlyingSystemType()" />
      <Method Sig="instance bool IsSubclassOf(class Type )" />
      <Method Sig="instance bool IsInstanceOfType(object )" />
      <Method Sig="instance bool IsAssignableFrom(class Type )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="[] class Type GetTypeArray([] object )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(class Type )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance struct InterfaceMapping GetInterfaceMap(class Type )" />
    </Type>
    <Type Name="RuntimeTypeHandle">
      <Method Sig="bool op_Equality(struct RuntimeTypeHandle , object )" />
      <Method Sig="bool op_Equality(object , struct RuntimeTypeHandle )" />
      <Method Sig="bool op_Inequality(struct RuntimeTypeHandle , object )" />
      <Method Sig="bool op_Inequality(object , struct RuntimeTypeHandle )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct RuntimeTypeHandle )" />
      <Method Sig="instance intptr get_Value()" />
      <Method Sig="instance struct ModuleHandle GetModuleHandle()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="RuntimeMethodHandle">
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
      <Method Sig="instance intptr get_Value()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="bool op_Equality(struct RuntimeMethodHandle , struct RuntimeMethodHandle )" />
      <Method Sig="bool op_Inequality(struct RuntimeMethodHandle , struct RuntimeMethodHandle )" />
      <Method Sig="instance bool Equals(struct RuntimeMethodHandle )" />
      <Method Sig="instance intptr GetFunctionPointer()" />
    </Type>
    <Type Name="RuntimeFieldHandle">
      <Method Sig="instance intptr get_Value()" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct RuntimeFieldHandle )" />
      <Method Sig="bool op_Equality(struct RuntimeFieldHandle , struct RuntimeFieldHandle )" />
      <Method Sig="bool op_Inequality(struct RuntimeFieldHandle , struct RuntimeFieldHandle )" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
    </Type>
    <Type Name="ModuleHandle">
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct ModuleHandle )" />
      <Method Sig="bool op_Equality(struct ModuleHandle , struct ModuleHandle )" />
      <Method Sig="bool op_Inequality(struct ModuleHandle , struct ModuleHandle )" />
      <Method Sig="instance struct RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken(int )" />
      <Method Sig="instance struct RuntimeTypeHandle ResolveTypeHandle(int )" />
      <Method Sig="instance struct RuntimeTypeHandle ResolveTypeHandle(int , [] struct RuntimeTypeHandle , [] struct RuntimeTypeHandle )" />
      <Method Sig="instance struct RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken(int )" />
      <Method Sig="instance struct RuntimeMethodHandle ResolveMethodHandle(int )" />
      <Method Sig="instance struct RuntimeMethodHandle ResolveMethodHandle(int , [] struct RuntimeTypeHandle , [] struct RuntimeTypeHandle )" />
      <Method Sig="instance struct RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken(int )" />
      <Method Sig="instance struct RuntimeFieldHandle ResolveFieldHandle(int )" />
      <Method Sig="instance struct RuntimeFieldHandle ResolveFieldHandle(int , [] struct RuntimeTypeHandle , [] struct RuntimeTypeHandle )" />
      <Method Sig="instance int get_MDStreamVersion()" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="SByte">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(sbyte )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(sbyte )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="sbyte Parse(string )" />
      <Method Sig="sbyte Parse(string , struct NumberStyles )" />
      <Method Sig="sbyte Parse(string , class IFormatProvider )" />
      <Method Sig="sbyte Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; sbyte )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; sbyte )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="SerializableAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="Single">
      <Method Sig="bool IsInfinity(float )" />
      <Method Sig="bool IsPositiveInfinity(float )" />
      <Method Sig="bool IsNegativeInfinity(float )" />
      <Method Sig="bool IsNaN(float )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(float )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(float )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="float Parse(string )" />
      <Method Sig="float Parse(string , struct NumberStyles )" />
      <Method Sig="float Parse(string , class IFormatProvider )" />
      <Method Sig="float Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; float )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; float )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="TimeoutException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="TimeSpan">
      <Method Sig="instance void .ctor(in64 )" />
      <Method Sig="instance void .ctor(int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int , int , int )" />
      <Method Sig="instance in64 get_Ticks()" />
      <Method Sig="instance int get_Days()" />
      <Method Sig="instance int get_Hours()" />
      <Method Sig="instance int get_Milliseconds()" />
      <Method Sig="instance int get_Minutes()" />
      <Method Sig="instance int get_Seconds()" />
      <Method Sig="instance double get_TotalDays()" />
      <Method Sig="instance double get_TotalHours()" />
      <Method Sig="instance double get_TotalMilliseconds()" />
      <Method Sig="instance double get_TotalMinutes()" />
      <Method Sig="instance double get_TotalSeconds()" />
      <Method Sig="instance struct TimeSpan Add(struct TimeSpan )" />
      <Method Sig="int Compare(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(struct TimeSpan )" />
      <Method Sig="struct TimeSpan FromDays(double )" />
      <Method Sig="instance struct TimeSpan Duration()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(struct TimeSpan )" />
      <Method Sig="bool Equals(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="struct TimeSpan FromHours(double )" />
      <Method Sig="struct TimeSpan FromMilliseconds(double )" />
      <Method Sig="struct TimeSpan FromMinutes(double )" />
      <Method Sig="instance struct TimeSpan Negate()" />
      <Method Sig="struct TimeSpan Parse(string )" />
      <Method Sig="bool TryParse(string , &amp; struct TimeSpan )" />
      <Method Sig="struct TimeSpan FromSeconds(double )" />
      <Method Sig="instance struct TimeSpan Subtract(struct TimeSpan )" />
      <Method Sig="struct TimeSpan FromTicks(in64 )" />
      <Method Sig="instance string ToString()" />
      <Method Sig="struct TimeSpan op_UnaryNegation(struct TimeSpan )" />
      <Method Sig="struct TimeSpan op_Subtraction(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="struct TimeSpan op_UnaryPlus(struct TimeSpan )" />
      <Method Sig="struct TimeSpan op_Addition(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_Equality(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_Inequality(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_LessThan(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_LessThanOrEqual(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_GreaterThan(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="bool op_GreaterThanOrEqual(struct TimeSpan , struct TimeSpan )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="TypedReference">
      <Method Sig="typedbyref MakeTypedReference(object , [] class FieldInfo )">
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
          </PermissionSet>
        </LinkDemand>
      </Method>
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="object ToObject(typedbyref )" />
      <Method Sig="class Type GetTargetType(typedbyref )" />
      <Method Sig="struct RuntimeTypeHandle TargetTypeToken(typedbyref )" />
      <Method Sig="void SetTypedReference(typedbyref , object )" />
    </Type>
    <Type Name="TypeInitializationException">
      <Method Sig="instance void .ctor(string , class Exception )" />
      <Method Sig="instance string get_TypeName()" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
        <Demand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
          </PermissionSet>
        </Demand>
        <LinkDemand>
          <PermissionSet version="1" class="System.Security.PermissionSet">
            <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
          </PermissionSet>
        </LinkDemand>
      </Method>
    </Type>
    <Type Name="UInt16">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(ushort )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(ushort )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="ushort Parse(string )" />
      <Method Sig="ushort Parse(string , struct NumberStyles )" />
      <Method Sig="ushort Parse(string , class IFormatProvider )" />
      <Method Sig="ushort Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; ushort )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; ushort )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="UInt32">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(uint )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(uint )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="uint Parse(string )" />
      <Method Sig="uint Parse(string , struct NumberStyles )" />
      <Method Sig="uint Parse(string , class IFormatProvider )" />
      <Method Sig="uint Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; uint )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; uint )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="UInt64">
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(uint64 )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(uint64 )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(class IFormatProvider )" />
      <Method Sig="instance string ToString(string )" />
      <Method Sig="instance string ToString(string , class IFormatProvider )" />
      <Method Sig="uint64 Parse(string )" />
      <Method Sig="uint64 Parse(string , struct NumberStyles )" />
      <Method Sig="uint64 Parse(string , class IFormatProvider )" />
      <Method Sig="uint64 Parse(string , struct NumberStyles , class IFormatProvider )" />
      <Method Sig="bool TryParse(string , &amp; uint64 )" />
      <Method Sig="bool TryParse(string , struct NumberStyles , class IFormatProvider , &amp; uint64 )" />
      <Method Sig="instance struct TypeCode GetTypeCode()" />
    </Type>
    <Type Name="UIntPtr">
      <Method Sig="instance void .ctor(uint )" />
      <Method Sig="instance void .ctor(uint64 )" />
      <Method Sig="instance void .ctor(* void )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance uint ToUInt32()" />
      <Method Sig="instance uint64 ToUInt64()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="uintptr op_Explicit(uint )" />
      <Method Sig="uintptr op_Explicit(uint64 )" />
      <Method Sig="uint op_Explicit(uintptr )" />
      <Method Sig="uint64 op_Explicit(uintptr )" />
      <Method Sig="uintptr op_Explicit(* void )" />
      <Method Sig="* void op_Explicit(uintptr )" />
      <Method Sig="bool op_Equality(uintptr , uintptr )" />
      <Method Sig="bool op_Inequality(uintptr , uintptr )" />
      <Method Sig="int get_Size()" />
      <Method Sig="instance * void ToPointer()" />
    </Type>
    <Type Name="UnauthorizedAccessException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , class Exception )" />
    </Type>
    <Type Name="UnhandledExceptionEventArgs">
      <Method Sig="instance void .ctor(object , bool )" />
      <Method Sig="instance object get_ExceptionObject()" />
      <Method Sig="instance bool get_IsTerminating()" />
    </Type>
    <Type Name="UnhandledExceptionEventHandler">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(object , class UnhandledExceptionEventArgs )" />
      <Method Sig="instance class IAsyncResult BeginInvoke(object , class UnhandledExceptionEventArgs , class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="Version">
      <Method Sig="instance void .ctor(int , int , int , int )" />
      <Method Sig="instance void .ctor(int , int , int )" />
      <Method Sig="instance void .ctor(int , int )" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance int get_Major()" />
      <Method Sig="instance int get_Minor()" />
      <Method Sig="instance int get_Build()" />
      <Method Sig="instance int get_Revision()" />
      <Method Sig="instance short get_MajorRevision()" />
      <Method Sig="instance short get_MinorRevision()" />
      <Method Sig="instance object Clone()" />
      <Method Sig="instance int CompareTo(object )" />
      <Method Sig="instance int CompareTo(class Version )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance bool Equals(class Version )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="instance string ToString(int )" />
      <Method Sig="bool op_Equality(class Version , class Version )" />
      <Method Sig="bool op_Inequality(class Version , class Version )" />
      <Method Sig="bool op_LessThan(class Version , class Version )" />
      <Method Sig="bool op_LessThanOrEqual(class Version , class Version )" />
      <Method Sig="bool op_GreaterThan(class Version , class Version )" />
      <Method Sig="bool op_GreaterThanOrEqual(class Version , class Version )" />
    </Type>
    <Type Name="WeakReference">
      <Method Sig="instance void .ctor(object )" />
      <Method Sig="instance void .ctor(object , bool )" />
      <Method Sig="instance bool get_IsAlive()" />
      <Method Sig="instance bool get_TrackResurrection()" />
      <Method Sig="instance object get_Target()" />
      <Method Sig="instance void set_Target(object )" />
      <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
    </Type>
    <Namespace Name="Threading">
      <Type Name="AbandonedMutexException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(int , class WaitHandle )" />
        <Method Sig="instance void .ctor(string , int , class WaitHandle )" />
        <Method Sig="instance void .ctor(string , class Exception , int , class WaitHandle )" />
        <Method Sig="instance class Mutex get_Mutex()" />
        <Method Sig="instance int get_MutexIndex()" />
      </Type>
      <Type Name="WaitHandle">
        <Method Sig="instance intptr get_Handle()" />
        <Method Sig="instance void set_Handle(intptr )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class SafeWaitHandle get_SafeWaitHandle()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_SafeWaitHandle(class SafeWaitHandle )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance bool WaitOne(int , bool )" />
        <Method Sig="instance bool WaitOne(struct TimeSpan , bool )" />
        <Method Sig="instance bool WaitOne()" />
        <Method Sig="bool WaitAll([] class WaitHandle , int , bool )" />
        <Method Sig="bool WaitAll([] class WaitHandle , struct TimeSpan , bool )" />
        <Method Sig="bool WaitAll([] class WaitHandle )" />
        <Method Sig="int WaitAny([] class WaitHandle , int , bool )" />
        <Method Sig="int WaitAny([] class WaitHandle , struct TimeSpan , bool )" />
        <Method Sig="int WaitAny([] class WaitHandle )" />
        <Method Sig="bool SignalAndWait(class WaitHandle , class WaitHandle )" />
        <Method Sig="bool SignalAndWait(class WaitHandle , class WaitHandle , struct TimeSpan , bool )" />
        <Method Sig="bool SignalAndWait(class WaitHandle , class WaitHandle , int , bool )" />
        <Method Sig="instance void Close()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="EventWaitHandle">
        <Method Sig="instance void .ctor(bool , struct EventResetMode )" />
        <Method Sig="instance void .ctor(bool , struct EventResetMode , string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(bool , struct EventResetMode , string , &amp; bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(bool , struct EventResetMode , string , &amp; bool , class EventWaitHandleSecurity )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class EventWaitHandle OpenExisting(string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class EventWaitHandle OpenExisting(string , struct EventWaitHandleRights )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance bool Reset()" />
        <Method Sig="instance bool Set()" />
        <Method Sig="instance class EventWaitHandleSecurity GetAccessControl()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetAccessControl(class EventWaitHandleSecurity )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="AutoResetEvent">
        <Method Sig="instance void .ctor(bool )" />
      </Type>
      <Type Name="SendOrPostCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SynchronizationContext">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool IsWaitNotificationRequired()" />
        <Method Sig="instance void Send(class SendOrPostCallback , object )" />
        <Method Sig="instance void Post(class SendOrPostCallback , object )" />
        <Method Sig="instance void OperationStarted()" />
        <Method Sig="instance void OperationCompleted()" />
        <Method Sig="instance int Wait([] intptr , bool , int )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void SetSynchronizationContext(class SynchronizationContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class SynchronizationContext get_Current()" />
        <Method Sig="instance class SynchronizationContext CreateCopy()" />
      </Type>
      <Type Name="CompressedStack">
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class CompressedStack GetCompressedStack()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              <IPermission PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class CompressedStack Capture()" />
        <Method Sig="void Run(class CompressedStack , class ContextCallback , object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class CompressedStack CreateCopy()" />
      </Type>
      <Type Name="AsyncFlowControl">
        <Method Sig="instance void Undo()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance bool Equals(struct AsyncFlowControl )" />
        <Method Sig="bool op_Equality(struct AsyncFlowControl , struct AsyncFlowControl )" />
        <Method Sig="bool op_Inequality(struct AsyncFlowControl , struct AsyncFlowControl )" />
      </Type>
      <Type Name="ContextCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ExecutionContext">
        <Method Sig="void Run(class ExecutionContext , class ContextCallback , object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class ExecutionContext CreateCopy()" />
        <Method Sig="struct AsyncFlowControl SuppressFlow()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void RestoreFlow()" />
        <Method Sig="bool IsFlowSuppressed()" />
        <Method Sig="class ExecutionContext Capture()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="Interlocked">
        <Method Sig="int Increment(&amp; int )" />
        <Method Sig="in64 Increment(&amp; in64 )" />
        <Method Sig="int Decrement(&amp; int )" />
        <Method Sig="in64 Decrement(&amp; in64 )" />
        <Method Sig="int Exchange(&amp; int , int )" />
        <Method Sig="in64 Exchange(&amp; in64 , in64 )" />
        <Method Sig="float Exchange(&amp; float , float )" />
        <Method Sig="double Exchange(&amp; double , double )" />
        <Method Sig="object Exchange(&amp; object , object )" />
        <Method Sig="intptr Exchange(&amp; intptr , intptr )" />
        <Method Sig=" &lt;1&gt; !!0 Exchange(&amp; !!0, !!0)" />
        <Method Sig="int CompareExchange(&amp; int , int , int )" />
        <Method Sig="in64 CompareExchange(&amp; in64 , in64 , in64 )" />
        <Method Sig="float CompareExchange(&amp; float , float , float )" />
        <Method Sig="double CompareExchange(&amp; double , double , double )" />
        <Method Sig="object CompareExchange(&amp; object , object , object )" />
        <Method Sig="intptr CompareExchange(&amp; intptr , intptr , intptr )" />
        <Method Sig=" &lt;1&gt; !!0 CompareExchange(&amp; !!0, !!0, !!0)" />
        <Method Sig="int Add(&amp; int , int )" />
        <Method Sig="in64 Add(&amp; in64 , in64 )" />
        <Method Sig="in64 Read(&amp; in64 )" />
      </Type>
      <Type Name="HostExecutionContext">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance class HostExecutionContext CreateCopy()" />
      </Type>
      <Type Name="HostExecutionContextManager">
        <Method Sig="instance class HostExecutionContext Capture()" />
        <Method Sig="instance object SetHostExecutionContext(class HostExecutionContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Revert(object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="LockCookie">
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance bool Equals(struct LockCookie )" />
        <Method Sig="bool op_Equality(struct LockCookie , struct LockCookie )" />
        <Method Sig="bool op_Inequality(struct LockCookie , struct LockCookie )" />
      </Type>
      <Type Name="ManualResetEvent">
        <Method Sig="instance void .ctor(bool )" />
      </Type>
      <Type Name="Monitor">
        <Method Sig="void Enter(object )" />
        <Method Sig="void Exit(object )" />
        <Method Sig="bool TryEnter(object )" />
        <Method Sig="bool TryEnter(object , int )" />
        <Method Sig="bool TryEnter(object , struct TimeSpan )" />
        <Method Sig="bool Wait(object , int , bool )" />
        <Method Sig="bool Wait(object , struct TimeSpan , bool )" />
        <Method Sig="bool Wait(object , int )" />
        <Method Sig="bool Wait(object , struct TimeSpan )" />
        <Method Sig="bool Wait(object )" />
        <Method Sig="void Pulse(object )" />
        <Method Sig="void PulseAll(object )" />
      </Type>
      <Type Name="Mutex">
        <Method Sig="instance void .ctor(bool , string , &amp; bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(bool , string , &amp; bool , class MutexSecurity )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(bool , string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="class Mutex OpenExisting(string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Mutex OpenExisting(string , struct MutexRights )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void ReleaseMutex()" />
        <Method Sig="instance class MutexSecurity GetAccessControl()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetAccessControl(class MutexSecurity )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="Overlapped">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int , int , intptr , class IAsyncResult )" />
        <Method Sig="instance void .ctor(int , int , int , class IAsyncResult )" />
        <Method Sig="instance class IAsyncResult get_AsyncResult()" />
        <Method Sig="instance void set_AsyncResult(class IAsyncResult )" />
        <Method Sig="instance int get_OffsetLow()" />
        <Method Sig="instance void set_OffsetLow(int )" />
        <Method Sig="instance int get_OffsetHigh()" />
        <Method Sig="instance void set_OffsetHigh(int )" />
        <Method Sig="instance int get_EventHandle()" />
        <Method Sig="instance void set_EventHandle(int )" />
        <Method Sig="instance intptr get_EventHandleIntPtr()" />
        <Method Sig="instance void set_EventHandleIntPtr(intptr )" />
        <Method Sig="instance * struct NativeOverlapped Pack(class IOCompletionCallback )" />
        <Method Sig="instance * struct NativeOverlapped Pack(class IOCompletionCallback , object )" />
        <Method Sig="instance * struct NativeOverlapped UnsafePack(class IOCompletionCallback )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance * struct NativeOverlapped UnsafePack(class IOCompletionCallback , object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Overlapped Unpack(* struct NativeOverlapped )" />
        <Method Sig="void Free(* struct NativeOverlapped )" />
      </Type>
      <Type Name="ParameterizedThreadStart">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ReaderWriterLock">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_IsReaderLockHeld()" />
        <Method Sig="instance bool get_IsWriterLockHeld()" />
        <Method Sig="instance int get_WriterSeqNum()" />
        <Method Sig="instance void AcquireReaderLock(int )" />
        <Method Sig="instance void AcquireReaderLock(struct TimeSpan )" />
        <Method Sig="instance void AcquireWriterLock(int )" />
        <Method Sig="instance void AcquireWriterLock(struct TimeSpan )" />
        <Method Sig="instance void ReleaseReaderLock()" />
        <Method Sig="instance void ReleaseWriterLock()" />
        <Method Sig="instance struct LockCookie UpgradeToWriterLock(int )" />
        <Method Sig="instance struct LockCookie UpgradeToWriterLock(struct TimeSpan )" />
        <Method Sig="instance void DowngradeFromWriterLock(&amp; struct LockCookie )" />
        <Method Sig="instance struct LockCookie ReleaseLock()" />
        <Method Sig="instance void RestoreLock(&amp; struct LockCookie )" />
        <Method Sig="instance bool AnyWritersSince(int )" />
      </Type>
      <Type Name="SynchronizationLockException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="Thread">
        <Method Sig="instance void .ctor(class ThreadStart )" />
        <Method Sig="instance void .ctor(class ThreadStart , int )" />
        <Method Sig="instance void .ctor(class ParameterizedThreadStart )" />
        <Method Sig="instance void .ctor(class ParameterizedThreadStart , int )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance int get_ManagedThreadId()" />
        <Method Sig="instance void Start()" />
        <Method Sig="instance void Start(object )" />
        <Method Sig="instance class ExecutionContext get_ExecutionContext()" />
        <Method Sig="instance void SetCompressedStack(class CompressedStack )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              <IPermission PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class CompressedStack GetCompressedStack()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              <IPermission PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Abort(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void ResetAbort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Suspend()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Resume()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Interrupt()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct ThreadPriority get_Priority()" />
        <Method Sig="instance void set_Priority(struct ThreadPriority )" />
        <Method Sig="instance bool get_IsAlive()" />
        <Method Sig="instance bool get_IsThreadPoolThread()" />
        <Method Sig="instance void Join()" />
        <Method Sig="instance bool Join(int )" />
        <Method Sig="instance bool Join(struct TimeSpan )" />
        <Method Sig="void Sleep(int )" />
        <Method Sig="void Sleep(struct TimeSpan )" />
        <Method Sig="void SpinWait(int )" />
        <Method Sig="class Thread get_CurrentThread()" />
        <Method Sig="instance bool get_IsBackground()" />
        <Method Sig="instance void set_IsBackground(bool )" />
        <Method Sig="instance struct ThreadState get_ThreadState()" />
        <Method Sig="instance struct ApartmentState get_ApartmentState()" />
        <Method Sig="instance void set_ApartmentState(struct ApartmentState )" />
        <Method Sig="instance struct ApartmentState GetApartmentState()" />
        <Method Sig="instance bool TrySetApartmentState(struct ApartmentState )" />
        <Method Sig="instance void SetApartmentState(struct ApartmentState )" />
        <Method Sig="class LocalDataStoreSlot AllocateDataSlot()" />
        <Method Sig="class LocalDataStoreSlot AllocateNamedDataSlot(string )" />
        <Method Sig="class LocalDataStoreSlot GetNamedDataSlot(string )" />
        <Method Sig="void FreeNamedDataSlot(string )" />
        <Method Sig="object GetData(class LocalDataStoreSlot )" />
        <Method Sig="void SetData(class LocalDataStoreSlot , object )" />
        <Method Sig="instance class CultureInfo get_CurrentUICulture()" />
        <Method Sig="instance void set_CurrentUICulture(class CultureInfo )" />
        <Method Sig="instance class CultureInfo get_CurrentCulture()" />
        <Method Sig="instance void set_CurrentCulture(class CultureInfo )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Context get_CurrentContext()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class IPrincipal get_CurrentPrincipal()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_CurrentPrincipal(class IPrincipal )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class AppDomain GetDomain()" />
        <Method Sig="int GetDomainID()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="void BeginCriticalRegion()" />
        <Method Sig="void EndCriticalRegion()" />
        <Method Sig="void BeginThreadAffinity()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void EndThreadAffinity()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="byte VolatileRead(&amp; byte )" />
        <Method Sig="short VolatileRead(&amp; short )" />
        <Method Sig="int VolatileRead(&amp; int )" />
        <Method Sig="in64 VolatileRead(&amp; in64 )" />
        <Method Sig="sbyte VolatileRead(&amp; sbyte )" />
        <Method Sig="ushort VolatileRead(&amp; ushort )" />
        <Method Sig="uint VolatileRead(&amp; uint )" />
        <Method Sig="intptr VolatileRead(&amp; intptr )" />
        <Method Sig="uintptr VolatileRead(&amp; uintptr )" />
        <Method Sig="uint64 VolatileRead(&amp; uint64 )" />
        <Method Sig="float VolatileRead(&amp; float )" />
        <Method Sig="double VolatileRead(&amp; double )" />
        <Method Sig="object VolatileRead(&amp; object )" />
        <Method Sig="void VolatileWrite(&amp; byte , byte )" />
        <Method Sig="void VolatileWrite(&amp; short , short )" />
        <Method Sig="void VolatileWrite(&amp; int , int )" />
        <Method Sig="void VolatileWrite(&amp; in64 , in64 )" />
        <Method Sig="void VolatileWrite(&amp; sbyte , sbyte )" />
        <Method Sig="void VolatileWrite(&amp; ushort , ushort )" />
        <Method Sig="void VolatileWrite(&amp; uint , uint )" />
        <Method Sig="void VolatileWrite(&amp; intptr , intptr )" />
        <Method Sig="void VolatileWrite(&amp; uintptr , uintptr )" />
        <Method Sig="void VolatileWrite(&amp; uint64 , uint64 )" />
        <Method Sig="void VolatileWrite(&amp; float , float )" />
        <Method Sig="void VolatileWrite(&amp; double , double )" />
        <Method Sig="void VolatileWrite(&amp; object , object )" />
        <Method Sig="void MemoryBarrier()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ThreadAbortException">
        <Method Sig="instance object get_ExceptionState()" />
      </Type>
      <Type Name="ThreadInterruptedException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="RegisteredWaitHandle">
        <Method Sig="instance bool Unregister(class WaitHandle )" />
      </Type>
      <Type Name="WaitCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="WaitOrTimerCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , bool )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , bool , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="IOCompletionCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(uint , uint , * struct NativeOverlapped )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(uint , uint , * struct NativeOverlapped , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ThreadPool">
        <Method Sig="bool SetMaxThreads(int , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void GetMaxThreads(&amp; int , &amp; int )" />
        <Method Sig="bool SetMinThreads(int , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlThread" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void GetMinThreads(&amp; int , &amp; int )" />
        <Method Sig="void GetAvailableThreads(&amp; int , &amp; int )" />
        <Method Sig="class RegisteredWaitHandle RegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , uint , bool )" />
        <Method Sig="class RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , uint , bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class RegisteredWaitHandle RegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , int , bool )" />
        <Method Sig="class RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , int , bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class RegisteredWaitHandle RegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , in64 , bool )" />
        <Method Sig="class RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , in64 , bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class RegisteredWaitHandle RegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , struct TimeSpan , bool )" />
        <Method Sig="class RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class WaitHandle , class WaitOrTimerCallback , object , struct TimeSpan , bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="bool QueueUserWorkItem(class WaitCallback , object )" />
        <Method Sig="bool QueueUserWorkItem(class WaitCallback )" />
        <Method Sig="bool UnsafeQueueUserWorkItem(class WaitCallback , object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="bool UnsafeQueueNativeOverlapped(* struct NativeOverlapped )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="bool BindHandle(intptr )" />
        <Method Sig="bool BindHandle(class SafeHandle )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ThreadStart">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke()" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ThreadStateException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="TimerCallback">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="Timer">
        <Method Sig="instance void .ctor(class TimerCallback , object , int , int )" />
        <Method Sig="instance void .ctor(class TimerCallback , object , struct TimeSpan , struct TimeSpan )" />
        <Method Sig="instance void .ctor(class TimerCallback , object , uint , uint )" />
        <Method Sig="instance void .ctor(class TimerCallback , object , in64 , in64 )" />
        <Method Sig="instance void .ctor(class TimerCallback )" />
        <Method Sig="instance bool Change(int , int )" />
        <Method Sig="instance bool Change(struct TimeSpan , struct TimeSpan )" />
        <Method Sig="instance bool Change(uint , uint )" />
        <Method Sig="instance bool Change(in64 , in64 )" />
        <Method Sig="instance bool Dispose(class WaitHandle )" />
        <Method Sig="instance void Dispose()" />
      </Type>
      <Type Name="WaitHandleCannotBeOpenedException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
    </Namespace>
    <Type Name="ThreadStaticAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="STAThreadAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="MTAThreadAttribute">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Namespace Name="Collections">
      <Type Name="ArrayList">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(class ICollection )" />
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsFixedSize()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance object get_Item(int )" />
        <Method Sig="instance void set_Item(int , object )" />
        <Method Sig="class ArrayList Adapter(class IList )" />
        <Method Sig="instance int Add(object )" />
        <Method Sig="instance void AddRange(class ICollection )" />
        <Method Sig="instance int BinarySearch(int , int , object , class IComparer )" />
        <Method Sig="instance int BinarySearch(object )" />
        <Method Sig="instance int BinarySearch(object , class IComparer )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance void CopyTo(class Array )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance void CopyTo(int , class Array , int , int )" />
        <Method Sig="class IList FixedSize(class IList )" />
        <Method Sig="class ArrayList FixedSize(class ArrayList )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance class IEnumerator GetEnumerator(int , int )" />
        <Method Sig="instance int IndexOf(object )" />
        <Method Sig="instance int IndexOf(object , int )" />
        <Method Sig="instance int IndexOf(object , int , int )" />
        <Method Sig="instance void Insert(int , object )" />
        <Method Sig="instance void InsertRange(int , class ICollection )" />
        <Method Sig="instance int LastIndexOf(object )" />
        <Method Sig="instance int LastIndexOf(object , int )" />
        <Method Sig="instance int LastIndexOf(object , int , int )" />
        <Method Sig="class IList ReadOnly(class IList )" />
        <Method Sig="class ArrayList ReadOnly(class ArrayList )" />
        <Method Sig="instance void Remove(object )" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance void RemoveRange(int , int )" />
        <Method Sig="class ArrayList Repeat(object , int )" />
        <Method Sig="instance void Reverse()" />
        <Method Sig="instance void Reverse(int , int )" />
        <Method Sig="instance void SetRange(int , class ICollection )" />
        <Method Sig="instance class ArrayList GetRange(int , int )" />
        <Method Sig="instance void Sort()" />
        <Method Sig="instance void Sort(class IComparer )" />
        <Method Sig="instance void Sort(int , int , class IComparer )" />
        <Method Sig="class IList Synchronized(class IList )" />
        <Method Sig="class ArrayList Synchronized(class ArrayList )" />
        <Method Sig="instance [] object ToArray()" />
        <Method Sig="instance class Array ToArray(class Type )" />
        <Method Sig="instance void TrimToSize()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BitArray">
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , bool )" />
        <Method Sig="instance void .ctor([] byte )" />
        <Method Sig="instance void .ctor([] bool )" />
        <Method Sig="instance void .ctor([] int )" />
        <Method Sig="instance void .ctor(class BitArray )" />
        <Method Sig="instance bool get_Item(int )" />
        <Method Sig="instance void set_Item(int , bool )" />
        <Method Sig="instance bool Get(int )" />
        <Method Sig="instance void Set(int , bool )" />
        <Method Sig="instance void SetAll(bool )" />
        <Method Sig="instance class BitArray And(class BitArray )" />
        <Method Sig="instance class BitArray Or(class BitArray )" />
        <Method Sig="instance class BitArray Xor(class BitArray )" />
        <Method Sig="instance class BitArray Not()" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance void set_Length(int )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="CaseInsensitiveComparer">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CultureInfo )" />
        <Method Sig="class CaseInsensitiveComparer get_Default()" />
        <Method Sig="class CaseInsensitiveComparer get_DefaultInvariant()" />
        <Method Sig="instance int Compare(object , object )" />
      </Type>
      <Type Name="CaseInsensitiveHashCodeProvider">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CultureInfo )" />
        <Method Sig="class CaseInsensitiveHashCodeProvider get_Default()" />
        <Method Sig="class CaseInsensitiveHashCodeProvider get_DefaultInvariant()" />
        <Method Sig="instance int GetHashCode(object )" />
      </Type>
      <Type Name="CollectionBase">
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="Comparer">
        <Method Sig="instance void .ctor(class CultureInfo )" />
        <Method Sig="instance int Compare(object , object )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DictionaryBase">
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
      </Type>
      <Type Name="DictionaryEntry">
        <Method Sig="instance void .ctor(object , object )" />
        <Method Sig="instance object get_Key()" />
        <Method Sig="instance void set_Key(object )" />
        <Method Sig="instance object get_Value()" />
        <Method Sig="instance void set_Value(object )" />
      </Type>
      <Type Name="Hashtable">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , float )" />
        <Method Sig="instance void .ctor(int , float , class IHashCodeProvider , class IComparer )" />
        <Method Sig="instance void .ctor(int , float , class IEqualityComparer )" />
        <Method Sig="instance void .ctor(class IHashCodeProvider , class IComparer )" />
        <Method Sig="instance void .ctor(class IEqualityComparer )" />
        <Method Sig="instance void .ctor(int , class IHashCodeProvider , class IComparer )" />
        <Method Sig="instance void .ctor(int , class IEqualityComparer )" />
        <Method Sig="instance void .ctor(class IDictionary )" />
        <Method Sig="instance void .ctor(class IDictionary , float )" />
        <Method Sig="instance void .ctor(class IDictionary , class IHashCodeProvider , class IComparer )" />
        <Method Sig="instance void .ctor(class IDictionary , class IEqualityComparer )" />
        <Method Sig="instance void .ctor(class IDictionary , float , class IHashCodeProvider , class IComparer )" />
        <Method Sig="instance void .ctor(class IDictionary , float , class IEqualityComparer )" />
        <Method Sig="instance void Add(object , object )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance bool ContainsKey(object )" />
        <Method Sig="instance bool ContainsValue(object )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance object get_Item(object )" />
        <Method Sig="instance void set_Item(object , object )" />
        <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool get_IsFixedSize()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance class ICollection get_Keys()" />
        <Method Sig="instance class ICollection get_Values()" />
        <Method Sig="instance void Remove(object )" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="class Hashtable Synchronized(class Hashtable )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )" />
        <Method Sig="instance void OnDeserialization(object )" />
      </Type>
      <Type Name="Queue">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , float )" />
        <Method Sig="instance void .ctor(class ICollection )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance void Enqueue(object )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance object Dequeue()" />
        <Method Sig="instance object Peek()" />
        <Method Sig="class Queue Synchronized(class Queue )" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance [] object ToArray()" />
        <Method Sig="instance void TrimToSize()" />
      </Type>
      <Type Name="ReadOnlyCollectionBase">
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="SortedList">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(class IComparer )" />
        <Method Sig="instance void .ctor(class IComparer , int )" />
        <Method Sig="instance void .ctor(class IDictionary )" />
        <Method Sig="instance void .ctor(class IDictionary , class IComparer )" />
        <Method Sig="instance void Add(object , object )" />
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class ICollection get_Keys()" />
        <Method Sig="instance class ICollection get_Values()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool get_IsFixedSize()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance bool ContainsKey(object )" />
        <Method Sig="instance bool ContainsValue(object )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance object GetByIndex(int )" />
        <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
        <Method Sig="instance object GetKey(int )" />
        <Method Sig="instance class IList GetKeyList()" />
        <Method Sig="instance class IList GetValueList()" />
        <Method Sig="instance object get_Item(object )" />
        <Method Sig="instance void set_Item(object , object )" />
        <Method Sig="instance int IndexOfKey(object )" />
        <Method Sig="instance int IndexOfValue(object )" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance void Remove(object )" />
        <Method Sig="instance void SetByIndex(int , object )" />
        <Method Sig="class SortedList Synchronized(class SortedList )" />
        <Method Sig="instance void TrimToSize()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Stack">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(class ICollection )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance object Peek()" />
        <Method Sig="instance object Pop()" />
        <Method Sig="instance void Push(object )" />
        <Method Sig="class Stack Synchronized(class Stack )" />
        <Method Sig="instance [] object ToArray()" />
      </Type>
      <Namespace Name="Generic">
        <Type Name="Comparer`1">
          <Method Sig="get_Default()" />
          <Method Sig="instance int Compare(!0, !0)" />
        </Type>
        <Type Name="Dictionary`2">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int , )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(, class IDictionary`2 )" />
          <Method Sig="instance get_Comparer()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance get_Keys()" />
          <Method Sig="instance get_Values()" />
          <Method Sig="instance !1 get_Item(!0)" />
          <Method Sig="instance void set_Item(!0, !1)" />
          <Method Sig="instance void Add(!0, !1)" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool ContainsKey(!0)" />
          <Method Sig="instance bool ContainsValue(!1)" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void OnDeserialization(object )" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance bool TryGetValue(!0, &amp; !1)" />
        </Type>
        <Type Name="EqualityComparer`1">
          <Method Sig="get_Default()" />
          <Method Sig="instance bool Equals(!0, !0)" />
          <Method Sig="instance int GetHashCode(!0)" />
        </Type>
        <Type Name="KeyNotFoundException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="KeyValuePair`2">
          <Method Sig="instance void .ctor(!0, !1)" />
          <Method Sig="instance !0 get_Key()" />
          <Method Sig="instance !1 get_Value()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="List`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Capacity()" />
          <Method Sig="instance void set_Capacity(int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance !0 get_Item(int )" />
          <Method Sig="instance void set_Item(int , !0)" />
          <Method Sig="instance void Add(!0)" />
          <Method Sig="instance void AddRange()" />
          <Method Sig="instance AsReadOnly()" />
          <Method Sig="instance int BinarySearch(int , int , !0, )" />
          <Method Sig="instance int BinarySearch(!0)" />
          <Method Sig="instance int BinarySearch(!0, )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance  &lt;1&gt; ConvertAll(class List`1 )" />
          <Method Sig="instance void CopyTo([] !0)" />
          <Method Sig="instance void CopyTo(int , [] !0, int , int )" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance bool Exists()" />
          <Method Sig="instance !0 Find()" />
          <Method Sig="instance FindAll(class List`1 )" />
          <Method Sig="instance int FindIndex()" />
          <Method Sig="instance int FindIndex(int , )" />
          <Method Sig="instance int FindIndex(int , int , )" />
          <Method Sig="instance !0 FindLast()" />
          <Method Sig="instance int FindLastIndex()" />
          <Method Sig="instance int FindLastIndex(int , )" />
          <Method Sig="instance int FindLastIndex(int , int , )" />
          <Method Sig="instance void ForEach()" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance GetRange(class List`1 , void )" />
          <Method Sig="instance int IndexOf(!0)" />
          <Method Sig="instance int IndexOf(!0, int )" />
          <Method Sig="instance int IndexOf(!0, int , int )" />
          <Method Sig="instance void Insert(int , !0)" />
          <Method Sig="instance void InsertRange(int , )" />
          <Method Sig="instance int LastIndexOf(!0)" />
          <Method Sig="instance int LastIndexOf(!0, int )" />
          <Method Sig="instance int LastIndexOf(!0, int , int )" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance int RemoveAll()" />
          <Method Sig="instance void RemoveAt(int )" />
          <Method Sig="instance void RemoveRange(int , int )" />
          <Method Sig="instance void Reverse()" />
          <Method Sig="instance void Reverse(int , int )" />
          <Method Sig="instance void Sort()" />
          <Method Sig="instance void Sort()" />
          <Method Sig="instance void Sort(int , int , )" />
          <Method Sig="instance void Sort()" />
          <Method Sig="instance [] !0 ToArray()" />
          <Method Sig="instance void TrimExcess()" />
          <Method Sig="instance bool TrueForAll()" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
      <Namespace Name="ObjectModel">
        <Type Name="Collection`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance !0 get_Item(int )" />
          <Method Sig="instance void set_Item(int , !0)" />
          <Method Sig="instance void Add(!0)" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance int IndexOf(!0)" />
          <Method Sig="instance void Insert(int , !0)" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance void RemoveAt(int )" />
        </Type>
        <Type Name="ReadOnlyCollection`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance !0 get_Item(int )" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance int IndexOf(!0)" />
        </Type>
        <Type Name="KeyedCollection`2">
          <Method Sig="instance get_Comparer()" />
          <Method Sig="instance !1 get_Item(!0)" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance bool Remove(!0)" />
        </Type>
      </Namespace>
    </Namespace>
    <Type Name="Nullable`1">
      <Method Sig="instance void .ctor(!0)" />
      <Method Sig="instance bool get_HasValue()" />
      <Method Sig="instance !0 get_Value()" />
      <Method Sig="instance !0 GetValueOrDefault()" />
      <Method Sig="instance !0 GetValueOrDefault(!0)" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="op_Implicit(struct Nullable`1 )" />
      <Method Sig="!0 op_Explicit()" />
    </Type>
    <Type Name="Nullable">
      <Method Sig=" &lt;1&gt; int Compare(, struct Nullable`1 )" />
      <Method Sig=" &lt;1&gt; bool Equals(, struct Nullable`1 )" />
      <Method Sig="class Type GetUnderlyingType(class Type )" />
    </Type>
    <Type Name="Action`1">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance void Invoke(!0)" />
      <Method Sig="instance class IAsyncResult BeginInvoke(!0, class AsyncCallback , object )" />
      <Method Sig="instance void EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="Comparison`1">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance int Invoke(!0, !0)" />
      <Method Sig="instance class IAsyncResult BeginInvoke(!0, !0, class AsyncCallback , object )" />
      <Method Sig="instance int EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="Converter`2">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance !1 Invoke(!0)" />
      <Method Sig="instance class IAsyncResult BeginInvoke(!0, class AsyncCallback , object )" />
      <Method Sig="instance !1 EndInvoke(class IAsyncResult )" />
    </Type>
    <Type Name="Predicate`1">
      <Method Sig="instance void .ctor(object , intptr )" />
      <Method Sig="instance bool Invoke(!0)" />
      <Method Sig="instance class IAsyncResult BeginInvoke(!0, class AsyncCallback , object )" />
      <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
    </Type>
    <Namespace Name="Diagnostics">
      <Type Name="ConditionalAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_ConditionString()" />
      </Type>
      <Type Name="Debugger">
        <Method Sig="void Break()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool Launch()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_IsAttached()" />
        <Method Sig="void Log(int , string , string )" />
        <Method Sig="bool IsLogging()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DebuggerStepThroughAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DebuggerStepperBoundaryAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DebuggerHiddenAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DebuggerNonUserCodeAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DebuggableAttribute">
        <Method Sig="instance void .ctor(bool , bool )" />
        <Method Sig="instance void .ctor(struct DebuggingModes )" />
        <Method Sig="instance bool get_IsJITTrackingEnabled()" />
        <Method Sig="instance bool get_IsJITOptimizerDisabled()" />
        <Method Sig="instance struct DebuggingModes get_DebuggingFlags()" />
      </Type>
      <Type Name="DebuggerBrowsableAttribute">
        <Method Sig="instance void .ctor(struct DebuggerBrowsableState )" />
        <Method Sig="instance struct DebuggerBrowsableState get_State()" />
      </Type>
      <Type Name="DebuggerTypeProxyAttribute">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_ProxyTypeName()" />
        <Method Sig="instance void set_Target(class Type )" />
        <Method Sig="instance class Type get_Target()" />
        <Method Sig="instance string get_TargetTypeName()" />
        <Method Sig="instance void set_TargetTypeName(string )" />
      </Type>
      <Type Name="DebuggerDisplayAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance string get_Type()" />
        <Method Sig="instance void set_Type(string )" />
        <Method Sig="instance void set_Target(class Type )" />
        <Method Sig="instance class Type get_Target()" />
        <Method Sig="instance string get_TargetTypeName()" />
        <Method Sig="instance void set_TargetTypeName(string )" />
      </Type>
      <Type Name="DebuggerVisualizerAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(class Type , class Type )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance string get_VisualizerObjectSourceTypeName()" />
        <Method Sig="instance string get_VisualizerTypeName()" />
        <Method Sig="instance string get_Description()" />
        <Method Sig="instance void set_Description(string )" />
        <Method Sig="instance void set_Target(class Type )" />
        <Method Sig="instance class Type get_Target()" />
        <Method Sig="instance void set_TargetTypeName(string )" />
        <Method Sig="instance string get_TargetTypeName()" />
      </Type>
      <Type Name="StackTrace">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , bool )" />
        <Method Sig="instance void .ctor(class Exception )" />
        <Method Sig="instance void .ctor(class Exception , bool )" />
        <Method Sig="instance void .ctor(class Exception , int )" />
        <Method Sig="instance void .ctor(class Exception , int , bool )" />
        <Method Sig="instance void .ctor(class StackFrame )" />
        <Method Sig="instance void .ctor(class Thread , bool )" />
        <Method Sig="instance int get_FrameCount()" />
        <Method Sig="instance class StackFrame GetFrame(int )" />
        <Method Sig="instance [] class StackFrame GetFrames()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="StackFrame">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , bool )" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance void .ctor(string , int , int )" />
        <Method Sig="instance class MethodBase GetMethod()" />
        <Method Sig="instance int GetNativeOffset()" />
        <Method Sig="instance int GetILOffset()" />
        <Method Sig="instance string GetFileName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetFileLineNumber()" />
        <Method Sig="instance int GetFileColumnNumber()" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Namespace Name="CodeAnalysis">
        <Type Name="SuppressMessageAttribute">
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance string get_Category()" />
          <Method Sig="instance string get_CheckId()" />
          <Method Sig="instance string get_Scope()" />
          <Method Sig="instance void set_Scope(string )" />
          <Method Sig="instance string get_Target()" />
          <Method Sig="instance void set_Target(string )" />
          <Method Sig="instance string get_MessageId()" />
          <Method Sig="instance void set_MessageId(string )" />
          <Method Sig="instance string get_Justification()" />
          <Method Sig="instance void set_Justification(string )" />
        </Type>
      </Namespace>
      <Namespace Name="SymbolStore">
        <Type Name="SymDocumentType">
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SymLanguageType">
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SymLanguageVendor">
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SymbolToken">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int GetToken()" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(struct SymbolToken )" />
          <Method Sig="bool op_Equality(struct SymbolToken , struct SymbolToken )" />
          <Method Sig="bool op_Inequality(struct SymbolToken , struct SymbolToken )" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Globalization">
      <Type Name="Calendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="class Calendar ReadOnly(class Calendar )" />
        <Method Sig="instance struct DateTime AddMilliseconds(struct DateTime , double )" />
        <Method Sig="instance struct DateTime AddDays(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddHours(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddMinutes(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddSeconds(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddWeeks(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetHour(struct DateTime )" />
        <Method Sig="instance double GetMilliseconds(struct DateTime )" />
        <Method Sig="instance int GetMinute(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetSecond(struct DateTime )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapYear(int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()" />
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
      </Type>
      <Type Name="CharUnicodeInfo">
        <Method Sig="void .cctor()" />
        <Method Sig="double GetNumericValue(char )" />
        <Method Sig="double GetNumericValue(string , int )" />
        <Method Sig="int GetDecimalDigitValue(char )" />
        <Method Sig="int GetDecimalDigitValue(string , int )" />
        <Method Sig="int GetDigitValue(char )" />
        <Method Sig="int GetDigitValue(string , int )" />
        <Method Sig="struct UnicodeCategory GetUnicodeCategory(char )" />
        <Method Sig="struct UnicodeCategory GetUnicodeCategory(string , int )" />
      </Type>
      <Type Name="EastAsianLunisolarCalendar">
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance int GetSexagenaryYear(struct DateTime )" />
        <Method Sig="instance int GetCelestialStem(int )" />
        <Method Sig="instance int GetTerrestrialBranch(int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ChineseLunisolarCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="CompareInfo">
        <Method Sig="class CompareInfo GetCompareInfo(int , class Assembly )" />
        <Method Sig="class CompareInfo GetCompareInfo(string , class Assembly )" />
        <Method Sig="class CompareInfo GetCompareInfo(int )" />
        <Method Sig="class CompareInfo GetCompareInfo(string )" />
        <Method Sig="bool IsSortable(char )" />
        <Method Sig="bool IsSortable(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance int Compare(string , string )" />
        <Method Sig="instance int Compare(string , string , struct CompareOptions )" />
        <Method Sig="instance int Compare(string , int , int , string , int , int )" />
        <Method Sig="instance int Compare(string , int , string , int , struct CompareOptions )" />
        <Method Sig="instance int Compare(string , int , string , int )" />
        <Method Sig="instance int Compare(string , int , int , string , int , int , struct CompareOptions )" />
        <Method Sig="instance bool IsPrefix(string , string , struct CompareOptions )" />
        <Method Sig="instance bool IsPrefix(string , string )" />
        <Method Sig="instance bool IsSuffix(string , string , struct CompareOptions )" />
        <Method Sig="instance bool IsSuffix(string , string )" />
        <Method Sig="instance int IndexOf(string , char )" />
        <Method Sig="instance int IndexOf(string , string )" />
        <Method Sig="instance int IndexOf(string , char , struct CompareOptions )" />
        <Method Sig="instance int IndexOf(string , string , struct CompareOptions )" />
        <Method Sig="instance int IndexOf(string , char , int )" />
        <Method Sig="instance int IndexOf(string , string , int )" />
        <Method Sig="instance int IndexOf(string , char , int , struct CompareOptions )" />
        <Method Sig="instance int IndexOf(string , string , int , struct CompareOptions )" />
        <Method Sig="instance int IndexOf(string , char , int , int )" />
        <Method Sig="instance int IndexOf(string , string , int , int )" />
        <Method Sig="instance int IndexOf(string , char , int , int , struct CompareOptions )" />
        <Method Sig="instance int IndexOf(string , string , int , int , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , char )" />
        <Method Sig="instance int LastIndexOf(string , string )" />
        <Method Sig="instance int LastIndexOf(string , char , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , string , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , char , int )" />
        <Method Sig="instance int LastIndexOf(string , string , int )" />
        <Method Sig="instance int LastIndexOf(string , char , int , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , string , int , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , char , int , int )" />
        <Method Sig="instance int LastIndexOf(string , string , int , int )" />
        <Method Sig="instance int LastIndexOf(string , char , int , int , struct CompareOptions )" />
        <Method Sig="instance int LastIndexOf(string , string , int , int , struct CompareOptions )" />
        <Method Sig="instance class SortKey GetSortKey(string , struct CompareOptions )" />
        <Method Sig="instance class SortKey GetSortKey(string )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance int get_LCID()" />
      </Type>
      <Type Name="CultureInfo">
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , bool )" />
        <Method Sig="class CultureInfo CreateSpecificCulture(string )" />
        <Method Sig="class CultureInfo get_CurrentCulture()" />
        <Method Sig="class CultureInfo get_CurrentUICulture()" />
        <Method Sig="class CultureInfo get_InstalledUICulture()" />
        <Method Sig="class CultureInfo get_InvariantCulture()" />
        <Method Sig="instance class CultureInfo get_Parent()" />
        <Method Sig="instance int get_LCID()" />
        <Method Sig="instance int get_KeyboardLayoutId()" />
        <Method Sig="[] class CultureInfo GetCultures(struct CultureTypes )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_IetfLanguageTag()" />
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance string get_NativeName()" />
        <Method Sig="instance string get_EnglishName()" />
        <Method Sig="instance string get_TwoLetterISOLanguageName()" />
        <Method Sig="instance string get_ThreeLetterISOLanguageName()" />
        <Method Sig="instance string get_ThreeLetterWindowsLanguageName()" />
        <Method Sig="instance class CompareInfo get_CompareInfo()" />
        <Method Sig="instance class TextInfo get_TextInfo()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance object GetFormat(class Type )" />
        <Method Sig="instance bool get_IsNeutralCulture()" />
        <Method Sig="instance struct CultureTypes get_CultureTypes()" />
        <Method Sig="instance class NumberFormatInfo get_NumberFormat()" />
        <Method Sig="instance void set_NumberFormat(class NumberFormatInfo )" />
        <Method Sig="instance class DateTimeFormatInfo get_DateTimeFormat()" />
        <Method Sig="instance void set_DateTimeFormat(class DateTimeFormatInfo )" />
        <Method Sig="instance void ClearCachedData()" />
        <Method Sig="instance class Calendar get_Calendar()" />
        <Method Sig="instance [] class Calendar get_OptionalCalendars()" />
        <Method Sig="instance bool get_UseUserOverride()" />
        <Method Sig="instance class CultureInfo GetConsoleFallbackUICulture()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="class CultureInfo ReadOnly(class CultureInfo )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="class CultureInfo GetCultureInfo(int )" />
        <Method Sig="class CultureInfo GetCultureInfo(string )" />
        <Method Sig="class CultureInfo GetCultureInfo(string , string )" />
        <Method Sig="class CultureInfo GetCultureInfoByIetfLanguageTag(string )" />
      </Type>
      <Type Name="DateTimeFormatInfo">
        <Method Sig="instance void .ctor()" />
        <Method Sig="class DateTimeFormatInfo get_InvariantInfo()" />
        <Method Sig="class DateTimeFormatInfo get_CurrentInfo()" />
        <Method Sig="class DateTimeFormatInfo GetInstance(class IFormatProvider )" />
        <Method Sig="instance object GetFormat(class Type )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance string get_AMDesignator()" />
        <Method Sig="instance void set_AMDesignator(string )" />
        <Method Sig="instance class Calendar get_Calendar()" />
        <Method Sig="instance void set_Calendar(class Calendar )" />
        <Method Sig="instance int GetEra(string )" />
        <Method Sig="instance string GetEraName(int )" />
        <Method Sig="instance string GetAbbreviatedEraName(int )" />
        <Method Sig="instance string get_DateSeparator()" />
        <Method Sig="instance void set_DateSeparator(string )" />
        <Method Sig="instance struct DayOfWeek get_FirstDayOfWeek()" />
        <Method Sig="instance void set_FirstDayOfWeek(struct DayOfWeek )" />
        <Method Sig="instance struct CalendarWeekRule get_CalendarWeekRule()" />
        <Method Sig="instance void set_CalendarWeekRule(struct CalendarWeekRule )" />
        <Method Sig="instance string get_FullDateTimePattern()" />
        <Method Sig="instance void set_FullDateTimePattern(string )" />
        <Method Sig="instance string get_LongDatePattern()" />
        <Method Sig="instance void set_LongDatePattern(string )" />
        <Method Sig="instance string get_LongTimePattern()" />
        <Method Sig="instance void set_LongTimePattern(string )" />
        <Method Sig="instance string get_MonthDayPattern()" />
        <Method Sig="instance void set_MonthDayPattern(string )" />
        <Method Sig="instance string get_PMDesignator()" />
        <Method Sig="instance void set_PMDesignator(string )" />
        <Method Sig="instance string get_RFC1123Pattern()" />
        <Method Sig="instance string get_ShortDatePattern()" />
        <Method Sig="instance void set_ShortDatePattern(string )" />
        <Method Sig="instance string get_ShortTimePattern()" />
        <Method Sig="instance void set_ShortTimePattern(string )" />
        <Method Sig="instance string get_SortableDateTimePattern()" />
        <Method Sig="instance string get_TimeSeparator()" />
        <Method Sig="instance void set_TimeSeparator(string )" />
        <Method Sig="instance string get_UniversalSortableDateTimePattern()" />
        <Method Sig="instance string get_YearMonthPattern()" />
        <Method Sig="instance void set_YearMonthPattern(string )" />
        <Method Sig="instance [] string get_AbbreviatedDayNames()" />
        <Method Sig="instance void set_AbbreviatedDayNames([] string )" />
        <Method Sig="instance [] string get_ShortestDayNames()" />
        <Method Sig="instance void set_ShortestDayNames([] string )" />
        <Method Sig="instance [] string get_DayNames()" />
        <Method Sig="instance void set_DayNames([] string )" />
        <Method Sig="instance [] string get_AbbreviatedMonthNames()" />
        <Method Sig="instance void set_AbbreviatedMonthNames([] string )" />
        <Method Sig="instance [] string get_MonthNames()" />
        <Method Sig="instance void set_MonthNames([] string )" />
        <Method Sig="instance string GetAbbreviatedDayName(struct DayOfWeek )" />
        <Method Sig="instance string GetShortestDayName(struct DayOfWeek )" />
        <Method Sig="instance [] string GetAllDateTimePatterns()" />
        <Method Sig="instance [] string GetAllDateTimePatterns(char )" />
        <Method Sig="instance string GetDayName(struct DayOfWeek )" />
        <Method Sig="instance string GetAbbreviatedMonthName(int )" />
        <Method Sig="instance string GetMonthName(int )" />
        <Method Sig="class DateTimeFormatInfo ReadOnly(class DateTimeFormatInfo )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance string get_NativeCalendarName()" />
        <Method Sig="instance void SetAllDateTimePatterns([] string , char )" />
        <Method Sig="instance [] string get_AbbreviatedMonthGenitiveNames()" />
        <Method Sig="instance void set_AbbreviatedMonthGenitiveNames([] string )" />
        <Method Sig="instance [] string get_MonthGenitiveNames()" />
        <Method Sig="instance void set_MonthGenitiveNames([] string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DaylightTime">
        <Method Sig="instance void .ctor(struct DateTime , struct DateTime , struct TimeSpan )" />
        <Method Sig="instance struct DateTime get_Start()" />
        <Method Sig="instance struct DateTime get_End()" />
        <Method Sig="instance struct TimeSpan get_Delta()" />
      </Type>
      <Type Name="GregorianCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct GregorianCalendarTypes )" />
        <Method Sig="instance struct GregorianCalendarTypes get_CalendarType()" />
        <Method Sig="instance void set_CalendarType(struct GregorianCalendarTypes )" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="HebrewCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="HijriCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int get_HijriAdjustment()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_HijriAdjustment(int )" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetDayOfMonth(struct DateTime )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonth(struct DateTime )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="IdnMapping">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_AllowUnassigned()" />
        <Method Sig="instance void set_AllowUnassigned(bool )" />
        <Method Sig="instance bool get_UseStd3AsciiRules()" />
        <Method Sig="instance void set_UseStd3AsciiRules(bool )" />
        <Method Sig="instance string GetAscii(string )" />
        <Method Sig="instance string GetAscii(string , int )" />
        <Method Sig="instance string GetAscii(string , int , int )" />
        <Method Sig="instance string GetUnicode(string )" />
        <Method Sig="instance string GetUnicode(string , int )" />
        <Method Sig="instance string GetUnicode(string , int , int )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="JapaneseCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="JapaneseLunisolarCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="PersianCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="JulianCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()" />
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="KoreanCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="KoreanLunisolarCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RegionInfo">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="class RegionInfo get_CurrentRegion()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_EnglishName()" />
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance string get_NativeName()" />
        <Method Sig="instance string get_TwoLetterISORegionName()" />
        <Method Sig="instance string get_ThreeLetterISORegionName()" />
        <Method Sig="instance bool get_IsMetric()" />
        <Method Sig="instance int get_GeoId()" />
        <Method Sig="instance string get_ThreeLetterWindowsRegionName()" />
        <Method Sig="instance string get_CurrencyEnglishName()" />
        <Method Sig="instance string get_CurrencyNativeName()" />
        <Method Sig="instance string get_CurrencySymbol()" />
        <Method Sig="instance string get_ISOCurrencySymbol()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="SortKey">
        <Method Sig="instance string get_OriginalString()" />
        <Method Sig="instance [] byte get_KeyData()" />
        <Method Sig="int Compare(class SortKey , class SortKey )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="StringInfo">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string get_String()" />
        <Method Sig="instance void set_String(string )" />
        <Method Sig="instance int get_LengthInTextElements()" />
        <Method Sig="instance string SubstringByTextElements(int )" />
        <Method Sig="instance string SubstringByTextElements(int , int )" />
        <Method Sig="string GetNextTextElement(string )" />
        <Method Sig="string GetNextTextElement(string , int )" />
        <Method Sig="class TextElementEnumerator GetTextElementEnumerator(string )" />
        <Method Sig="class TextElementEnumerator GetTextElementEnumerator(string , int )" />
        <Method Sig="[] int ParseCombiningCharacters(string )" />
      </Type>
      <Type Name="TaiwanCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TaiwanLunisolarCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TextElementEnumerator">
        <Method Sig="instance bool MoveNext()" />
        <Method Sig="instance object get_Current()" />
        <Method Sig="instance string GetTextElement()" />
        <Method Sig="instance int get_ElementIndex()" />
        <Method Sig="instance void Reset()" />
      </Type>
      <Type Name="TextInfo">
        <Method Sig="void .cctor()" />
        <Method Sig="instance int get_ANSICodePage()" />
        <Method Sig="instance int get_OEMCodePage()" />
        <Method Sig="instance int get_MacCodePage()" />
        <Method Sig="instance int get_EBCDICCodePage()" />
        <Method Sig="instance int get_LCID()" />
        <Method Sig="instance string get_CultureName()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="class TextInfo ReadOnly(class TextInfo )" />
        <Method Sig="instance string get_ListSeparator()" />
        <Method Sig="instance void set_ListSeparator(string )" />
        <Method Sig="instance char ToLower(char )" />
        <Method Sig="instance string ToLower(string )" />
        <Method Sig="instance char ToUpper(char )" />
        <Method Sig="instance string ToUpper(string )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance string ToTitleCase(string )" />
        <Method Sig="instance bool get_IsRightToLeft()" />
      </Type>
      <Type Name="ThaiBuddhistCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetWeekOfYear(struct DateTime , struct CalendarWeekRule , struct DayOfWeek )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="NumberFormatInfo">
        <Method Sig="instance void .ctor()" />
        <Method Sig="class NumberFormatInfo get_InvariantInfo()" />
        <Method Sig="class NumberFormatInfo GetInstance(class IFormatProvider )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance int get_CurrencyDecimalDigits()" />
        <Method Sig="instance void set_CurrencyDecimalDigits(int )" />
        <Method Sig="instance string get_CurrencyDecimalSeparator()" />
        <Method Sig="instance void set_CurrencyDecimalSeparator(string )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance [] int get_CurrencyGroupSizes()" />
        <Method Sig="instance void set_CurrencyGroupSizes([] int )" />
        <Method Sig="instance [] int get_NumberGroupSizes()" />
        <Method Sig="instance void set_NumberGroupSizes([] int )" />
        <Method Sig="instance [] int get_PercentGroupSizes()" />
        <Method Sig="instance void set_PercentGroupSizes([] int )" />
        <Method Sig="instance string get_CurrencyGroupSeparator()" />
        <Method Sig="instance void set_CurrencyGroupSeparator(string )" />
        <Method Sig="instance string get_CurrencySymbol()" />
        <Method Sig="instance void set_CurrencySymbol(string )" />
        <Method Sig="class NumberFormatInfo get_CurrentInfo()" />
        <Method Sig="instance string get_NaNSymbol()" />
        <Method Sig="instance void set_NaNSymbol(string )" />
        <Method Sig="instance int get_CurrencyNegativePattern()" />
        <Method Sig="instance void set_CurrencyNegativePattern(int )" />
        <Method Sig="instance int get_NumberNegativePattern()" />
        <Method Sig="instance void set_NumberNegativePattern(int )" />
        <Method Sig="instance int get_PercentPositivePattern()" />
        <Method Sig="instance void set_PercentPositivePattern(int )" />
        <Method Sig="instance int get_PercentNegativePattern()" />
        <Method Sig="instance void set_PercentNegativePattern(int )" />
        <Method Sig="instance string get_NegativeInfinitySymbol()" />
        <Method Sig="instance void set_NegativeInfinitySymbol(string )" />
        <Method Sig="instance string get_NegativeSign()" />
        <Method Sig="instance void set_NegativeSign(string )" />
        <Method Sig="instance int get_NumberDecimalDigits()" />
        <Method Sig="instance void set_NumberDecimalDigits(int )" />
        <Method Sig="instance string get_NumberDecimalSeparator()" />
        <Method Sig="instance void set_NumberDecimalSeparator(string )" />
        <Method Sig="instance string get_NumberGroupSeparator()" />
        <Method Sig="instance void set_NumberGroupSeparator(string )" />
        <Method Sig="instance int get_CurrencyPositivePattern()" />
        <Method Sig="instance void set_CurrencyPositivePattern(int )" />
        <Method Sig="instance string get_PositiveInfinitySymbol()" />
        <Method Sig="instance void set_PositiveInfinitySymbol(string )" />
        <Method Sig="instance string get_PositiveSign()" />
        <Method Sig="instance void set_PositiveSign(string )" />
        <Method Sig="instance int get_PercentDecimalDigits()" />
        <Method Sig="instance void set_PercentDecimalDigits(int )" />
        <Method Sig="instance string get_PercentDecimalSeparator()" />
        <Method Sig="instance void set_PercentDecimalSeparator(string )" />
        <Method Sig="instance string get_PercentGroupSeparator()" />
        <Method Sig="instance void set_PercentGroupSeparator(string )" />
        <Method Sig="instance string get_PercentSymbol()" />
        <Method Sig="instance void set_PercentSymbol(string )" />
        <Method Sig="instance string get_PerMilleSymbol()" />
        <Method Sig="instance void set_PerMilleSymbol(string )" />
        <Method Sig="instance [] string get_NativeDigits()" />
        <Method Sig="instance void set_NativeDigits([] string )" />
        <Method Sig="instance struct DigitShapes get_DigitSubstitution()" />
        <Method Sig="instance void set_DigitSubstitution(struct DigitShapes )" />
        <Method Sig="instance object GetFormat(class Type )" />
        <Method Sig="class NumberFormatInfo ReadOnly(class NumberFormatInfo )" />
      </Type>
      <Type Name="UmAlQuraCalendar">
        <Method Sig="instance struct DateTime get_MinSupportedDateTime()" />
        <Method Sig="instance struct DateTime get_MaxSupportedDateTime()" />
        <Method Sig="instance struct CalendarAlgorithmType get_AlgorithmType()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct DateTime AddMonths(struct DateTime , int )" />
        <Method Sig="instance struct DateTime AddYears(struct DateTime , int )" />
        <Method Sig="instance int GetDayOfMonth(struct DateTime )" />
        <Method Sig="instance struct DayOfWeek GetDayOfWeek(struct DateTime )" />
        <Method Sig="instance int GetDayOfYear(struct DateTime )" />
        <Method Sig="instance int GetDaysInMonth(int , int , int )" />
        <Method Sig="instance int GetDaysInYear(int , int )" />
        <Method Sig="instance int GetEra(struct DateTime )" />
        <Method Sig="instance [] int get_Eras()" />
        <Method Sig="instance int GetMonth(struct DateTime )" />
        <Method Sig="instance int GetMonthsInYear(int , int )" />
        <Method Sig="instance int GetYear(struct DateTime )" />
        <Method Sig="instance bool IsLeapDay(int , int , int , int )" />
        <Method Sig="instance int GetLeapMonth(int , int )" />
        <Method Sig="instance bool IsLeapMonth(int , int , int )" />
        <Method Sig="instance bool IsLeapYear(int , int )" />
        <Method Sig="instance struct DateTime ToDateTime(int , int , int , int , int , int , int , int )" />
        <Method Sig="instance int get_TwoDigitYearMax()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_TwoDigitYearMax(int )" />
        <Method Sig="instance int ToFourDigitYear(int )" />
        <Method Sig="void .cctor()" />
      </Type>
    </Namespace>
    <Namespace Name="Resources">
      <Type Name="MissingManifestResourceException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="MissingSatelliteAssemblyException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance string get_CultureName()" />
      </Type>
      <Type Name="NeutralResourcesLanguageAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , struct UltimateResourceFallbackLocation )" />
        <Method Sig="instance string get_CultureName()" />
        <Method Sig="instance struct UltimateResourceFallbackLocation get_Location()" />
      </Type>
      <Type Name="ResourceManager">
        <Method Sig="instance void .ctor(string , class Assembly )" />
        <Method Sig="instance void .ctor(string , class Assembly , class Type )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance string get_BaseName()" />
        <Method Sig="instance bool get_IgnoreCase()" />
        <Method Sig="instance void set_IgnoreCase(bool )" />
        <Method Sig="instance class Type get_ResourceSetType()" />
        <Method Sig="instance void ReleaseAllResources()" />
        <Method Sig="class ResourceManager CreateFileBasedResourceManager(string , string , class Type )" />
        <Method Sig="instance class ResourceSet GetResourceSet(class CultureInfo , bool , bool )" />
        <Method Sig="instance string GetString(string )" />
        <Method Sig="instance string GetString(string , class CultureInfo )" />
        <Method Sig="instance object GetObject(string )" />
        <Method Sig="instance object GetObject(string , class CultureInfo )" />
        <Method Sig="instance class UnmanagedMemoryStream GetStream(string )" />
        <Method Sig="instance class UnmanagedMemoryStream GetStream(string , class CultureInfo )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ResourceReader">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Stream )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Close()" />
        <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
        <Method Sig="instance void GetResourceData(string , &amp; string , &amp; [] byte )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ResourceSet">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Stream )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(class IResourceReader )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class Type GetDefaultReader()" />
        <Method Sig="instance class Type GetDefaultWriter()" />
        <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
        <Method Sig="instance string GetString(string )" />
        <Method Sig="instance string GetString(string , bool )" />
        <Method Sig="instance object GetObject(string )" />
        <Method Sig="instance object GetObject(string , bool )" />
      </Type>
      <Type Name="ResourceWriter">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void AddResource(string , string )" />
        <Method Sig="instance void AddResource(string , object )" />
        <Method Sig="instance void AddResource(string , [] byte )" />
        <Method Sig="instance void AddResourceData(string , string , [] byte )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Generate()" />
      </Type>
      <Type Name="SatelliteContractVersionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Version()" />
      </Type>
    </Namespace>
    <Namespace Name="Security">
      <Namespace Name="Policy">
        <Type Name="AllMembershipCondition">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="ApplicationDirectory">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Directory()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="ApplicationDirectoryMembershipCondition">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="ApplicationSecurityInfo">
          <Method Sig="instance void .ctor(class ActivationContext )" />
          <Method Sig="instance class ApplicationId get_ApplicationId()" />
          <Method Sig="instance void set_ApplicationId(class ApplicationId )" />
          <Method Sig="instance class ApplicationId get_DeploymentId()" />
          <Method Sig="instance void set_DeploymentId(class ApplicationId )" />
          <Method Sig="instance class PermissionSet get_DefaultRequestSet()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_DefaultRequestSet(class PermissionSet )" />
          <Method Sig="instance class Evidence get_ApplicationEvidence()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ApplicationEvidence(class Evidence )" />
        </Type>
        <Type Name="ApplicationSecurityManager">
          <Method Sig="bool DetermineApplicationTrust(class ActivationContext , class TrustManagerContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="class ApplicationTrustCollection get_UserApplicationTrusts()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IApplicationTrustManager get_ApplicationTrustManager()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ApplicationTrust">
          <Method Sig="instance void .ctor(class ApplicationIdentity )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class ApplicationIdentity get_ApplicationIdentity()" />
          <Method Sig="instance void set_ApplicationIdentity(class ApplicationIdentity )" />
          <Method Sig="instance class PolicyStatement get_DefaultGrantSet()" />
          <Method Sig="instance void set_DefaultGrantSet(class PolicyStatement )" />
          <Method Sig="instance bool get_IsApplicationTrustedToRun()" />
          <Method Sig="instance void set_IsApplicationTrustedToRun(bool )" />
          <Method Sig="instance bool get_Persist()" />
          <Method Sig="instance void set_Persist(bool )" />
          <Method Sig="instance object get_ExtraInfo()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ExtraInfo(object )" />
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="ApplicationTrustCollection">
          <Method Sig="instance int get_Count()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ApplicationTrust get_Item(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ApplicationTrust get_Item(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance int Add(class ApplicationTrust )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void AddRange([] class ApplicationTrust )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void AddRange(class ApplicationTrustCollection )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ApplicationTrustCollection Find(class ApplicationIdentity , struct ApplicationVersionMatch )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Remove(class ApplicationIdentity , struct ApplicationVersionMatch )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Remove(class ApplicationTrust )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RemoveRange([] class ApplicationTrust )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void RemoveRange(class ApplicationTrustCollection )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void Clear()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class ApplicationTrustEnumerator GetEnumerator()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void CopyTo([] class ApplicationTrust , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsSynchronized()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_SyncRoot()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ApplicationTrustEnumerator">
          <Method Sig="instance class ApplicationTrust get_Current()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool MoveNext()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="CodeGroup">
          <Method Sig="instance void AddChild(class CodeGroup )" />
          <Method Sig="instance void RemoveChild(class CodeGroup )" />
          <Method Sig="instance class IList get_Children()" />
          <Method Sig="instance void set_Children(class IList )" />
          <Method Sig="instance class IMembershipCondition get_MembershipCondition()" />
          <Method Sig="instance void set_MembershipCondition(class IMembershipCondition )" />
          <Method Sig="instance class PolicyStatement get_PolicyStatement()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_PolicyStatement(class PolicyStatement )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Description()" />
          <Method Sig="instance void set_Description(string )" />
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )" />
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )" />
          <Method Sig="instance class CodeGroup Copy()" />
          <Method Sig="instance string get_PermissionSetName()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_AttributeString()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_MergeLogic()" />
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(class CodeGroup , bool )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="Evidence">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] object , [] object )" />
          <Method Sig="instance void AddHost(object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddAssembly(object )" />
          <Method Sig="instance bool get_Locked()" />
          <Method Sig="instance void set_Locked(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Merge(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IEnumerator GetHostEnumerator()" />
          <Method Sig="instance class IEnumerator GetAssemblyEnumerator()" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void RemoveType(class Type )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="FileCodeGroup">
          <Method Sig="instance void .ctor(class IMembershipCondition , struct FileIOPermissionAccess )" />
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )" />
          <Method Sig="instance class CodeGroup Copy()" />
          <Method Sig="instance string get_MergeLogic()" />
          <Method Sig="instance string get_PermissionSetName()" />
          <Method Sig="instance string get_AttributeString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="FirstMatchCodeGroup">
          <Method Sig="instance void .ctor(class IMembershipCondition , class PolicyStatement )" />
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup Copy()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_MergeLogic()" />
        </Type>
        <Type Name="TrustManagerContext">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct TrustManagerUIContext )" />
          <Method Sig="instance struct TrustManagerUIContext get_UIContext()" />
          <Method Sig="instance void set_UIContext(struct TrustManagerUIContext )" />
          <Method Sig="instance bool get_NoPrompt()" />
          <Method Sig="instance void set_NoPrompt(bool )" />
          <Method Sig="instance bool get_IgnorePersistedDecision()" />
          <Method Sig="instance void set_IgnorePersistedDecision(bool )" />
          <Method Sig="instance bool get_KeepAlive()" />
          <Method Sig="instance void set_KeepAlive(bool )" />
          <Method Sig="instance bool get_Persist()" />
          <Method Sig="instance void set_Persist(bool )" />
          <Method Sig="instance class ApplicationIdentity get_PreviousApplicationIdentity()" />
          <Method Sig="instance void set_PreviousApplicationIdentity(class ApplicationIdentity )" />
        </Type>
        <Type Name="CodeConnectAccess">
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="class CodeConnectAccess CreateOriginSchemeAccess(int )" />
          <Method Sig="class CodeConnectAccess CreateAnySchemeAccess(int )" />
          <Method Sig="instance string get_Scheme()" />
          <Method Sig="instance int get_Port()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="NetCodeGroup">
          <Method Sig="instance void .ctor(class IMembershipCondition )" />
          <Method Sig="instance void ResetConnectAccess()" />
          <Method Sig="instance void AddConnectAccess(string , class CodeConnectAccess )" />
          <Method Sig="instance [] struct DictionaryEntry GetConnectAccessRules()" />
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )" />
          <Method Sig="instance class CodeGroup Copy()" />
          <Method Sig="instance string get_MergeLogic()" />
          <Method Sig="instance string get_PermissionSetName()" />
          <Method Sig="instance string get_AttributeString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="PermissionRequestEvidence">
          <Method Sig="instance void .ctor(class PermissionSet , class PermissionSet , class PermissionSet )" />
          <Method Sig="instance class PermissionSet get_RequestedPermissions()" />
          <Method Sig="instance class PermissionSet get_OptionalPermissions()" />
          <Method Sig="instance class PermissionSet get_DeniedPermissions()" />
          <Method Sig="instance class PermissionRequestEvidence Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PolicyException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="PolicyLevel">
          <Method Sig="class PolicyLevel CreateAppDomainLevel()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_Label()" />
          <Method Sig="instance struct PolicyLevelType get_Type()" />
          <Method Sig="instance string get_StoreLocation()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup get_RootCodeGroup()" />
          <Method Sig="instance void set_RootCodeGroup(class CodeGroup )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IList get_NamedPermissionSets()" />
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )" />
          <Method Sig="instance void AddFullTrustAssembly(class StrongName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddFullTrustAssembly(class StrongNameMembershipCondition )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void RemoveFullTrustAssembly(class StrongName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void RemoveFullTrustAssembly(class StrongNameMembershipCondition )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IList get_FullTrustAssemblies()" />
          <Method Sig="instance void AddNamedPermissionSet(class NamedPermissionSet )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class NamedPermissionSet RemoveNamedPermissionSet(class NamedPermissionSet )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class NamedPermissionSet RemoveNamedPermissionSet(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class NamedPermissionSet ChangeNamedPermissionSet(string , class PermissionSet )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class NamedPermissionSet GetNamedPermissionSet(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Recover()" />
          <Method Sig="instance void Reset()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="PolicyStatement">
          <Method Sig="instance void .ctor(class PermissionSet )" />
          <Method Sig="instance void .ctor(class PermissionSet , struct PolicyStatementAttribute )" />
          <Method Sig="instance class PermissionSet get_PermissionSet()" />
          <Method Sig="instance void set_PermissionSet(class PermissionSet )" />
          <Method Sig="instance struct PolicyStatementAttribute get_Attributes()" />
          <Method Sig="instance void set_Attributes(struct PolicyStatementAttribute )" />
          <Method Sig="instance class PolicyStatement Copy()" />
          <Method Sig="instance string get_AttributeString()" />
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="Site">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="class Site CreateFromUrl(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="SiteMembershipCondition">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void set_Site(string )" />
          <Method Sig="instance string get_Site()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="StrongName">
          <Method Sig="instance void .ctor(class StrongNamePublicKeyBlob , string , class Version )" />
          <Method Sig="instance class StrongNamePublicKeyBlob get_PublicKey()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class Version get_Version()" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="StrongNameMembershipCondition">
          <Method Sig="instance void .ctor(class StrongNamePublicKeyBlob , string , class Version )" />
          <Method Sig="instance void set_PublicKey(class StrongNamePublicKeyBlob )" />
          <Method Sig="instance class StrongNamePublicKeyBlob get_PublicKey()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Version(class Version )" />
          <Method Sig="instance class Version get_Version()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="UnionCodeGroup">
          <Method Sig="instance void .ctor(class IMembershipCondition , class PolicyStatement )" />
          <Method Sig="instance class PolicyStatement Resolve(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup ResolveMatchingCodeGroups(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CodeGroup Copy()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_MergeLogic()" />
        </Type>
        <Type Name="Url">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="UrlMembershipCondition">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void set_Url(string )" />
          <Method Sig="instance string get_Url()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="Zone">
          <Method Sig="instance void .ctor(struct SecurityZone )" />
          <Method Sig="class Zone CreateFromUrl(string )" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance struct SecurityZone get_SecurityZone()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ZoneMembershipCondition">
          <Method Sig="instance void .ctor(struct SecurityZone )" />
          <Method Sig="instance void set_SecurityZone(struct SecurityZone )" />
          <Method Sig="instance struct SecurityZone get_SecurityZone()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="GacInstalled">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="GacMembershipCondition">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool Check(class Evidence )" />
          <Method Sig="instance class IMembershipCondition Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )" />
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="Hash">
          <Method Sig="instance void .ctor(class Assembly )" />
          <Method Sig="class Hash CreateSHA1([] byte )" />
          <Method Sig="class Hash CreateMD5([] byte )" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte get_SHA1()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte get_MD5()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte GenerateHash(class HashAlgorithm )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="HashMembershipCondition">
          <Method Sig="instance void .ctor(class HashAlgorithm , [] byte )" />
          <Method Sig="instance void set_HashAlgorithm(class HashAlgorithm )" />
          <Method Sig="instance class HashAlgorithm get_HashAlgorithm()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_HashValue([] byte )" />
          <Method Sig="instance [] byte get_HashValue()" />
          <Method Sig="instance bool Check(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IMembershipCondition Copy()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int GetHashCode()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string ToString()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="Publisher">
          <Method Sig="instance void .ctor(class X509Certificate )" />
          <Method Sig="instance class IPermission CreateIdentityPermission(class Evidence )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance class X509Certificate get_Certificate()" />
          <Method Sig="instance object Copy()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PublisherMembershipCondition">
          <Method Sig="instance void .ctor(class X509Certificate )" />
          <Method Sig="instance void set_Certificate(class X509Certificate )" />
          <Method Sig="instance class X509Certificate get_Certificate()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string ToString()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool Check(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IMembershipCondition Copy()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class SecurityElement ToXml()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml(class PolicyLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void FromXml(class SecurityElement , class PolicyLevel )" />
          <Method Sig="instance bool Equals(object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int GetHashCode()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
      </Namespace>
      <Namespace Name="Principal">
        <Type Name="GenericIdentity">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance string get_AuthenticationType()" />
          <Method Sig="instance bool get_IsAuthenticated()" />
        </Type>
        <Type Name="GenericPrincipal">
          <Method Sig="instance void .ctor(class IIdentity , [] string )" />
          <Method Sig="instance class IIdentity get_Identity()" />
          <Method Sig="instance bool IsInRole(string )" />
        </Type>
        <Type Name="WindowsIdentity">
          <Method Sig="instance void .ctor(intptr )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(intptr , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(intptr , string , struct WindowsAccountType )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(intptr , string , struct WindowsAccountType , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WindowsIdentity GetCurrent()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WindowsIdentity GetCurrent(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WindowsIdentity GetCurrent(struct TokenAccessLevels )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class WindowsIdentity GetAnonymous()" />
          <Method Sig="instance string get_AuthenticationType()" />
          <Method Sig="instance struct TokenImpersonationLevel get_ImpersonationLevel()" />
          <Method Sig="instance bool get_IsAuthenticated()" />
          <Method Sig="instance bool get_IsGuest()" />
          <Method Sig="instance bool get_IsSystem()" />
          <Method Sig="instance bool get_IsAnonymous()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance class SecurityIdentifier get_Owner()" />
          <Method Sig="instance class SecurityIdentifier get_User()" />
          <Method Sig="instance class IdentityReferenceCollection get_Groups()" />
          <Method Sig="instance intptr get_Token()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class WindowsImpersonationContext Impersonate()" />
          <Method Sig="class WindowsImpersonationContext Impersonate(intptr )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPrincipal" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Dispose()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="WindowsImpersonationContext">
          <Method Sig="instance void Undo()" />
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="WindowsPrincipal">
          <Method Sig="instance void .ctor(class WindowsIdentity )" />
          <Method Sig="instance class IIdentity get_Identity()" />
          <Method Sig="instance bool IsInRole(string )" />
          <Method Sig="instance bool IsInRole(struct WindowsBuiltInRole )" />
          <Method Sig="instance bool IsInRole(int )" />
          <Method Sig="instance bool IsInRole(class SecurityIdentifier )" />
        </Type>
        <Type Name="IdentityReference">
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance bool IsValidTargetType(class Type )" />
          <Method Sig="instance class IdentityReference Translate(class Type )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="bool op_Equality(class IdentityReference , class IdentityReference )" />
          <Method Sig="bool op_Inequality(class IdentityReference , class IdentityReference )" />
        </Type>
        <Type Name="IdentityReferenceCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void CopyTo([] class IdentityReference , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Add(class IdentityReference )" />
          <Method Sig="instance bool Remove(class IdentityReference )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(class IdentityReference )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance class IdentityReference get_Item(int )" />
          <Method Sig="instance void set_Item(int , class IdentityReference )" />
          <Method Sig="instance class IdentityReferenceCollection Translate(class Type )" />
          <Method Sig="instance class IdentityReferenceCollection Translate(class Type , bool )" />
        </Type>
        <Type Name="NTAccount">
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance bool IsValidTargetType(class Type )" />
          <Method Sig="instance class IdentityReference Translate(class Type )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="bool op_Equality(class NTAccount , class NTAccount )" />
          <Method Sig="bool op_Inequality(class NTAccount , class NTAccount )" />
        </Type>
        <Type Name="SecurityIdentifier">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor([] byte , int )" />
          <Method Sig="instance void .ctor(intptr )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(struct WellKnownSidType , class SecurityIdentifier )" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance class SecurityIdentifier get_AccountDomainSid()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance bool Equals(class SecurityIdentifier )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance bool IsValidTargetType(class Type )" />
          <Method Sig="instance bool IsAccountSid()" />
          <Method Sig="instance class IdentityReference Translate(class Type )" />
          <Method Sig="bool op_Equality(class SecurityIdentifier , class SecurityIdentifier )" />
          <Method Sig="bool op_Inequality(class SecurityIdentifier , class SecurityIdentifier )" />
          <Method Sig="instance int CompareTo(class SecurityIdentifier )" />
          <Method Sig="instance bool IsWellKnown(struct WellKnownSidType )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="instance bool IsEqualDomainSid(class SecurityIdentifier )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="IdentityNotMappedException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class IdentityReferenceCollection get_UnmappedIdentities()" />
        </Type>
      </Namespace>
      <Type Name="SecurityElement">
        <Method Sig="class SecurityElement FromString(string )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_Tag()" />
        <Method Sig="instance void set_Tag(string )" />
        <Method Sig="instance class Hashtable get_Attributes()" />
        <Method Sig="instance void set_Attributes(class Hashtable )" />
        <Method Sig="instance string get_Text()" />
        <Method Sig="instance void set_Text(string )" />
        <Method Sig="instance class ArrayList get_Children()" />
        <Method Sig="instance void set_Children(class ArrayList )" />
        <Method Sig="instance void AddAttribute(string , string )" />
        <Method Sig="instance void AddChild(class SecurityElement )" />
        <Method Sig="instance bool Equal(class SecurityElement )" />
        <Method Sig="instance class SecurityElement Copy()" />
        <Method Sig="bool IsValidTag(string )" />
        <Method Sig="bool IsValidText(string )" />
        <Method Sig="bool IsValidAttributeName(string )" />
        <Method Sig="bool IsValidAttributeValue(string )" />
        <Method Sig="string Escape(string )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance string Attribute(string )" />
        <Method Sig="instance class SecurityElement SearchForChildByTag(string )" />
        <Method Sig="instance string SearchForTextOfTag(string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlSyntaxException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , string )" />
      </Type>
      <Type Name="CodeAccessPermission">
        <Method Sig="void RevertAssert()" />
        <Method Sig="void RevertDeny()" />
        <Method Sig="void RevertPermitOnly()" />
        <Method Sig="void RevertAll()" />
        <Method Sig="instance void Demand()" />
        <Method Sig="instance void Assert()" />
        <Method Sig="instance void Deny()" />
        <Method Sig="instance void PermitOnly()" />
        <Method Sig="instance class IPermission Union(class IPermission )" />
        <Method Sig="instance class SecurityElement ToXml()" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance class IPermission Copy()" />
        <Method Sig="instance class IPermission Intersect(class IPermission )" />
        <Method Sig="instance bool IsSubsetOf(class IPermission )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Namespace Name="Permissions">
        <Type Name="EnvironmentPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct EnvironmentPermissionAccess , string )" />
          <Method Sig="instance void SetPathList(struct EnvironmentPermissionAccess , string )" />
          <Method Sig="instance void AddPathList(struct EnvironmentPermissionAccess , string )" />
          <Method Sig="instance string GetPathList(struct EnvironmentPermissionAccess )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="FileDialogPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct FileDialogPermissionAccess )" />
          <Method Sig="instance struct FileDialogPermissionAccess get_Access()" />
          <Method Sig="instance void set_Access(struct FileDialogPermissionAccess )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
        </Type>
        <Type Name="FileIOPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct FileIOPermissionAccess , string )" />
          <Method Sig="instance void .ctor(struct FileIOPermissionAccess , [] string )" />
          <Method Sig="instance void .ctor(struct FileIOPermissionAccess , struct AccessControlActions , string )" />
          <Method Sig="instance void .ctor(struct FileIOPermissionAccess , struct AccessControlActions , [] string )" />
          <Method Sig="instance void SetPathList(struct FileIOPermissionAccess , string )" />
          <Method Sig="instance void SetPathList(struct FileIOPermissionAccess , [] string )" />
          <Method Sig="instance void AddPathList(struct FileIOPermissionAccess , string )" />
          <Method Sig="instance void AddPathList(struct FileIOPermissionAccess , [] string )" />
          <Method Sig="instance [] string GetPathList(struct FileIOPermissionAccess )" />
          <Method Sig="instance struct FileIOPermissionAccess get_AllLocalFiles()" />
          <Method Sig="instance void set_AllLocalFiles(struct FileIOPermissionAccess )" />
          <Method Sig="instance struct FileIOPermissionAccess get_AllFiles()" />
          <Method Sig="instance void set_AllFiles(struct FileIOPermissionAccess )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SecurityAttribute">
          <Method Sig="instance struct SecurityAction get_Action()" />
          <Method Sig="instance void set_Action(struct SecurityAction )" />
          <Method Sig="instance bool get_Unrestricted()" />
          <Method Sig="instance void set_Unrestricted(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="HostProtectionAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct HostProtectionResource get_Resources()" />
          <Method Sig="instance void set_Resources(struct HostProtectionResource )" />
          <Method Sig="instance bool get_Synchronization()" />
          <Method Sig="instance void set_Synchronization(bool )" />
          <Method Sig="instance bool get_SharedState()" />
          <Method Sig="instance void set_SharedState(bool )" />
          <Method Sig="instance bool get_ExternalProcessMgmt()" />
          <Method Sig="instance void set_ExternalProcessMgmt(bool )" />
          <Method Sig="instance bool get_SelfAffectingProcessMgmt()" />
          <Method Sig="instance void set_SelfAffectingProcessMgmt(bool )" />
          <Method Sig="instance bool get_ExternalThreading()" />
          <Method Sig="instance void set_ExternalThreading(bool )" />
          <Method Sig="instance bool get_SelfAffectingThreading()" />
          <Method Sig="instance void set_SelfAffectingThreading(bool )" />
          <Method Sig="instance bool get_SecurityInfrastructure()" />
          <Method Sig="instance void set_SecurityInfrastructure(bool )" />
          <Method Sig="instance bool get_UI()" />
          <Method Sig="instance void set_UI(bool )" />
          <Method Sig="instance bool get_MayLeakOnAbort()" />
          <Method Sig="instance void set_MayLeakOnAbort(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="IsolatedStoragePermission">
          <Method Sig="instance void set_UserQuota(in64 )" />
          <Method Sig="instance in64 get_UserQuota()" />
          <Method Sig="instance void set_UsageAllowed(struct IsolatedStorageContainment )" />
          <Method Sig="instance struct IsolatedStorageContainment get_UsageAllowed()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="IsolatedStorageFilePermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="EnvironmentPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Read()" />
          <Method Sig="instance void set_Read(string )" />
          <Method Sig="instance string get_Write()" />
          <Method Sig="instance void set_Write(string )" />
          <Method Sig="instance string get_All()" />
          <Method Sig="instance void set_All(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="FileDialogPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance bool get_Open()" />
          <Method Sig="instance void set_Open(bool )" />
          <Method Sig="instance bool get_Save()" />
          <Method Sig="instance void set_Save(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="FileIOPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Read()" />
          <Method Sig="instance void set_Read(string )" />
          <Method Sig="instance string get_Write()" />
          <Method Sig="instance void set_Write(string )" />
          <Method Sig="instance string get_Append()" />
          <Method Sig="instance void set_Append(string )" />
          <Method Sig="instance string get_PathDiscovery()" />
          <Method Sig="instance void set_PathDiscovery(string )" />
          <Method Sig="instance string get_ViewAccessControl()" />
          <Method Sig="instance void set_ViewAccessControl(string )" />
          <Method Sig="instance string get_ChangeAccessControl()" />
          <Method Sig="instance void set_ChangeAccessControl(string )" />
          <Method Sig="instance void set_All(string )" />
          <Method Sig="instance string get_All()" />
          <Method Sig="instance string get_ViewAndModify()" />
          <Method Sig="instance void set_ViewAndModify(string )" />
          <Method Sig="instance struct FileIOPermissionAccess get_AllFiles()" />
          <Method Sig="instance void set_AllFiles(struct FileIOPermissionAccess )" />
          <Method Sig="instance struct FileIOPermissionAccess get_AllLocalFiles()" />
          <Method Sig="instance void set_AllLocalFiles(struct FileIOPermissionAccess )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="KeyContainerPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_KeyStore()" />
          <Method Sig="instance void set_KeyStore(string )" />
          <Method Sig="instance string get_ProviderName()" />
          <Method Sig="instance void set_ProviderName(string )" />
          <Method Sig="instance int get_ProviderType()" />
          <Method Sig="instance void set_ProviderType(int )" />
          <Method Sig="instance string get_KeyContainerName()" />
          <Method Sig="instance void set_KeyContainerName(string )" />
          <Method Sig="instance int get_KeySpec()" />
          <Method Sig="instance void set_KeySpec(int )" />
          <Method Sig="instance struct KeyContainerPermissionFlags get_Flags()" />
          <Method Sig="instance void set_Flags(struct KeyContainerPermissionFlags )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="PrincipalPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Role()" />
          <Method Sig="instance void set_Role(string )" />
          <Method Sig="instance bool get_Authenticated()" />
          <Method Sig="instance void set_Authenticated(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="ReflectionPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct ReflectionPermissionFlag get_Flags()" />
          <Method Sig="instance void set_Flags(struct ReflectionPermissionFlag )" />
          <Method Sig="instance bool get_TypeInformation()" />
          <Method Sig="instance void set_TypeInformation(bool )" />
          <Method Sig="instance bool get_MemberAccess()" />
          <Method Sig="instance void set_MemberAccess(bool )" />
          <Method Sig="instance bool get_ReflectionEmit()" />
          <Method Sig="instance void set_ReflectionEmit(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="RegistryPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Read()" />
          <Method Sig="instance void set_Read(string )" />
          <Method Sig="instance string get_Write()" />
          <Method Sig="instance void set_Write(string )" />
          <Method Sig="instance string get_Create()" />
          <Method Sig="instance void set_Create(string )" />
          <Method Sig="instance string get_ViewAccessControl()" />
          <Method Sig="instance void set_ViewAccessControl(string )" />
          <Method Sig="instance string get_ChangeAccessControl()" />
          <Method Sig="instance void set_ChangeAccessControl(string )" />
          <Method Sig="instance string get_ViewAndModify()" />
          <Method Sig="instance void set_ViewAndModify(string )" />
          <Method Sig="instance string get_All()" />
          <Method Sig="instance void set_All(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="SecurityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct SecurityPermissionFlag get_Flags()" />
          <Method Sig="instance void set_Flags(struct SecurityPermissionFlag )" />
          <Method Sig="instance bool get_Assertion()" />
          <Method Sig="instance void set_Assertion(bool )" />
          <Method Sig="instance bool get_UnmanagedCode()" />
          <Method Sig="instance void set_UnmanagedCode(bool )" />
          <Method Sig="instance bool get_SkipVerification()" />
          <Method Sig="instance void set_SkipVerification(bool )" />
          <Method Sig="instance bool get_Execution()" />
          <Method Sig="instance void set_Execution(bool )" />
          <Method Sig="instance bool get_ControlThread()" />
          <Method Sig="instance void set_ControlThread(bool )" />
          <Method Sig="instance bool get_ControlEvidence()" />
          <Method Sig="instance void set_ControlEvidence(bool )" />
          <Method Sig="instance bool get_ControlPolicy()" />
          <Method Sig="instance void set_ControlPolicy(bool )" />
          <Method Sig="instance bool get_SerializationFormatter()" />
          <Method Sig="instance void set_SerializationFormatter(bool )" />
          <Method Sig="instance bool get_ControlDomainPolicy()" />
          <Method Sig="instance void set_ControlDomainPolicy(bool )" />
          <Method Sig="instance bool get_ControlPrincipal()" />
          <Method Sig="instance void set_ControlPrincipal(bool )" />
          <Method Sig="instance bool get_ControlAppDomain()" />
          <Method Sig="instance void set_ControlAppDomain(bool )" />
          <Method Sig="instance bool get_RemotingConfiguration()" />
          <Method Sig="instance void set_RemotingConfiguration(bool )" />
          <Method Sig="instance bool get_Infrastructure()" />
          <Method Sig="instance void set_Infrastructure(bool )" />
          <Method Sig="instance bool get_BindingRedirects()" />
          <Method Sig="instance void set_BindingRedirects(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="UIPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct UIPermissionWindow get_Window()" />
          <Method Sig="instance void set_Window(struct UIPermissionWindow )" />
          <Method Sig="instance struct UIPermissionClipboard get_Clipboard()" />
          <Method Sig="instance void set_Clipboard(struct UIPermissionClipboard )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="ZoneIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct SecurityZone get_Zone()" />
          <Method Sig="instance void set_Zone(struct SecurityZone )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="StrongNameIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Version()" />
          <Method Sig="instance void set_Version(string )" />
          <Method Sig="instance string get_PublicKey()" />
          <Method Sig="instance void set_PublicKey(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="SiteIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Site()" />
          <Method Sig="instance void set_Site(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="UrlIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Url()" />
          <Method Sig="instance void set_Url(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="PublisherIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_X509Certificate()" />
          <Method Sig="instance void set_X509Certificate(string )" />
          <Method Sig="instance string get_CertFile()" />
          <Method Sig="instance void set_CertFile(string )" />
          <Method Sig="instance string get_SignedFile()" />
          <Method Sig="instance void set_SignedFile(string )" />
          <Method Sig="instance class IPermission CreatePermission()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="IsolatedStoragePermissionAttribute">
          <Method Sig="instance void set_UserQuota(in64 )" />
          <Method Sig="instance in64 get_UserQuota()" />
          <Method Sig="instance void set_UsageAllowed(struct IsolatedStorageContainment )" />
          <Method Sig="instance struct IsolatedStorageContainment get_UsageAllowed()" />
        </Type>
        <Type Name="IsolatedStorageFilePermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="PermissionSetAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_File()" />
          <Method Sig="instance void set_File(string )" />
          <Method Sig="instance bool get_UnicodeEncoded()" />
          <Method Sig="instance void set_UnicodeEncoded(bool )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_XML()" />
          <Method Sig="instance void set_XML(string )" />
          <Method Sig="instance string get_Hex()" />
          <Method Sig="instance void set_Hex(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
          <Method Sig="instance class PermissionSet CreatePermissionSet()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="ReflectionPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct ReflectionPermissionFlag )" />
          <Method Sig="instance void set_Flags(struct ReflectionPermissionFlag )" />
          <Method Sig="instance struct ReflectionPermissionFlag get_Flags()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="PrincipalPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , string , bool )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance void Demand()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="SecurityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct SecurityPermissionFlag )" />
          <Method Sig="instance void set_Flags(struct SecurityPermissionFlag )" />
          <Method Sig="instance struct SecurityPermissionFlag get_Flags()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="SiteIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void set_Site(string )" />
          <Method Sig="instance string get_Site()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="StrongNameIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(class StrongNamePublicKeyBlob , string , class Version )" />
          <Method Sig="instance void set_PublicKey(class StrongNamePublicKeyBlob )" />
          <Method Sig="instance class StrongNamePublicKeyBlob get_PublicKey()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Version(class Version )" />
          <Method Sig="instance class Version get_Version()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="StrongNamePublicKeyBlob">
          <Method Sig="instance void .ctor([] byte )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="UIPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct UIPermissionWindow , struct UIPermissionClipboard )" />
          <Method Sig="instance void .ctor(struct UIPermissionWindow )" />
          <Method Sig="instance void .ctor(struct UIPermissionClipboard )" />
          <Method Sig="instance void set_Window(struct UIPermissionWindow )" />
          <Method Sig="instance struct UIPermissionWindow get_Window()" />
          <Method Sig="instance void set_Clipboard(struct UIPermissionClipboard )" />
          <Method Sig="instance struct UIPermissionClipboard get_Clipboard()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="UrlIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void set_Url(string )" />
          <Method Sig="instance string get_Url()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="ZoneIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct SecurityZone )" />
          <Method Sig="instance void set_SecurityZone(struct SecurityZone )" />
          <Method Sig="instance struct SecurityZone get_SecurityZone()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="GacIdentityPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="GacIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="KeyContainerPermissionAccessEntry">
          <Method Sig="instance void .ctor(string , struct KeyContainerPermissionFlags )" />
          <Method Sig="instance void .ctor(class CspParameters , struct KeyContainerPermissionFlags )" />
          <Method Sig="instance void .ctor(string , string , int , string , int , struct KeyContainerPermissionFlags )" />
          <Method Sig="instance string get_KeyStore()" />
          <Method Sig="instance void set_KeyStore(string )" />
          <Method Sig="instance string get_ProviderName()" />
          <Method Sig="instance void set_ProviderName(string )" />
          <Method Sig="instance int get_ProviderType()" />
          <Method Sig="instance void set_ProviderType(int )" />
          <Method Sig="instance string get_KeyContainerName()" />
          <Method Sig="instance void set_KeyContainerName(string )" />
          <Method Sig="instance int get_KeySpec()" />
          <Method Sig="instance void set_KeySpec(int )" />
          <Method Sig="instance struct KeyContainerPermissionFlags get_Flags()" />
          <Method Sig="instance void set_Flags(struct KeyContainerPermissionFlags )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="KeyContainerPermissionAccessEntryCollection">
          <Method Sig="instance class KeyContainerPermissionAccessEntry get_Item(int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int Add(class KeyContainerPermissionAccessEntry )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int IndexOf(class KeyContainerPermissionAccessEntry )" />
          <Method Sig="instance void Remove(class KeyContainerPermissionAccessEntry )" />
          <Method Sig="instance class KeyContainerPermissionAccessEntryEnumerator GetEnumerator()" />
          <Method Sig="instance void CopyTo([] class KeyContainerPermissionAccessEntry , int )" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
        </Type>
        <Type Name="KeyContainerPermissionAccessEntryEnumerator">
          <Method Sig="instance class KeyContainerPermissionAccessEntry get_Current()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="KeyContainerPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct KeyContainerPermissionFlags )" />
          <Method Sig="instance void .ctor(struct KeyContainerPermissionFlags , [] class KeyContainerPermissionAccessEntry )" />
          <Method Sig="instance struct KeyContainerPermissionFlags get_Flags()" />
          <Method Sig="instance class KeyContainerPermissionAccessEntryCollection get_AccessEntries()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="PublisherIdentityPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(class X509Certificate )" />
          <Method Sig="instance void set_Certificate(class X509Certificate )" />
          <Method Sig="instance class X509Certificate get_Certificate()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="RegistryPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct RegistryPermissionAccess , string )" />
          <Method Sig="instance void .ctor(struct RegistryPermissionAccess , struct AccessControlActions , string )" />
          <Method Sig="instance void SetPathList(struct RegistryPermissionAccess , string )" />
          <Method Sig="instance void AddPathList(struct RegistryPermissionAccess , string )" />
          <Method Sig="instance void AddPathList(struct RegistryPermissionAccess , struct AccessControlActions , string )" />
          <Method Sig="instance string GetPathList(struct RegistryPermissionAccess )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
      </Namespace>
      <Type Name="SuppressUnmanagedCodeSecurityAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="UnverifiableCodeAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="AllowPartiallyTrustedCallersAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SecurityCriticalAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct SecurityCriticalScope )" />
        <Method Sig="instance struct SecurityCriticalScope get_Scope()" />
      </Type>
      <Type Name="SecurityTreatAsSafeAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SecurityTransparentAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="HostSecurityManager">
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance struct HostSecurityManagerOptions get_Flags()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class PolicyLevel get_DomainPolicy()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class Evidence ProvideAppDomainEvidence(class Evidence )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class Evidence ProvideAssemblyEvidence(class Assembly , class Evidence )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class ApplicationTrust DetermineApplicationTrust(class Evidence , class Evidence , class TrustManagerContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class PermissionSet ResolvePolicy(class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="PermissionSet">
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor(class PermissionSet )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool IsEmpty()" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class IPermission GetPermission(class Type )" />
        <Method Sig="instance class IPermission SetPermission(class IPermission )" />
        <Method Sig="instance class IPermission AddPermission(class IPermission )" />
        <Method Sig="instance class IPermission RemovePermission(class Type )" />
        <Method Sig="instance bool IsUnrestricted()" />
        <Method Sig="instance bool IsSubsetOf(class PermissionSet )" />
        <Method Sig="instance class PermissionSet Intersect(class PermissionSet )" />
        <Method Sig="instance class PermissionSet Union(class PermissionSet )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void Demand()" />
        <Method Sig="instance void Assert()" />
        <Method Sig="instance void Deny()" />
        <Method Sig="instance void PermitOnly()" />
        <Method Sig="instance class PermissionSet Copy()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance class SecurityElement ToXml()" />
        <Method Sig="[] byte ConvertPermissionSet(string , [] byte , string )" />
        <Method Sig="instance bool ContainsNonCodeAccessPermissions()" />
        <Method Sig="void RevertAssert()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="NamedPermissionSet">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , struct PermissionState )" />
        <Method Sig="instance void .ctor(string , class PermissionSet )" />
        <Method Sig="instance void .ctor(class NamedPermissionSet )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance string get_Description()" />
        <Method Sig="instance void set_Description(string )" />
        <Method Sig="instance class PermissionSet Copy()" />
        <Method Sig="instance class NamedPermissionSet Copy(string )" />
        <Method Sig="instance class SecurityElement ToXml()" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="SecureString">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(* char , int )" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance void AppendChar(char )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance class SecureString Copy()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void InsertAt(int , char )" />
        <Method Sig="instance bool IsReadOnly()" />
        <Method Sig="instance void MakeReadOnly()" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance void SetAt(int , char )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SecurityContext">
        <Method Sig="struct AsyncFlowControl SuppressFlow()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="struct AsyncFlowControl SuppressFlowWindowsIdentity()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void RestoreFlow()" />
        <Method Sig="bool IsFlowSuppressed()" />
        <Method Sig="bool IsWindowsIdentityFlowSuppressed()" />
        <Method Sig="void Run(class SecurityContext , class ContextCallback , object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Infrastructure" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class SecurityContext CreateCopy()" />
        <Method Sig="class SecurityContext Capture()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SecurityException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance void .ctor(string , class Type , string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , class AssemblyName , class PermissionSet , class PermissionSet , class MethodInfo , struct SecurityAction , object , class IPermission , class Evidence )" />
        <Method Sig="instance void .ctor(string , object , object , class MethodInfo , object , class IPermission )" />
        <Method Sig="instance struct SecurityAction get_Action()" />
        <Method Sig="instance void set_Action(struct SecurityAction )" />
        <Method Sig="instance class Type get_PermissionType()" />
        <Method Sig="instance void set_PermissionType(class Type )" />
        <Method Sig="instance class IPermission get_FirstPermissionThatFailed()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_FirstPermissionThatFailed(class IPermission )" />
        <Method Sig="instance string get_PermissionState()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_PermissionState(string )" />
        <Method Sig="instance object get_Demanded()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Demanded(object )" />
        <Method Sig="instance string get_GrantedSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_GrantedSet(string )" />
        <Method Sig="instance string get_RefusedSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_RefusedSet(string )" />
        <Method Sig="instance object get_DenySetInstance()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_DenySetInstance(object )" />
        <Method Sig="instance object get_PermitOnlySetInstance()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_PermitOnlySetInstance(object )" />
        <Method Sig="instance class AssemblyName get_FailedAssemblyInfo()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_FailedAssemblyInfo(class AssemblyName )" />
        <Method Sig="instance class MethodInfo get_Method()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Method(class MethodInfo )" />
        <Method Sig="instance struct SecurityZone get_Zone()" />
        <Method Sig="instance void set_Zone(struct SecurityZone )" />
        <Method Sig="instance string get_Url()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Url(string )" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="HostProtectionException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , struct HostProtectionResource , struct HostProtectionResource )" />
        <Method Sig="instance struct HostProtectionResource get_ProtectedResources()" />
        <Method Sig="instance struct HostProtectionResource get_DemandedResources()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="SecurityManager">
        <Method Sig="bool IsGranted(class IPermission )" />
        <Method Sig="void GetZoneAndOrigin(&amp; class ArrayList , &amp; class ArrayList )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Name="System.Windows.Forms" PublicKeyBlob="00000000000000000400000000000000" version="1" class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class PolicyLevel LoadPolicyLevelFromFile(string , struct PolicyLevelType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PolicyLevel LoadPolicyLevelFromString(string , struct PolicyLevelType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void SavePolicyLevel(class PolicyLevel )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PermissionSet ResolvePolicy(class Evidence , class PermissionSet , class PermissionSet , class PermissionSet , &amp; class PermissionSet )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PermissionSet ResolvePolicy(class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PermissionSet ResolvePolicy([] class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PermissionSet ResolveSystemPolicy(class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IEnumerator ResolvePolicyGroups(class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IEnumerator PolicyHierarchy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void SavePolicy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_CheckExecutionRights()" />
        <Method Sig="void set_CheckExecutionRights(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_SecurityEnabled()" />
        <Method Sig="void set_SecurityEnabled(bool )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="VerificationException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Namespace Name="Cryptography">
        <Type Name="KeySizes">
          <Method Sig="instance int get_MinSize()" />
          <Method Sig="instance int get_MaxSize()" />
          <Method Sig="instance int get_SkipSize()" />
          <Method Sig="instance void .ctor(int , int , int )" />
        </Type>
        <Type Name="CryptographicException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(int )" />
        </Type>
        <Type Name="CryptographicUnexpectedOperationException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="RandomNumberGenerator">
          <Method Sig="class RandomNumberGenerator Create()" />
          <Method Sig="class RandomNumberGenerator Create(string )" />
          <Method Sig="instance void GetBytes([] byte )" />
          <Method Sig="instance void GetNonZeroBytes([] byte )" />
        </Type>
        <Type Name="RNGCryptoServiceProvider">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GetBytes([] byte )" />
          <Method Sig="instance void GetNonZeroBytes([] byte )" />
        </Type>
        <Type Name="AsymmetricAlgorithm">
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int get_KeySize()" />
          <Method Sig="instance void set_KeySize(int )" />
          <Method Sig="instance [] class KeySizes get_LegalKeySizes()" />
          <Method Sig="instance string get_SignatureAlgorithm()" />
          <Method Sig="instance string get_KeyExchangeAlgorithm()" />
          <Method Sig="class AsymmetricAlgorithm Create()" />
          <Method Sig="class AsymmetricAlgorithm Create(string )" />
          <Method Sig="instance void FromXmlString(string )" />
          <Method Sig="instance string ToXmlString(bool )" />
        </Type>
        <Type Name="AsymmetricKeyExchangeDeformatter">
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance void set_Parameters(string )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance [] byte DecryptKeyExchange([] byte )" />
        </Type>
        <Type Name="AsymmetricKeyExchangeFormatter">
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance [] byte CreateKeyExchange([] byte )" />
          <Method Sig="instance [] byte CreateKeyExchange([] byte , class Type )" />
        </Type>
        <Type Name="AsymmetricSignatureDeformatter">
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance bool VerifySignature(class HashAlgorithm , [] byte )" />
          <Method Sig="instance bool VerifySignature([] byte , [] byte )" />
        </Type>
        <Type Name="AsymmetricSignatureFormatter">
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance [] byte CreateSignature(class HashAlgorithm )" />
          <Method Sig="instance [] byte CreateSignature([] byte )" />
        </Type>
        <Type Name="ToBase64Transform">
          <Method Sig="instance int get_InputBlockSize()" />
          <Method Sig="instance int get_OutputBlockSize()" />
          <Method Sig="instance bool get_CanTransformMultipleBlocks()" />
          <Method Sig="instance bool get_CanReuseTransform()" />
          <Method Sig="instance int TransformBlock([] byte , int , int , [] byte , int )" />
          <Method Sig="instance [] byte TransformFinalBlock([] byte , int , int )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="FromBase64Transform">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct FromBase64TransformMode )" />
          <Method Sig="instance int get_InputBlockSize()" />
          <Method Sig="instance int get_OutputBlockSize()" />
          <Method Sig="instance bool get_CanTransformMultipleBlocks()" />
          <Method Sig="instance bool get_CanReuseTransform()" />
          <Method Sig="instance int TransformBlock([] byte , int , int , [] byte , int )" />
          <Method Sig="instance [] byte TransformFinalBlock([] byte , int , int )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="CryptoAPITransform">
          <Method Sig="instance void Clear()" />
          <Method Sig="instance intptr get_KeyHandle()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_InputBlockSize()" />
          <Method Sig="instance int get_OutputBlockSize()" />
          <Method Sig="instance bool get_CanTransformMultipleBlocks()" />
          <Method Sig="instance bool get_CanReuseTransform()" />
          <Method Sig="instance void Reset()" />
          <Method Sig="instance int TransformBlock([] byte , int , int , [] byte , int )" />
          <Method Sig="instance [] byte TransformFinalBlock([] byte , int , int )" />
        </Type>
        <Type Name="CspParameters">
          <Method Sig="instance struct CspProviderFlags get_Flags()" />
          <Method Sig="instance void set_Flags(struct CspProviderFlags )" />
          <Method Sig="instance class CryptoKeySecurity get_CryptoKeySecurity()" />
          <Method Sig="instance void set_CryptoKeySecurity(class CryptoKeySecurity )" />
          <Method Sig="instance class SecureString get_KeyPassword()" />
          <Method Sig="instance void set_KeyPassword(class SecureString )" />
          <Method Sig="instance intptr get_ParentWindowHandle()" />
          <Method Sig="instance void set_ParentWindowHandle(intptr )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(int , string )" />
          <Method Sig="instance void .ctor(int , string , string )" />
          <Method Sig="instance void .ctor(int , string , string , class CryptoKeySecurity , class SecureString )" />
          <Method Sig="instance void .ctor(int , string , string , class CryptoKeySecurity , intptr )" />
        </Type>
        <Type Name="CryptoConfig">
          <Method Sig="object CreateFromName(string , [] object )" />
          <Method Sig="object CreateFromName(string )" />
          <Method Sig="string MapNameToOID(string )" />
          <Method Sig="[] byte EncodeOID(string )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="CryptoStream">
          <Method Sig="instance void .ctor(class Stream , class ICryptoTransform , struct CryptoStreamMode )" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance void FlushFinalBlock()" />
          <Method Sig="instance void Flush()" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance void SetLength(in64 )" />
          <Method Sig="instance int Read([] byte , int , int )" />
          <Method Sig="instance void Write([] byte , int , int )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="SymmetricAlgorithm">
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int get_BlockSize()" />
          <Method Sig="instance void set_BlockSize(int )" />
          <Method Sig="instance int get_FeedbackSize()" />
          <Method Sig="instance void set_FeedbackSize(int )" />
          <Method Sig="instance [] byte get_IV()" />
          <Method Sig="instance void set_IV([] byte )" />
          <Method Sig="instance [] byte get_Key()" />
          <Method Sig="instance void set_Key([] byte )" />
          <Method Sig="instance [] class KeySizes get_LegalBlockSizes()" />
          <Method Sig="instance [] class KeySizes get_LegalKeySizes()" />
          <Method Sig="instance int get_KeySize()" />
          <Method Sig="instance void set_KeySize(int )" />
          <Method Sig="instance struct CipherMode get_Mode()" />
          <Method Sig="instance void set_Mode(struct CipherMode )" />
          <Method Sig="instance struct PaddingMode get_Padding()" />
          <Method Sig="instance void set_Padding(struct PaddingMode )" />
          <Method Sig="instance bool ValidKeySize(int )" />
          <Method Sig="class SymmetricAlgorithm Create()" />
          <Method Sig="class SymmetricAlgorithm Create(string )" />
          <Method Sig="instance class ICryptoTransform CreateEncryptor()" />
          <Method Sig="instance class ICryptoTransform CreateEncryptor([] byte , [] byte )" />
          <Method Sig="instance class ICryptoTransform CreateDecryptor()" />
          <Method Sig="instance class ICryptoTransform CreateDecryptor([] byte , [] byte )" />
          <Method Sig="instance void GenerateKey()" />
          <Method Sig="instance void GenerateIV()" />
        </Type>
        <Type Name="DES">
          <Method Sig="instance [] byte get_Key()" />
          <Method Sig="instance void set_Key([] byte )" />
          <Method Sig="class DES Create()" />
          <Method Sig="class DES Create(string )" />
          <Method Sig="bool IsWeakKey([] byte )" />
          <Method Sig="bool IsSemiWeakKey([] byte )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="DESCryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateEncryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateDecryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GenerateKey()" />
          <Method Sig="instance void GenerateIV()" />
        </Type>
        <Type Name="DeriveBytes">
          <Method Sig="instance [] byte GetBytes(int )" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="DSA">
          <Method Sig="class DSA Create()" />
          <Method Sig="class DSA Create(string )" />
          <Method Sig="instance [] byte CreateSignature([] byte )" />
          <Method Sig="instance bool VerifySignature([] byte , [] byte )" />
          <Method Sig="instance void FromXmlString(string )" />
          <Method Sig="instance string ToXmlString(bool )" />
          <Method Sig="instance struct DSAParameters ExportParameters(bool )" />
          <Method Sig="instance void ImportParameters(struct DSAParameters )" />
        </Type>
        <Type Name="DSACryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int , class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_PublicOnly()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CspKeyContainerInfo get_CspKeyContainerInfo()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_KeySize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_KeyExchangeAlgorithm()" />
          <Method Sig="instance string get_SignatureAlgorithm()" />
          <Method Sig="bool get_UseMachineKeyStore()" />
          <Method Sig="void set_UseMachineKeyStore(bool )" />
          <Method Sig="instance bool get_PersistKeyInCsp()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_PersistKeyInCsp(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct DSAParameters ExportParameters(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte ExportCspBlob(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ImportParameters(struct DSAParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ImportCspBlob([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData(class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool VerifyData([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte CreateSignature([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool VerifySignature([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignHash([] byte , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool VerifyHash([] byte , string , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="DSASignatureDeformatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance bool VerifySignature([] byte , [] byte )" />
        </Type>
        <Type Name="DSASignatureFormatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance [] byte CreateSignature([] byte )" />
        </Type>
        <Type Name="HashAlgorithm">
          <Method Sig="instance int get_HashSize()" />
          <Method Sig="instance [] byte get_Hash()" />
          <Method Sig="class HashAlgorithm Create()" />
          <Method Sig="class HashAlgorithm Create(string )" />
          <Method Sig="instance [] byte ComputeHash(class Stream )" />
          <Method Sig="instance [] byte ComputeHash([] byte )" />
          <Method Sig="instance [] byte ComputeHash([] byte , int , int )" />
          <Method Sig="instance int get_InputBlockSize()" />
          <Method Sig="instance int get_OutputBlockSize()" />
          <Method Sig="instance bool get_CanTransformMultipleBlocks()" />
          <Method Sig="instance bool get_CanReuseTransform()" />
          <Method Sig="instance int TransformBlock([] byte , int , int , [] byte , int )" />
          <Method Sig="instance [] byte TransformFinalBlock([] byte , int , int )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void Initialize()" />
        </Type>
        <Type Name="KeyedHashAlgorithm">
          <Method Sig="instance [] byte get_Key()" />
          <Method Sig="instance void set_Key([] byte )" />
          <Method Sig="class KeyedHashAlgorithm Create()" />
          <Method Sig="class KeyedHashAlgorithm Create(string )" />
        </Type>
        <Type Name="HMAC">
          <Method Sig="instance [] byte get_Key()" />
          <Method Sig="instance void set_Key([] byte )" />
          <Method Sig="instance string get_HashName()" />
          <Method Sig="instance void set_HashName(string )" />
          <Method Sig="class HMAC Create()" />
          <Method Sig="class HMAC Create(string )" />
          <Method Sig="instance void Initialize()" />
        </Type>
        <Type Name="HMACMD5">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="HMACRIPEMD160">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="HMACSHA1">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="HMACSHA256">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="HMACSHA384">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="HMACSHA512">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="CspKeyContainerInfo">
          <Method Sig="instance void .ctor(class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_MachineKeyStore()" />
          <Method Sig="instance string get_ProviderName()" />
          <Method Sig="instance int get_ProviderType()" />
          <Method Sig="instance string get_KeyContainerName()" />
          <Method Sig="instance string get_UniqueKeyContainerName()" />
          <Method Sig="instance struct KeyNumber get_KeyNumber()" />
          <Method Sig="instance bool get_Exportable()" />
          <Method Sig="instance bool get_HardwareDevice()" />
          <Method Sig="instance bool get_Removable()" />
          <Method Sig="instance bool get_Accessible()" />
          <Method Sig="instance bool get_Protected()" />
          <Method Sig="instance class CryptoKeySecurity get_CryptoKeySecurity()" />
          <Method Sig="instance bool get_RandomlyGenerated()" />
        </Type>
        <Type Name="MACTripleDES">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor([] byte )" />
          <Method Sig="instance void .ctor(string , [] byte )" />
          <Method Sig="instance void Initialize()" />
          <Method Sig="instance struct PaddingMode get_Padding()" />
          <Method Sig="instance void set_Padding(struct PaddingMode )" />
        </Type>
        <Type Name="MD5">
          <Method Sig="class MD5 Create()" />
          <Method Sig="class MD5 Create(string )" />
        </Type>
        <Type Name="MD5CryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="MaskGenerationMethod">
          <Method Sig="instance [] byte GenerateMask([] byte , int )" />
        </Type>
        <Type Name="PasswordDeriveBytes">
          <Method Sig="instance void .ctor(string , [] byte )" />
          <Method Sig="instance void .ctor([] byte , [] byte )" />
          <Method Sig="instance void .ctor(string , [] byte , string , int )" />
          <Method Sig="instance void .ctor([] byte , [] byte , string , int )" />
          <Method Sig="instance void .ctor(string , [] byte , class CspParameters )" />
          <Method Sig="instance void .ctor([] byte , [] byte , class CspParameters )" />
          <Method Sig="instance void .ctor(string , [] byte , string , int , class CspParameters )" />
          <Method Sig="instance void .ctor([] byte , [] byte , string , int , class CspParameters )" />
          <Method Sig="instance string get_HashName()" />
          <Method Sig="instance void set_HashName(string )" />
          <Method Sig="instance int get_IterationCount()" />
          <Method Sig="instance void set_IterationCount(int )" />
          <Method Sig="instance [] byte get_Salt()" />
          <Method Sig="instance void set_Salt([] byte )" />
          <Method Sig="instance [] byte GetBytes(int )" />
          <Method Sig="instance void Reset()" />
          <Method Sig="instance [] byte CryptDeriveKey(string , string , int , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="PKCS1MaskGenerationMethod">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance string get_HashName()" />
          <Method Sig="instance void set_HashName(string )" />
          <Method Sig="instance [] byte GenerateMask([] byte , int )" />
        </Type>
        <Type Name="RC2">
          <Method Sig="instance int get_EffectiveKeySize()" />
          <Method Sig="instance void set_EffectiveKeySize(int )" />
          <Method Sig="instance int get_KeySize()" />
          <Method Sig="instance void set_KeySize(int )" />
          <Method Sig="class RC2 Create()" />
          <Method Sig="class RC2 Create(string )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="RC2CryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_EffectiveKeySize()" />
          <Method Sig="instance void set_EffectiveKeySize(int )" />
          <Method Sig="instance bool get_UseSalt()" />
          <Method Sig="instance void set_UseSalt(bool )" />
          <Method Sig="instance class ICryptoTransform CreateEncryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateDecryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GenerateKey()" />
          <Method Sig="instance void GenerateIV()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="Rfc2898DeriveBytes">
          <Method Sig="instance void .ctor(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , [] byte , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor([] byte , [] byte , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_IterationCount()" />
          <Method Sig="instance void set_IterationCount(int )" />
          <Method Sig="instance [] byte get_Salt()" />
          <Method Sig="instance void set_Salt([] byte )" />
          <Method Sig="instance [] byte GetBytes(int )" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="RIPEMD160">
          <Method Sig="class RIPEMD160 Create()" />
          <Method Sig="class RIPEMD160 Create(string )" />
        </Type>
        <Type Name="RIPEMD160Managed">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
        </Type>
        <Type Name="RSA">
          <Method Sig="class RSA Create()" />
          <Method Sig="class RSA Create(string )" />
          <Method Sig="instance [] byte DecryptValue([] byte )" />
          <Method Sig="instance [] byte EncryptValue([] byte )" />
          <Method Sig="instance void FromXmlString(string )" />
          <Method Sig="instance string ToXmlString(bool )" />
          <Method Sig="instance struct RSAParameters ExportParameters(bool )" />
          <Method Sig="instance void ImportParameters(struct RSAParameters )" />
        </Type>
        <Type Name="RSACryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int , class CspParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Window="SafeTopLevelWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_PublicOnly()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class CspKeyContainerInfo get_CspKeyContainerInfo()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_KeySize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_KeyExchangeAlgorithm()" />
          <Method Sig="instance string get_SignatureAlgorithm()" />
          <Method Sig="bool get_UseMachineKeyStore()" />
          <Method Sig="void set_UseMachineKeyStore(bool )" />
          <Method Sig="instance bool get_PersistKeyInCsp()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_PersistKeyInCsp(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct RSAParameters ExportParameters(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte ExportCspBlob(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ImportParameters(struct RSAParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ImportCspBlob([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData(class Stream , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData([] byte , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignData([] byte , int , int , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool VerifyData([] byte , object , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte SignHash([] byte , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool VerifyHash([] byte , string , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte Encrypt([] byte , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte Decrypt([] byte , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte DecryptValue([] byte )" />
          <Method Sig="instance [] byte EncryptValue([] byte )" />
        </Type>
        <Type Name="RSAOAEPKeyExchangeDeformatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance void set_Parameters(string )" />
          <Method Sig="instance [] byte DecryptKeyExchange([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
        </Type>
        <Type Name="RSAOAEPKeyExchangeFormatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance [] byte get_Parameter()" />
          <Method Sig="instance void set_Parameter([] byte )" />
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance class RandomNumberGenerator get_Rng()" />
          <Method Sig="instance void set_Rng(class RandomNumberGenerator )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance [] byte CreateKeyExchange([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte CreateKeyExchange([] byte , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="RSAPKCS1KeyExchangeDeformatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance class RandomNumberGenerator get_RNG()" />
          <Method Sig="instance void set_RNG(class RandomNumberGenerator )" />
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance void set_Parameters(string )" />
          <Method Sig="instance [] byte DecryptKeyExchange([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
        </Type>
        <Type Name="RSAPKCS1KeyExchangeFormatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance string get_Parameters()" />
          <Method Sig="instance class RandomNumberGenerator get_Rng()" />
          <Method Sig="instance void set_Rng(class RandomNumberGenerator )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance [] byte CreateKeyExchange([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte CreateKeyExchange([] byte , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="RSAPKCS1SignatureDeformatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance bool VerifySignature([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="RSAPKCS1SignatureFormatter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetKey(class AsymmetricAlgorithm )" />
          <Method Sig="instance void SetHashAlgorithm(string )" />
          <Method Sig="instance [] byte CreateSignature([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="Rijndael">
          <Method Sig="class Rijndael Create()" />
          <Method Sig="class Rijndael Create(string )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="RijndaelManaged">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateEncryptor([] byte , [] byte )" />
          <Method Sig="instance class ICryptoTransform CreateDecryptor([] byte , [] byte )" />
          <Method Sig="instance void GenerateKey()" />
          <Method Sig="instance void GenerateIV()" />
        </Type>
        <Type Name="RijndaelManagedTransform">
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int get_BlockSizeValue()" />
          <Method Sig="instance int get_InputBlockSize()" />
          <Method Sig="instance int get_OutputBlockSize()" />
          <Method Sig="instance bool get_CanTransformMultipleBlocks()" />
          <Method Sig="instance bool get_CanReuseTransform()" />
          <Method Sig="instance int TransformBlock([] byte , int , int , [] byte , int )" />
          <Method Sig="instance [] byte TransformFinalBlock([] byte , int , int )" />
          <Method Sig="instance void Reset()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SHA1">
          <Method Sig="class SHA1 Create()" />
          <Method Sig="class SHA1 Create(string )" />
        </Type>
        <Type Name="SHA1CryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="SHA1Managed">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
        </Type>
        <Type Name="SHA256">
          <Method Sig="class SHA256 Create()" />
          <Method Sig="class SHA256 Create(string )" />
        </Type>
        <Type Name="SHA256Managed">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SHA384">
          <Method Sig="class SHA384 Create()" />
          <Method Sig="class SHA384 Create(string )" />
        </Type>
        <Type Name="SHA384Managed">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SHA512">
          <Method Sig="class SHA512 Create()" />
          <Method Sig="class SHA512 Create(string )" />
        </Type>
        <Type Name="SHA512Managed">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SignatureDescription">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class SecurityElement )" />
          <Method Sig="instance string get_KeyAlgorithm()" />
          <Method Sig="instance void set_KeyAlgorithm(string )" />
          <Method Sig="instance string get_DigestAlgorithm()" />
          <Method Sig="instance void set_DigestAlgorithm(string )" />
          <Method Sig="instance string get_FormatterAlgorithm()" />
          <Method Sig="instance void set_FormatterAlgorithm(string )" />
          <Method Sig="instance string get_DeformatterAlgorithm()" />
          <Method Sig="instance void set_DeformatterAlgorithm(string )" />
          <Method Sig="instance class AsymmetricSignatureDeformatter CreateDeformatter(class AsymmetricAlgorithm )" />
          <Method Sig="instance class AsymmetricSignatureFormatter CreateFormatter(class AsymmetricAlgorithm )" />
          <Method Sig="instance class HashAlgorithm CreateDigest()" />
        </Type>
        <Type Name="TripleDES">
          <Method Sig="instance [] byte get_Key()" />
          <Method Sig="instance void set_Key([] byte )" />
          <Method Sig="class TripleDES Create()" />
          <Method Sig="class TripleDES Create(string )" />
          <Method Sig="bool IsWeakKey([] byte )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="TripleDESCryptoServiceProvider">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateEncryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICryptoTransform CreateDecryptor([] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GenerateKey()" />
          <Method Sig="instance void GenerateIV()" />
        </Type>
        <Namespace Name="X509Certificates">
          <Type Name="X509Certificate">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor([] byte )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , class SecureString )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , class SecureString )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class X509Certificate )" />
            <Method Sig="instance void .ctor(class SerializationInfo , struct StreamingContext )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="class X509Certificate CreateFromCertFile(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="class X509Certificate CreateFromSignedFile(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance intptr get_Handle()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance string GetName()" />
            <Method Sig="instance string GetIssuerName()" />
            <Method Sig="instance [] byte GetSerialNumber()" />
            <Method Sig="instance string GetSerialNumberString()" />
            <Method Sig="instance [] byte GetKeyAlgorithmParameters()" />
            <Method Sig="instance string GetKeyAlgorithmParametersString()" />
            <Method Sig="instance string GetKeyAlgorithm()" />
            <Method Sig="instance [] byte GetPublicKey()" />
            <Method Sig="instance string GetPublicKeyString()" />
            <Method Sig="instance [] byte GetRawCertData()" />
            <Method Sig="instance string GetRawCertDataString()" />
            <Method Sig="instance [] byte GetCertHash()" />
            <Method Sig="instance string GetCertHashString()" />
            <Method Sig="instance string GetEffectiveDateString()" />
            <Method Sig="instance string GetExpirationDateString()" />
            <Method Sig="instance bool Equals(object )" />
            <Method Sig="instance bool Equals(class X509Certificate )" />
            <Method Sig="instance int GetHashCode()" />
            <Method Sig="instance string ToString()" />
            <Method Sig="instance string ToString(bool )" />
            <Method Sig="instance string GetFormat()" />
            <Method Sig="instance string get_Issuer()" />
            <Method Sig="instance string get_Subject()" />
            <Method Sig="instance void Import([] byte )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Create" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance [] byte Export(struct X509ContentType )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Open, Export" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance [] byte Export(struct X509ContentType , string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Open, Export" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance [] byte Export(struct X509ContentType , class SecureString )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="Open, Export" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Reset()" />
          </Type>
        </Namespace>
      </Namespace>
      <Namespace Name="AccessControl">
        <Type Name="GenericAce">
          <Method Sig="class GenericAce CreateFromBinaryForm([] byte , int )" />
          <Method Sig="instance struct AceType get_AceType()" />
          <Method Sig="instance struct AceFlags get_AceFlags()" />
          <Method Sig="instance void set_AceFlags(struct AceFlags )" />
          <Method Sig="instance bool get_IsInherited()" />
          <Method Sig="instance struct InheritanceFlags get_InheritanceFlags()" />
          <Method Sig="instance struct PropagationFlags get_PropagationFlags()" />
          <Method Sig="instance struct AuditFlags get_AuditFlags()" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="instance class GenericAce Copy()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="bool op_Equality(class GenericAce , class GenericAce )" />
          <Method Sig="bool op_Inequality(class GenericAce , class GenericAce )" />
        </Type>
        <Type Name="KnownAce">
          <Method Sig="instance int get_AccessMask()" />
          <Method Sig="instance void set_AccessMask(int )" />
          <Method Sig="instance class SecurityIdentifier get_SecurityIdentifier()" />
          <Method Sig="instance void set_SecurityIdentifier(class SecurityIdentifier )" />
        </Type>
        <Type Name="CustomAce">
          <Method Sig="instance void .ctor(struct AceType , struct AceFlags , [] byte )" />
          <Method Sig="instance int get_OpaqueLength()" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance [] byte GetOpaque()" />
          <Method Sig="instance void SetOpaque([] byte )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="CompoundAce">
          <Method Sig="instance void .ctor(struct AceFlags , int , struct CompoundAceType , class SecurityIdentifier )" />
          <Method Sig="instance struct CompoundAceType get_CompoundAceType()" />
          <Method Sig="instance void set_CompoundAceType(struct CompoundAceType )" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
        </Type>
        <Type Name="QualifiedAce">
          <Method Sig="instance struct AceQualifier get_AceQualifier()" />
          <Method Sig="instance bool get_IsCallback()" />
          <Method Sig="instance int get_OpaqueLength()" />
          <Method Sig="instance [] byte GetOpaque()" />
          <Method Sig="instance void SetOpaque([] byte )" />
        </Type>
        <Type Name="CommonAce">
          <Method Sig="instance void .ctor(struct AceFlags , struct AceQualifier , int , class SecurityIdentifier , bool , [] byte )" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="int MaxOpaqueLength(bool )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
        </Type>
        <Type Name="ObjectAce">
          <Method Sig="instance void .ctor(struct AceFlags , struct AceQualifier , int , class SecurityIdentifier , struct ObjectAceFlags , struct Guid , struct Guid , bool , [] byte )" />
          <Method Sig="instance struct ObjectAceFlags get_ObjectAceFlags()" />
          <Method Sig="instance void set_ObjectAceFlags(struct ObjectAceFlags )" />
          <Method Sig="instance struct Guid get_ObjectAceType()" />
          <Method Sig="instance void set_ObjectAceType(struct Guid )" />
          <Method Sig="instance struct Guid get_InheritedObjectAceType()" />
          <Method Sig="instance void set_InheritedObjectAceType(struct Guid )" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="int MaxOpaqueLength(bool )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="AceEnumerator">
          <Method Sig="instance class GenericAce get_Current()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="GenericAcl">
          <Method Sig="instance byte get_Revision()" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance class GenericAce get_Item(int )" />
          <Method Sig="instance void set_Item(int , class GenericAce )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="instance void CopyTo([] class GenericAce , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance class AceEnumerator GetEnumerator()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="RawAcl">
          <Method Sig="instance void .ctor(byte , int )" />
          <Method Sig="instance void .ctor([] byte , int )" />
          <Method Sig="instance byte get_Revision()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="instance class GenericAce get_Item(int )" />
          <Method Sig="instance void set_Item(int , class GenericAce )" />
          <Method Sig="instance void InsertAce(int , class GenericAce )" />
          <Method Sig="instance void RemoveAce(int )" />
        </Type>
        <Type Name="CommonAcl">
          <Method Sig="void .cctor()" />
          <Method Sig="instance byte get_Revision()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance bool get_IsCanonical()" />
          <Method Sig="instance bool get_IsContainer()" />
          <Method Sig="instance bool get_IsDS()" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
          <Method Sig="instance class GenericAce get_Item(int )" />
          <Method Sig="instance void set_Item(int , class GenericAce )" />
          <Method Sig="instance void RemoveInheritedAces()" />
          <Method Sig="instance void Purge(class SecurityIdentifier )" />
        </Type>
        <Type Name="SystemAcl">
          <Method Sig="instance void .ctor(bool , bool , int )" />
          <Method Sig="instance void .ctor(bool , bool , byte , int )" />
          <Method Sig="instance void .ctor(bool , bool , class RawAcl )" />
          <Method Sig="instance void AddAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void SetAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance bool RemoveAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void RemoveAuditSpecific(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void AddAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance void SetAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance bool RemoveAudit(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance void RemoveAuditSpecific(struct AuditFlags , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
        </Type>
        <Type Name="DiscretionaryAcl">
          <Method Sig="instance void .ctor(bool , bool , int )" />
          <Method Sig="instance void .ctor(bool , bool , byte , int )" />
          <Method Sig="instance void .ctor(bool , bool , class RawAcl )" />
          <Method Sig="instance void AddAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void SetAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance bool RemoveAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void RemoveAccessSpecific(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags )" />
          <Method Sig="instance void AddAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance void SetAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance bool RemoveAccess(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="instance void RemoveAccessSpecific(struct AccessControlType , class SecurityIdentifier , int , struct InheritanceFlags , struct PropagationFlags , struct ObjectAceFlags , struct Guid , struct Guid )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="AuthorizationRule">
          <Method Sig="instance class IdentityReference get_IdentityReference()" />
          <Method Sig="instance bool get_IsInherited()" />
          <Method Sig="instance struct InheritanceFlags get_InheritanceFlags()" />
          <Method Sig="instance struct PropagationFlags get_PropagationFlags()" />
        </Type>
        <Type Name="AccessRule">
          <Method Sig="instance struct AccessControlType get_AccessControlType()" />
        </Type>
        <Type Name="CryptoKeyAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct CryptoKeyRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct CryptoKeyRights , struct AccessControlType )" />
          <Method Sig="instance struct CryptoKeyRights get_CryptoKeyRights()" />
        </Type>
        <Type Name="AuditRule">
          <Method Sig="instance struct AuditFlags get_AuditFlags()" />
        </Type>
        <Type Name="CryptoKeyAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct CryptoKeyRights , struct AuditFlags )" />
          <Method Sig="instance void .ctor(string , struct CryptoKeyRights , struct AuditFlags )" />
          <Method Sig="instance struct CryptoKeyRights get_CryptoKeyRights()" />
        </Type>
        <Type Name="ObjectSecurity">
          <Method Sig="instance class IdentityReference GetOwner(class Type )" />
          <Method Sig="instance void SetOwner(class IdentityReference )" />
          <Method Sig="instance class IdentityReference GetGroup(class Type )" />
          <Method Sig="instance void SetGroup(class IdentityReference )" />
          <Method Sig="instance void PurgeAccessRules(class IdentityReference )" />
          <Method Sig="instance void PurgeAuditRules(class IdentityReference )" />
          <Method Sig="instance bool get_AreAccessRulesProtected()" />
          <Method Sig="instance void SetAccessRuleProtection(bool , bool )" />
          <Method Sig="instance bool get_AreAuditRulesProtected()" />
          <Method Sig="instance void SetAuditRuleProtection(bool , bool )" />
          <Method Sig="instance bool get_AreAccessRulesCanonical()" />
          <Method Sig="instance bool get_AreAuditRulesCanonical()" />
          <Method Sig="bool IsSddlConversionSupported()" />
          <Method Sig="instance string GetSecurityDescriptorSddlForm(struct AccessControlSections )" />
          <Method Sig="instance void SetSecurityDescriptorSddlForm(string )" />
          <Method Sig="instance void SetSecurityDescriptorSddlForm(string , struct AccessControlSections )" />
          <Method Sig="instance [] byte GetSecurityDescriptorBinaryForm()" />
          <Method Sig="instance void SetSecurityDescriptorBinaryForm([] byte )" />
          <Method Sig="instance void SetSecurityDescriptorBinaryForm([] byte , struct AccessControlSections )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
          <Method Sig="instance bool ModifyAccessRule(struct AccessControlModification , class AccessRule , &amp; bool )" />
          <Method Sig="instance bool ModifyAuditRule(struct AccessControlModification , class AuditRule , &amp; bool )" />
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="CommonObjectSecurity">
          <Method Sig="instance class AuthorizationRuleCollection GetAccessRules(bool , bool , class Type )" />
          <Method Sig="instance class AuthorizationRuleCollection GetAuditRules(bool , bool , class Type )" />
        </Type>
        <Type Name="CryptoKeySecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class CommonSecurityDescriptor )" />
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class CryptoKeyAccessRule )" />
          <Method Sig="instance void SetAccessRule(class CryptoKeyAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class CryptoKeyAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class CryptoKeyAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class CryptoKeyAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class CryptoKeyAccessRule )" />
          <Method Sig="instance void AddAuditRule(class CryptoKeyAuditRule )" />
          <Method Sig="instance void SetAuditRule(class CryptoKeyAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class CryptoKeyAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class CryptoKeyAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class CryptoKeyAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
        <Type Name="EventWaitHandleAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct EventWaitHandleRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct EventWaitHandleRights , struct AccessControlType )" />
          <Method Sig="instance struct EventWaitHandleRights get_EventWaitHandleRights()" />
        </Type>
        <Type Name="EventWaitHandleAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct EventWaitHandleRights , struct AuditFlags )" />
          <Method Sig="instance struct EventWaitHandleRights get_EventWaitHandleRights()" />
        </Type>
        <Type Name="EventWaitHandleSecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class EventWaitHandleAccessRule )" />
          <Method Sig="instance void SetAccessRule(class EventWaitHandleAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class EventWaitHandleAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class EventWaitHandleAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class EventWaitHandleAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class EventWaitHandleAccessRule )" />
          <Method Sig="instance void AddAuditRule(class EventWaitHandleAuditRule )" />
          <Method Sig="instance void SetAuditRule(class EventWaitHandleAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class EventWaitHandleAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class EventWaitHandleAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class EventWaitHandleAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
        <Type Name="FileSystemAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct FileSystemRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct FileSystemRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(class IdentityReference , struct FileSystemRights , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct FileSystemRights , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance struct FileSystemRights get_FileSystemRights()" />
        </Type>
        <Type Name="FileSystemAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct FileSystemRights , struct AuditFlags )" />
          <Method Sig="instance void .ctor(class IdentityReference , struct FileSystemRights , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void .ctor(string , struct FileSystemRights , struct AuditFlags )" />
          <Method Sig="instance void .ctor(string , struct FileSystemRights , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance struct FileSystemRights get_FileSystemRights()" />
        </Type>
        <Type Name="FileSystemSecurity">
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class FileSystemAccessRule )" />
          <Method Sig="instance void SetAccessRule(class FileSystemAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class FileSystemAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class FileSystemAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class FileSystemAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class FileSystemAccessRule )" />
          <Method Sig="instance void AddAuditRule(class FileSystemAuditRule )" />
          <Method Sig="instance void SetAuditRule(class FileSystemAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class FileSystemAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class FileSystemAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class FileSystemAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
        <Type Name="FileSecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , struct AccessControlSections )" />
        </Type>
        <Type Name="DirectorySecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , struct AccessControlSections )" />
        </Type>
        <Type Name="MutexAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct MutexRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct MutexRights , struct AccessControlType )" />
          <Method Sig="instance struct MutexRights get_MutexRights()" />
        </Type>
        <Type Name="MutexAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct MutexRights , struct AuditFlags )" />
          <Method Sig="instance struct MutexRights get_MutexRights()" />
        </Type>
        <Type Name="MutexSecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , struct AccessControlSections )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class MutexAccessRule )" />
          <Method Sig="instance void SetAccessRule(class MutexAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class MutexAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class MutexAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class MutexAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class MutexAccessRule )" />
          <Method Sig="instance void AddAuditRule(class MutexAuditRule )" />
          <Method Sig="instance void SetAuditRule(class MutexAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class MutexAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class MutexAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class MutexAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
        <Type Name="DirectoryObjectSecurity">
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType , struct Guid , struct Guid )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags , struct Guid , struct Guid )" />
          <Method Sig="instance class AuthorizationRuleCollection GetAccessRules(bool , bool , class Type )" />
          <Method Sig="instance class AuthorizationRuleCollection GetAuditRules(bool , bool , class Type )" />
        </Type>
        <Type Name="PrivilegeNotHeldException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance string get_PrivilegeName()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="RegistryAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct RegistryRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct RegistryRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(class IdentityReference , struct RegistryRights , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct RegistryRights , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance struct RegistryRights get_RegistryRights()" />
        </Type>
        <Type Name="RegistryAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct RegistryRights , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void .ctor(string , struct RegistryRights , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance struct RegistryRights get_RegistryRights()" />
        </Type>
        <Type Name="RegistrySecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class RegistryAccessRule )" />
          <Method Sig="instance void SetAccessRule(class RegistryAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class RegistryAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class RegistryAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class RegistryAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class RegistryAccessRule )" />
          <Method Sig="instance void AddAuditRule(class RegistryAuditRule )" />
          <Method Sig="instance void SetAuditRule(class RegistryAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class RegistryAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class RegistryAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class RegistryAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
        <Type Name="ObjectAccessRule">
          <Method Sig="instance struct Guid get_ObjectType()" />
          <Method Sig="instance struct Guid get_InheritedObjectType()" />
          <Method Sig="instance struct ObjectAceFlags get_ObjectFlags()" />
        </Type>
        <Type Name="ObjectAuditRule">
          <Method Sig="instance struct Guid get_ObjectType()" />
          <Method Sig="instance struct Guid get_InheritedObjectType()" />
          <Method Sig="instance struct ObjectAceFlags get_ObjectFlags()" />
        </Type>
        <Type Name="AuthorizationRuleCollection">
          <Method Sig="instance void CopyTo([] class AuthorizationRule , int )" />
          <Method Sig="instance class AuthorizationRule get_Item(int )" />
        </Type>
        <Type Name="GenericSecurityDescriptor">
          <Method Sig="bool IsSddlConversionSupported()" />
          <Method Sig="byte get_Revision()" />
          <Method Sig="instance struct ControlFlags get_ControlFlags()" />
          <Method Sig="instance class SecurityIdentifier get_Owner()" />
          <Method Sig="instance void set_Owner(class SecurityIdentifier )" />
          <Method Sig="instance class SecurityIdentifier get_Group()" />
          <Method Sig="instance void set_Group(class SecurityIdentifier )" />
          <Method Sig="instance int get_BinaryLength()" />
          <Method Sig="instance string GetSddlForm(struct AccessControlSections )" />
          <Method Sig="instance void GetBinaryForm([] byte , int )" />
        </Type>
        <Type Name="RawSecurityDescriptor">
          <Method Sig="instance void .ctor(struct ControlFlags , class SecurityIdentifier , class SecurityIdentifier , class RawAcl , class RawAcl )" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor([] byte , int )" />
          <Method Sig="instance struct ControlFlags get_ControlFlags()" />
          <Method Sig="instance class SecurityIdentifier get_Owner()" />
          <Method Sig="instance void set_Owner(class SecurityIdentifier )" />
          <Method Sig="instance class SecurityIdentifier get_Group()" />
          <Method Sig="instance void set_Group(class SecurityIdentifier )" />
          <Method Sig="instance class RawAcl get_SystemAcl()" />
          <Method Sig="instance void set_SystemAcl(class RawAcl )" />
          <Method Sig="instance class RawAcl get_DiscretionaryAcl()" />
          <Method Sig="instance void set_DiscretionaryAcl(class RawAcl )" />
          <Method Sig="instance byte get_ResourceManagerControl()" />
          <Method Sig="instance void set_ResourceManagerControl(byte )" />
          <Method Sig="instance void SetFlags(struct ControlFlags )" />
        </Type>
        <Type Name="CommonSecurityDescriptor">
          <Method Sig="instance void .ctor(bool , bool , struct ControlFlags , class SecurityIdentifier , class SecurityIdentifier , class SystemAcl , class DiscretionaryAcl )" />
          <Method Sig="instance void .ctor(bool , bool , class RawSecurityDescriptor )" />
          <Method Sig="instance void .ctor(bool , bool , string )" />
          <Method Sig="instance void .ctor(bool , bool , [] byte , int )" />
          <Method Sig="instance bool get_IsContainer()" />
          <Method Sig="instance bool get_IsDS()" />
          <Method Sig="instance struct ControlFlags get_ControlFlags()" />
          <Method Sig="instance class SecurityIdentifier get_Owner()" />
          <Method Sig="instance void set_Owner(class SecurityIdentifier )" />
          <Method Sig="instance class SecurityIdentifier get_Group()" />
          <Method Sig="instance void set_Group(class SecurityIdentifier )" />
          <Method Sig="instance class SystemAcl get_SystemAcl()" />
          <Method Sig="instance void set_SystemAcl(class SystemAcl )" />
          <Method Sig="instance class DiscretionaryAcl get_DiscretionaryAcl()" />
          <Method Sig="instance void set_DiscretionaryAcl(class DiscretionaryAcl )" />
          <Method Sig="instance bool get_IsSystemAclCanonical()" />
          <Method Sig="instance bool get_IsDiscretionaryAclCanonical()" />
          <Method Sig="instance void SetSystemAclProtection(bool , bool )" />
          <Method Sig="instance void SetDiscretionaryAclProtection(bool , bool )" />
          <Method Sig="instance void PurgeAccessControl(class SecurityIdentifier )" />
          <Method Sig="instance void PurgeAudit(class SecurityIdentifier )" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="IO">
      <Type Name="Stream">
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanSeek()" />
        <Method Sig="instance bool get_CanTimeout()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance in64 get_Position()" />
        <Method Sig="instance void set_Position(in64 )" />
        <Method Sig="instance int get_ReadTimeout()" />
        <Method Sig="instance void set_ReadTimeout(int )" />
        <Method Sig="instance int get_WriteTimeout()" />
        <Method Sig="instance void set_WriteTimeout(int )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )" />
        <Method Sig="instance int EndRead(class IAsyncResult )" />
        <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )" />
        <Method Sig="instance void EndWrite(class IAsyncResult )" />
        <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
        <Method Sig="instance void SetLength(in64 )" />
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance int ReadByte()" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance void WriteByte(byte )" />
        <Method Sig="class Stream Synchronized(class Stream )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BinaryReader">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding )" />
        <Method Sig="instance class Stream get_BaseStream()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance int PeekChar()" />
        <Method Sig="instance int Read()" />
        <Method Sig="instance bool ReadBoolean()" />
        <Method Sig="instance byte ReadByte()" />
        <Method Sig="instance sbyte ReadSByte()" />
        <Method Sig="instance char ReadChar()" />
        <Method Sig="instance short ReadInt16()" />
        <Method Sig="instance ushort ReadUInt16()" />
        <Method Sig="instance int ReadInt32()" />
        <Method Sig="instance uint ReadUInt32()" />
        <Method Sig="instance in64 ReadInt64()" />
        <Method Sig="instance uint64 ReadUInt64()" />
        <Method Sig="instance float ReadSingle()" />
        <Method Sig="instance double ReadDouble()" />
        <Method Sig="instance struct Decimal ReadDecimal()" />
        <Method Sig="instance string ReadString()" />
        <Method Sig="instance int Read([] char , int , int )" />
        <Method Sig="instance [] char ReadChars(int )" />
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance [] byte ReadBytes(int )" />
      </Type>
      <Type Name="BinaryWriter">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance class Stream get_BaseStream()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance in64 Seek(int , struct SeekOrigin )" />
        <Method Sig="instance void Write(bool )" />
        <Method Sig="instance void Write(byte )" />
        <Method Sig="instance void Write(sbyte )" />
        <Method Sig="instance void Write([] byte )" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance void Write(char )" />
        <Method Sig="instance void Write([] char )" />
        <Method Sig="instance void Write([] char , int , int )" />
        <Method Sig="instance void Write(double )" />
        <Method Sig="instance void Write(struct Decimal )" />
        <Method Sig="instance void Write(short )" />
        <Method Sig="instance void Write(ushort )" />
        <Method Sig="instance void Write(int )" />
        <Method Sig="instance void Write(uint )" />
        <Method Sig="instance void Write(in64 )" />
        <Method Sig="instance void Write(uint64 )" />
        <Method Sig="instance void Write(float )" />
        <Method Sig="instance void Write(string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BufferedStream">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , int )" />
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance bool get_CanSeek()" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance in64 get_Position()" />
        <Method Sig="instance void set_Position(in64 )" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance int ReadByte()" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance void WriteByte(byte )" />
        <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
        <Method Sig="instance void SetLength(in64 )" />
      </Type>
      <Type Name="Directory">
        <Method Sig="class DirectoryInfo GetParent(string )" />
        <Method Sig="class DirectoryInfo CreateDirectory(string )" />
        <Method Sig="class DirectoryInfo CreateDirectory(string , class DirectorySecurity )" />
        <Method Sig="bool Exists(string )" />
        <Method Sig="void SetCreationTime(string , struct DateTime )" />
        <Method Sig="void SetCreationTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetCreationTime(string )" />
        <Method Sig="struct DateTime GetCreationTimeUtc(string )" />
        <Method Sig="void SetLastWriteTime(string , struct DateTime )" />
        <Method Sig="void SetLastWriteTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetLastWriteTime(string )" />
        <Method Sig="struct DateTime GetLastWriteTimeUtc(string )" />
        <Method Sig="void SetLastAccessTime(string , struct DateTime )" />
        <Method Sig="void SetLastAccessTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetLastAccessTime(string )" />
        <Method Sig="struct DateTime GetLastAccessTimeUtc(string )" />
        <Method Sig="class DirectorySecurity GetAccessControl(string )" />
        <Method Sig="class DirectorySecurity GetAccessControl(string , struct AccessControlSections )" />
        <Method Sig="void SetAccessControl(string , class DirectorySecurity )" />
        <Method Sig="[] string GetFiles(string )" />
        <Method Sig="[] string GetFiles(string , string )" />
        <Method Sig="[] string GetFiles(string , string , struct SearchOption )" />
        <Method Sig="[] string GetDirectories(string )" />
        <Method Sig="[] string GetDirectories(string , string )" />
        <Method Sig="[] string GetDirectories(string , string , struct SearchOption )" />
        <Method Sig="[] string GetFileSystemEntries(string )" />
        <Method Sig="[] string GetFileSystemEntries(string , string )" />
        <Method Sig="[] string GetLogicalDrives()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string GetDirectoryRoot(string )" />
        <Method Sig="string GetCurrentDirectory()" />
        <Method Sig="void SetCurrentDirectory(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Move(string , string )" />
        <Method Sig="void Delete(string )" />
        <Method Sig="void Delete(string , bool )" />
      </Type>
      <Type Name="FileSystemInfo">
        <Method Sig="instance string get_FullName()" />
        <Method Sig="instance string get_Extension()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool get_Exists()" />
        <Method Sig="instance void Delete()" />
        <Method Sig="instance struct DateTime get_CreationTime()" />
        <Method Sig="instance void set_CreationTime(struct DateTime )" />
        <Method Sig="instance struct DateTime get_CreationTimeUtc()" />
        <Method Sig="instance void set_CreationTimeUtc(struct DateTime )" />
        <Method Sig="instance struct DateTime get_LastAccessTime()" />
        <Method Sig="instance void set_LastAccessTime(struct DateTime )" />
        <Method Sig="instance struct DateTime get_LastAccessTimeUtc()" />
        <Method Sig="instance void set_LastAccessTimeUtc(struct DateTime )" />
        <Method Sig="instance struct DateTime get_LastWriteTime()" />
        <Method Sig="instance void set_LastWriteTime(struct DateTime )" />
        <Method Sig="instance struct DateTime get_LastWriteTimeUtc()" />
        <Method Sig="instance void set_LastWriteTimeUtc(struct DateTime )" />
        <Method Sig="instance void Refresh()" />
        <Method Sig="instance struct FileAttributes get_Attributes()" />
        <Method Sig="instance void set_Attributes(struct FileAttributes )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="DirectoryInfo">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance class DirectoryInfo get_Parent()" />
        <Method Sig="instance class DirectoryInfo CreateSubdirectory(string )" />
        <Method Sig="instance class DirectoryInfo CreateSubdirectory(string , class DirectorySecurity )" />
        <Method Sig="instance void Create()" />
        <Method Sig="instance void Create(class DirectorySecurity )" />
        <Method Sig="instance bool get_Exists()" />
        <Method Sig="instance class DirectorySecurity GetAccessControl()" />
        <Method Sig="instance class DirectorySecurity GetAccessControl(struct AccessControlSections )" />
        <Method Sig="instance void SetAccessControl(class DirectorySecurity )" />
        <Method Sig="instance [] class FileInfo GetFiles(string )" />
        <Method Sig="instance [] class FileInfo GetFiles(string , struct SearchOption )" />
        <Method Sig="instance [] class FileInfo GetFiles()" />
        <Method Sig="instance [] class DirectoryInfo GetDirectories()" />
        <Method Sig="instance [] class FileSystemInfo GetFileSystemInfos(string )" />
        <Method Sig="instance [] class FileSystemInfo GetFileSystemInfos()" />
        <Method Sig="instance [] class DirectoryInfo GetDirectories(string )" />
        <Method Sig="instance [] class DirectoryInfo GetDirectories(string , struct SearchOption )" />
        <Method Sig="instance class DirectoryInfo get_Root()" />
        <Method Sig="instance void MoveTo(string )" />
        <Method Sig="instance void Delete()" />
        <Method Sig="instance void Delete(bool )" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="IOException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="DirectoryNotFoundException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="DriveInfo">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance struct DriveType get_DriveType()" />
        <Method Sig="instance string get_DriveFormat()" />
        <Method Sig="instance bool get_IsReady()" />
        <Method Sig="instance in64 get_AvailableFreeSpace()" />
        <Method Sig="instance in64 get_TotalFreeSpace()" />
        <Method Sig="instance in64 get_TotalSize()" />
        <Method Sig="[] class DriveInfo GetDrives()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class DirectoryInfo get_RootDirectory()" />
        <Method Sig="instance string get_VolumeLabel()" />
        <Method Sig="instance void set_VolumeLabel(string )" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="DriveNotFoundException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="EndOfStreamException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="File">
        <Method Sig="class StreamReader OpenText(string )" />
        <Method Sig="class StreamWriter CreateText(string )" />
        <Method Sig="class StreamWriter AppendText(string )" />
        <Method Sig="void Copy(string , string )" />
        <Method Sig="void Copy(string , string , bool )" />
        <Method Sig="class FileStream Create(string )" />
        <Method Sig="class FileStream Create(string , int )" />
        <Method Sig="class FileStream Create(string , int , struct FileOptions )" />
        <Method Sig="class FileStream Create(string , int , struct FileOptions , class FileSecurity )" />
        <Method Sig="void Delete(string )" />
        <Method Sig="void Decrypt(string )" />
        <Method Sig="void Encrypt(string )" />
        <Method Sig="bool Exists(string )" />
        <Method Sig="class FileStream Open(string , struct FileMode )" />
        <Method Sig="class FileStream Open(string , struct FileMode , struct FileAccess )" />
        <Method Sig="class FileStream Open(string , struct FileMode , struct FileAccess , struct FileShare )" />
        <Method Sig="void SetCreationTime(string , struct DateTime )" />
        <Method Sig="void SetCreationTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetCreationTime(string )" />
        <Method Sig="struct DateTime GetCreationTimeUtc(string )" />
        <Method Sig="void SetLastAccessTime(string , struct DateTime )" />
        <Method Sig="void SetLastAccessTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetLastAccessTime(string )" />
        <Method Sig="struct DateTime GetLastAccessTimeUtc(string )" />
        <Method Sig="void SetLastWriteTime(string , struct DateTime )" />
        <Method Sig="void SetLastWriteTimeUtc(string , struct DateTime )" />
        <Method Sig="struct DateTime GetLastWriteTime(string )" />
        <Method Sig="struct DateTime GetLastWriteTimeUtc(string )" />
        <Method Sig="struct FileAttributes GetAttributes(string )" />
        <Method Sig="void SetAttributes(string , struct FileAttributes )" />
        <Method Sig="class FileSecurity GetAccessControl(string )" />
        <Method Sig="class FileSecurity GetAccessControl(string , struct AccessControlSections )" />
        <Method Sig="void SetAccessControl(string , class FileSecurity )" />
        <Method Sig="class FileStream OpenRead(string )" />
        <Method Sig="class FileStream OpenWrite(string )" />
        <Method Sig="string ReadAllText(string )" />
        <Method Sig="string ReadAllText(string , class Encoding )" />
        <Method Sig="void WriteAllText(string , string )" />
        <Method Sig="void WriteAllText(string , string , class Encoding )" />
        <Method Sig="[] byte ReadAllBytes(string )" />
        <Method Sig="void WriteAllBytes(string , [] byte )" />
        <Method Sig="[] string ReadAllLines(string )" />
        <Method Sig="[] string ReadAllLines(string , class Encoding )" />
        <Method Sig="void WriteAllLines(string , [] string )" />
        <Method Sig="void WriteAllLines(string , [] string , class Encoding )" />
        <Method Sig="void AppendAllText(string , string )" />
        <Method Sig="void AppendAllText(string , string , class Encoding )" />
        <Method Sig="void Move(string , string )" />
        <Method Sig="void Replace(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Replace(string , string , string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="FileInfo">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance string get_DirectoryName()" />
        <Method Sig="instance class DirectoryInfo get_Directory()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance void set_IsReadOnly(bool )" />
        <Method Sig="instance class FileSecurity GetAccessControl()" />
        <Method Sig="instance class FileSecurity GetAccessControl(struct AccessControlSections )" />
        <Method Sig="instance void SetAccessControl(class FileSecurity )" />
        <Method Sig="instance class StreamReader OpenText()" />
        <Method Sig="instance class StreamWriter CreateText()" />
        <Method Sig="instance class StreamWriter AppendText()" />
        <Method Sig="instance class FileInfo CopyTo(string )" />
        <Method Sig="instance class FileInfo CopyTo(string , bool )" />
        <Method Sig="instance class FileStream Create()" />
        <Method Sig="instance void Delete()" />
        <Method Sig="instance void Decrypt()" />
        <Method Sig="instance void Encrypt()" />
        <Method Sig="instance bool get_Exists()" />
        <Method Sig="instance class FileStream Open(struct FileMode )" />
        <Method Sig="instance class FileStream Open(struct FileMode , struct FileAccess )" />
        <Method Sig="instance class FileStream Open(struct FileMode , struct FileAccess , struct FileShare )" />
        <Method Sig="instance class FileStream OpenRead()" />
        <Method Sig="instance class FileStream OpenWrite()" />
        <Method Sig="instance void MoveTo(string )" />
        <Method Sig="instance class FileInfo Replace(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class FileInfo Replace(string , string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="FileLoadException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , string , class Exception )" />
        <Method Sig="instance string get_Message()" />
        <Method Sig="instance string get_FileName()" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_FusionLog()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="FileNotFoundException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , string , class Exception )" />
        <Method Sig="instance string get_Message()" />
        <Method Sig="instance string get_FileName()" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_FusionLog()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence, ControlPolicy" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="FileStream">
        <Method Sig="instance void .ctor(string , struct FileMode )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , int )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , int , struct FileOptions )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , int , bool )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileSystemRights , struct FileShare , int , struct FileOptions , class FileSecurity )" />
        <Method Sig="instance void .ctor(string , struct FileMode , struct FileSystemRights , struct FileShare , int , struct FileOptions )" />
        <Method Sig="instance void .ctor(intptr , struct FileAccess )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(intptr , struct FileAccess , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(intptr , struct FileAccess , bool , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(intptr , struct FileAccess , bool , int , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class SafeFileHandle , struct FileAccess )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class SafeFileHandle , struct FileAccess , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class SafeFileHandle , struct FileAccess , int , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance bool get_CanSeek()" />
        <Method Sig="instance bool get_IsAsync()" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance in64 get_Position()" />
        <Method Sig="instance void set_Position(in64 )" />
        <Method Sig="instance class FileSecurity GetAccessControl()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetAccessControl(class FileSecurity )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Flush()" />
        <Method Sig="instance intptr get_Handle()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class SafeFileHandle get_SafeFileHandle()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void SetLength(in64 )" />
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )" />
        <Method Sig="instance int EndRead(class IAsyncResult )" />
        <Method Sig="instance int ReadByte()" />
        <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )" />
        <Method Sig="instance void EndWrite(class IAsyncResult )" />
        <Method Sig="instance void WriteByte(byte )" />
        <Method Sig="instance void Lock(in64 , in64 )" />
        <Method Sig="instance void Unlock(in64 , in64 )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MemoryStream">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor([] byte )" />
        <Method Sig="instance void .ctor([] byte , bool )" />
        <Method Sig="instance void .ctor([] byte , int , int )" />
        <Method Sig="instance void .ctor([] byte , int , int , bool )" />
        <Method Sig="instance void .ctor([] byte , int , int , bool , bool )" />
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanSeek()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance [] byte GetBuffer()" />
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance in64 get_Position()" />
        <Method Sig="instance void set_Position(in64 )" />
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance int ReadByte()" />
        <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
        <Method Sig="instance void SetLength(in64 )" />
        <Method Sig="instance [] byte ToArray()" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance void WriteByte(byte )" />
        <Method Sig="instance void WriteTo(class Stream )" />
      </Type>
      <Type Name="Path">
        <Method Sig="string ChangeExtension(string , string )" />
        <Method Sig="string GetDirectoryName(string )" />
        <Method Sig="[] char GetInvalidPathChars()" />
        <Method Sig="[] char GetInvalidFileNameChars()" />
        <Method Sig="string GetExtension(string )" />
        <Method Sig="string GetFullPath(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string GetFileName(string )" />
        <Method Sig="string GetFileNameWithoutExtension(string )" />
        <Method Sig="string GetPathRoot(string )" />
        <Method Sig="string GetTempPath()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string GetRandomFileName()" />
        <Method Sig="string GetTempFileName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool HasExtension(string )" />
        <Method Sig="bool IsPathRooted(string )" />
        <Method Sig="string Combine(string , string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="PathTooLongException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="UnmanagedMemoryStream">
        <Method Sig="instance void .ctor(* byte , in64 )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(* byte , in64 , in64 , struct FileAccess )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_CanRead()" />
        <Method Sig="instance bool get_CanSeek()" />
        <Method Sig="instance bool get_CanWrite()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance in64 get_Length()" />
        <Method Sig="instance in64 get_Capacity()" />
        <Method Sig="instance in64 get_Position()" />
        <Method Sig="instance void set_Position(in64 )" />
        <Method Sig="instance * byte get_PositionPointer()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_PositionPointer(* byte )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance int Read([] byte , int , int )" />
        <Method Sig="instance int ReadByte()" />
        <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
        <Method Sig="instance void SetLength(in64 )" />
        <Method Sig="instance void Write([] byte , int , int )" />
        <Method Sig="instance void WriteByte(byte )" />
      </Type>
      <Type Name="TextReader">
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance int Peek()" />
        <Method Sig="instance int Read()" />
        <Method Sig="instance int Read([] char , int , int )" />
        <Method Sig="instance string ReadToEnd()" />
        <Method Sig="instance int ReadBlock([] char , int , int )" />
        <Method Sig="instance string ReadLine()" />
        <Method Sig="class TextReader Synchronized(class TextReader )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="StreamReader">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , bool )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding , bool )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding , bool , int )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance void .ctor(string , class Encoding )" />
        <Method Sig="instance void .ctor(string , class Encoding , bool )" />
        <Method Sig="instance void .ctor(string , class Encoding , bool , int )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance class Encoding get_CurrentEncoding()" />
        <Method Sig="instance class Stream get_BaseStream()" />
        <Method Sig="instance void DiscardBufferedData()" />
        <Method Sig="instance bool get_EndOfStream()" />
        <Method Sig="instance int Peek()" />
        <Method Sig="instance int Read()" />
        <Method Sig="instance int Read([] char , int , int )" />
        <Method Sig="instance string ReadToEnd()" />
        <Method Sig="instance string ReadLine()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TextWriter">
        <Method Sig="instance class IFormatProvider get_FormatProvider()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance string get_NewLine()" />
        <Method Sig="instance void set_NewLine(string )" />
        <Method Sig="class TextWriter Synchronized(class TextWriter )" />
        <Method Sig="instance void Write(char )" />
        <Method Sig="instance void Write([] char )" />
        <Method Sig="instance void Write([] char , int , int )" />
        <Method Sig="instance void Write(bool )" />
        <Method Sig="instance void Write(int )" />
        <Method Sig="instance void Write(uint )" />
        <Method Sig="instance void Write(in64 )" />
        <Method Sig="instance void Write(uint64 )" />
        <Method Sig="instance void Write(float )" />
        <Method Sig="instance void Write(double )" />
        <Method Sig="instance void Write(struct Decimal )" />
        <Method Sig="instance void Write(string )" />
        <Method Sig="instance void Write(object )" />
        <Method Sig="instance void Write(string , object )" />
        <Method Sig="instance void Write(string , object , object )" />
        <Method Sig="instance void Write(string , object , object , object )" />
        <Method Sig="instance void Write(string , [] object )" />
        <Method Sig="instance void WriteLine()" />
        <Method Sig="instance void WriteLine(char )" />
        <Method Sig="instance void WriteLine([] char )" />
        <Method Sig="instance void WriteLine([] char , int , int )" />
        <Method Sig="instance void WriteLine(bool )" />
        <Method Sig="instance void WriteLine(int )" />
        <Method Sig="instance void WriteLine(uint )" />
        <Method Sig="instance void WriteLine(in64 )" />
        <Method Sig="instance void WriteLine(uint64 )" />
        <Method Sig="instance void WriteLine(float )" />
        <Method Sig="instance void WriteLine(double )" />
        <Method Sig="instance void WriteLine(struct Decimal )" />
        <Method Sig="instance void WriteLine(string )" />
        <Method Sig="instance void WriteLine(object )" />
        <Method Sig="instance void WriteLine(string , object )" />
        <Method Sig="instance void WriteLine(string , object , object )" />
        <Method Sig="instance void WriteLine(string , object , object , object )" />
        <Method Sig="instance void WriteLine(string , [] object )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="StreamWriter">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding )" />
        <Method Sig="instance void .ctor(class Stream , class Encoding , int )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance void .ctor(string , bool , class Encoding )" />
        <Method Sig="instance void .ctor(string , bool , class Encoding , int )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance bool get_AutoFlush()" />
        <Method Sig="instance void set_AutoFlush(bool )" />
        <Method Sig="instance class Stream get_BaseStream()" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance void Write(char )" />
        <Method Sig="instance void Write([] char )" />
        <Method Sig="instance void Write([] char , int , int )" />
        <Method Sig="instance void Write(string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="StringReader">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance int Peek()" />
        <Method Sig="instance int Read()" />
        <Method Sig="instance int Read([] char , int , int )" />
        <Method Sig="instance string ReadToEnd()" />
        <Method Sig="instance string ReadLine()" />
      </Type>
      <Type Name="StringWriter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class IFormatProvider )" />
        <Method Sig="instance void .ctor(class StringBuilder )" />
        <Method Sig="instance void .ctor(class StringBuilder , class IFormatProvider )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance class StringBuilder GetStringBuilder()" />
        <Method Sig="instance void Write(char )" />
        <Method Sig="instance void Write([] char , int , int )" />
        <Method Sig="instance void Write(string )" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Namespace Name="IsolatedStorage">
        <Type Name="IsolatedStorage">
          <Method Sig="instance uint64 get_MaximumSize()" />
          <Method Sig="instance uint64 get_CurrentSize()" />
          <Method Sig="instance object get_DomainIdentity()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object get_ApplicationIdentity()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object get_AssemblyIdentity()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlPolicy" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct IsolatedStorageScope get_Scope()" />
          <Method Sig="instance void Remove()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="IsolatedStorageFile">
          <Method Sig="class IsolatedStorageFile GetUserStoreForDomain()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetUserStoreForAssembly()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetUserStoreForApplication()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetMachineStoreForDomain()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetMachineStoreForAssembly()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetMachineStoreForApplication()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetStore(struct IsolatedStorageScope , class Type , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetStore(struct IsolatedStorageScope , object , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetStore(struct IsolatedStorageScope , class Evidence , class Type , class Evidence , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetStore(struct IsolatedStorageScope , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IsolatedStorageFile GetStore(struct IsolatedStorageScope , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance uint64 get_CurrentSize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance uint64 get_MaximumSize()" />
          <Method Sig="instance void DeleteFile(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void CreateDirectory(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void DeleteDirectory(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] string GetFileNames(string )" />
          <Method Sig="instance [] string GetDirectoryNames(string )" />
          <Method Sig="instance void Remove()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close()" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="void Remove(struct IsolatedStorageScope )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class IEnumerator GetEnumerator(struct IsolatedStorageScope )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="IsolatedStorageFileStream">
          <Method Sig="instance void .ctor(string , struct FileMode )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , class IsolatedStorageFile )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , class IsolatedStorageFile )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , class IsolatedStorageFile )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct FileMode , struct FileAccess , struct FileShare , int , class IsolatedStorageFile )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Allowed="ApplicationIsolationByUser" version="1" class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UserQuota="512000" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance bool get_IsAsync()" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Flush()" />
          <Method Sig="instance intptr get_Handle()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance class SafeFileHandle get_SafeFileHandle()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void SetLength(in64 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Read([] byte , int , int )" />
          <Method Sig="instance int ReadByte()" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void WriteByte(byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )" />
          <Method Sig="instance int EndRead(class IAsyncResult )" />
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndWrite(class IAsyncResult )" />
        </Type>
        <Type Name="IsolatedStorageException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Configuration">
      <Namespace Name="Assemblies">
        <Type Name="AssemblyHash">
          <Method Sig="instance void .ctor([] byte )" />
          <Method Sig="instance void .ctor(struct AssemblyHashAlgorithm , [] byte )" />
          <Method Sig="instance struct AssemblyHashAlgorithm get_Algorithm()" />
          <Method Sig="instance void set_Algorithm(struct AssemblyHashAlgorithm )" />
          <Method Sig="instance [] byte GetValue()" />
          <Method Sig="instance void SetValue([] byte )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
    </Namespace>
  </Namespace>
  <Namespace Name="Microsoft">
    <Namespace Name="Win32">
      <Namespace Name="SafeHandles">
        <Type Name="SafeHandleZeroOrMinusOneIsInvalid">
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SafeFileHandle">
          <Method Sig="instance void .ctor(intptr , bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SafeWaitHandle">
          <Method Sig="instance void .ctor(intptr , bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SafeHandleMinusOneIsInvalid">
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CriticalHandleZeroOrMinusOneIsInvalid">
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CriticalHandleMinusOneIsInvalid">
          <Method Sig="instance bool get_IsInvalid()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
      </Namespace>
      <Type Name="Registry">
        <Method Sig="object GetValue(string , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void SetValue(string , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void SetValue(string , string , object , struct RegistryValueKind )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RegistryKey">
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance class RegistryKey CreateSubKey(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey CreateSubKey(string , struct RegistryKeyPermissionCheck )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey CreateSubKey(string , struct RegistryKeyPermissionCheck , class RegistrySecurity )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DeleteSubKey(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DeleteSubKey(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DeleteSubKeyTree(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DeleteValue(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DeleteValue(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class RegistryKey OpenRemoteBaseKey(struct RegistryHive , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey OpenSubKey(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey OpenSubKey(string , struct RegistryKeyPermissionCheck )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey OpenSubKey(string , struct RegistryKeyPermissionCheck , struct RegistryRights )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RegistryKey OpenSubKey(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="\" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_SubKeyCount()" />
        <Method Sig="instance [] string GetSubKeyNames()" />
        <Method Sig="instance int get_ValueCount()" />
        <Method Sig="instance [] string GetValueNames()" />
        <Method Sig="instance object GetValue(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object GetValue(string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object GetValue(string , object , struct RegistryValueOptions )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct RegistryValueKind GetValueKind(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="\" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void SetValue(string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetValue(string , object , struct RegistryValueKind )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string ToString()" />
        <Method Sig="instance class RegistrySecurity GetAccessControl()" />
        <Method Sig="instance class RegistrySecurity GetAccessControl(struct AccessControlSections )" />
        <Method Sig="instance void SetAccessControl(class RegistrySecurity )" />
        <Method Sig="void .cctor()" />
      </Type>
    </Namespace>
  </Namespace>
  <Type Name="Enumerator">
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !1 get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !0 get_Current()" />
  </Type>
  <Type Name="KeyCollection">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance GetEnumerator()" />
    <Method Sig="instance void CopyTo([] !0, int )" />
    <Method Sig="instance int get_Count()" />
  </Type>
  <Type Name="ValueCollection">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance GetEnumerator()" />
    <Method Sig="instance void CopyTo([] !1, int )" />
    <Method Sig="instance int get_Count()" />
  </Type>
  <Type Name="TryCode">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance void Invoke(object )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
    <Method Sig="instance void EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="CleanupCode">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance void Invoke(object , bool )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(object , bool , class AsyncCallback , object )" />
    <Method Sig="instance void EndInvoke(class IAsyncResult )" />
  </Type>
</Assembly>
