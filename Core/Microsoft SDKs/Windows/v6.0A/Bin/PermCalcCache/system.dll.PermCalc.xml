<?xml version="1.0"?>
<Assembly>
  <Namespace Name="System">
    <Namespace Name="ComponentModel">
      <Type Name="DescriptionAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="CategoryAttribute">
        <Method Sig="class CategoryAttribute get_Action()" />
        <Method Sig="class CategoryAttribute get_Appearance()" />
        <Method Sig="class CategoryAttribute get_Asynchronous()" />
        <Method Sig="class CategoryAttribute get_Behavior()" />
        <Method Sig="class CategoryAttribute get_Data()" />
        <Method Sig="class CategoryAttribute get_Default()" />
        <Method Sig="class CategoryAttribute get_Design()" />
        <Method Sig="class CategoryAttribute get_DragDrop()" />
        <Method Sig="class CategoryAttribute get_Focus()" />
        <Method Sig="class CategoryAttribute get_Format()" />
        <Method Sig="class CategoryAttribute get_Key()" />
        <Method Sig="class CategoryAttribute get_Layout()" />
        <Method Sig="class CategoryAttribute get_Mouse()" />
        <Method Sig="class CategoryAttribute get_WindowStyle()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Category()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
      </Type>
      <Type Name="AddingNewEventArgs">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance object get_NewObject()" />
        <Method Sig="instance void set_NewObject(object )" />
      </Type>
      <Type Name="AddingNewEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class AddingNewEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AddingNewEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="AmbientValueAttribute">
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance void .ctor(char )" />
        <Method Sig="instance void .ctor(byte )" />
        <Method Sig="instance void .ctor(short )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(in64 )" />
        <Method Sig="instance void .ctor(float )" />
        <Method Sig="instance void .ctor(double )" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance object get_Value()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="TypeConverter">
        <Method Sig="instance bool CanConvertFrom(class Type )" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(object )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertFromInvariantString(string )" />
        <Method Sig="instance object ConvertFromInvariantString(class ITypeDescriptorContext , string )" />
        <Method Sig="instance object ConvertFromString(string )" />
        <Method Sig="instance object ConvertFromString(class ITypeDescriptorContext , string )" />
        <Method Sig="instance object ConvertFromString(class ITypeDescriptorContext , class CultureInfo , string )" />
        <Method Sig="instance object ConvertTo(object , class Type )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance string ConvertToInvariantString(object )" />
        <Method Sig="instance string ConvertToInvariantString(class ITypeDescriptorContext , object )" />
        <Method Sig="instance string ConvertToString(object )" />
        <Method Sig="instance string ConvertToString(class ITypeDescriptorContext , object )" />
        <Method Sig="instance string ConvertToString(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object CreateInstance(class IDictionary )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported()" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(object )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported()" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class ICollection GetStandardValues()" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive()" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported()" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance bool IsValid(object )" />
        <Method Sig="instance bool IsValid(class ITypeDescriptorContext , object )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="MemberDescriptor">
        <Method Sig="instance class AttributeCollection get_Attributes()" />
        <Method Sig="instance string get_Category()" />
        <Method Sig="instance string get_Description()" />
        <Method Sig="instance bool get_IsBrowsable()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool get_DesignTimeOnly()" />
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="PropertyDescriptor">
        <Method Sig="instance class Type get_ComponentType()" />
        <Method Sig="instance class TypeConverter get_Converter()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_IsLocalizable()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance struct DesignerSerializationVisibility get_SerializationVisibility()" />
        <Method Sig="instance class Type get_PropertyType()" />
        <Method Sig="instance void AddValueChanged(object , class EventHandler )" />
        <Method Sig="instance bool CanResetValue(object )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance class PropertyDescriptorCollection GetChildProperties()" />
        <Method Sig="instance class PropertyDescriptorCollection GetChildProperties([] class Attribute )" />
        <Method Sig="instance class PropertyDescriptorCollection GetChildProperties(object )" />
        <Method Sig="instance class PropertyDescriptorCollection GetChildProperties(object , [] class Attribute )" />
        <Method Sig="instance object GetEditor(class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance object GetValue(object )" />
        <Method Sig="instance void RemoveValueChanged(object , class EventHandler )" />
        <Method Sig="instance void ResetValue(object )" />
        <Method Sig="instance void SetValue(object , object )" />
        <Method Sig="instance bool ShouldSerializeValue(object )" />
        <Method Sig="instance bool get_SupportsChangeEvents()" />
      </Type>
      <Type Name="CollectionConverter">
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ArrayConverter">
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="AsyncCompletedEventArgs">
        <Method Sig="instance void .ctor(class Exception , bool , object )" />
        <Method Sig="instance bool get_Cancelled()" />
        <Method Sig="instance class Exception get_Error()" />
        <Method Sig="instance object get_UserState()" />
      </Type>
      <Type Name="AsyncCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class AsyncCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="AsyncOperation">
        <Method Sig="instance object get_UserSuppliedState()" />
        <Method Sig="instance class SynchronizationContext get_SynchronizationContext()" />
        <Method Sig="instance void Post(class SendOrPostCallback , object )" />
        <Method Sig="instance void PostOperationCompleted(class SendOrPostCallback , object )" />
        <Method Sig="instance void OperationCompleted()" />
      </Type>
      <Type Name="AsyncOperationManager">
        <Method Sig="class AsyncOperation CreateOperation(object )" />
        <Method Sig="class SynchronizationContext get_SynchronizationContext()" />
        <Method Sig="void set_SynchronizationContext(class SynchronizationContext )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="AttributeCollection">
        <Method Sig="instance void .ctor([] class Attribute )" />
        <Method Sig="class AttributeCollection FromExisting(class AttributeCollection , [] class Attribute )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class Attribute get_Item(int )" />
        <Method Sig="instance class Attribute get_Item(class Type )" />
        <Method Sig="instance bool Contains(class Attribute )" />
        <Method Sig="instance bool Contains([] class Attribute )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance bool Matches(class Attribute )" />
        <Method Sig="instance bool Matches([] class Attribute )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="AttributeProviderAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance string get_TypeName()" />
        <Method Sig="instance string get_PropertyName()" />
      </Type>
      <Type Name="Component">
        <Method Sig="instance void add_Disposed(class EventHandler )" />
        <Method Sig="instance void remove_Disposed(class EventHandler )" />
        <Method Sig="instance class ISite get_Site()" />
        <Method Sig="instance void set_Site(class ISite )" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class IContainer get_Container()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BackgroundWorker">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_CancellationPending()" />
        <Method Sig="instance void CancelAsync()" />
        <Method Sig="instance void add_DoWork(class DoWorkEventHandler )" />
        <Method Sig="instance void remove_DoWork(class DoWorkEventHandler )" />
        <Method Sig="instance bool get_IsBusy()" />
        <Method Sig="instance void add_ProgressChanged(class ProgressChangedEventHandler )" />
        <Method Sig="instance void remove_ProgressChanged(class ProgressChangedEventHandler )" />
        <Method Sig="instance void ReportProgress(int )" />
        <Method Sig="instance void ReportProgress(int , object )" />
        <Method Sig="instance void RunWorkerAsync()" />
        <Method Sig="instance void RunWorkerAsync(object )" />
        <Method Sig="instance void add_RunWorkerCompleted(class RunWorkerCompletedEventHandler )" />
        <Method Sig="instance void remove_RunWorkerCompleted(class RunWorkerCompletedEventHandler )" />
        <Method Sig="instance bool get_WorkerReportsProgress()" />
        <Method Sig="instance void set_WorkerReportsProgress(bool )" />
        <Method Sig="instance bool get_WorkerSupportsCancellation()" />
        <Method Sig="instance void set_WorkerSupportsCancellation(bool )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ComponentEditor">
        <Method Sig="instance bool EditComponent(object )" />
        <Method Sig="instance bool EditComponent(class ITypeDescriptorContext , object )" />
      </Type>
      <Type Name="BaseNumberConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
      </Type>
      <Type Name="BindableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(bool , struct BindingDirection )" />
        <Method Sig="instance void .ctor(struct BindableSupport )" />
        <Method Sig="instance void .ctor(struct BindableSupport , struct BindingDirection )" />
        <Method Sig="instance bool get_Bindable()" />
        <Method Sig="instance struct BindingDirection get_Direction()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BindingList`1">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void add_AddingNew(class AddingNewEventHandler )" />
        <Method Sig="instance void remove_AddingNew(class AddingNewEventHandler )" />
        <Method Sig="instance void add_ListChanged(class ListChangedEventHandler )" />
        <Method Sig="instance void remove_ListChanged(class ListChangedEventHandler )" />
        <Method Sig="instance bool get_RaiseListChangedEvents()" />
        <Method Sig="instance void set_RaiseListChangedEvents(bool )" />
        <Method Sig="instance void ResetBindings()" />
        <Method Sig="instance void ResetItem(int )" />
        <Method Sig="instance void CancelNew(int )" />
        <Method Sig="instance void EndNew(int )" />
        <Method Sig="instance !0 AddNew()" />
        <Method Sig="instance bool get_AllowNew()" />
        <Method Sig="instance void set_AllowNew(bool )" />
        <Method Sig="instance bool get_AllowEdit()" />
        <Method Sig="instance void set_AllowEdit(bool )" />
        <Method Sig="instance bool get_AllowRemove()" />
        <Method Sig="instance void set_AllowRemove(bool )" />
      </Type>
      <Type Name="BooleanConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="BrowsableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Browsable()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ByteConverter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CancelEventArgs">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Cancel()" />
        <Method Sig="instance void set_Cancel(bool )" />
      </Type>
      <Type Name="CancelEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class CancelEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class CancelEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="CharConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CollectionChangeEventArgs">
        <Method Sig="instance void .ctor(struct CollectionChangeAction , object )" />
        <Method Sig="instance struct CollectionChangeAction get_Action()" />
        <Method Sig="instance object get_Element()" />
      </Type>
      <Type Name="CollectionChangeEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class CollectionChangeEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class CollectionChangeEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ComplexBindingPropertiesAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_DataSource()" />
        <Method Sig="instance string get_DataMember()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ComponentCollection">
        <Method Sig="instance void .ctor([] class IComponent )" />
        <Method Sig="instance class IComponent get_Item(string )" />
        <Method Sig="instance class IComponent get_Item(int )" />
        <Method Sig="instance void CopyTo([] class IComponent , int )" />
      </Type>
      <Type Name="ReferenceConverter">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ComponentConverter">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
      </Type>
      <Type Name="ComponentResourceManager">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void ApplyResources(object , string )" />
        <Method Sig="instance void ApplyResources(object , string , class CultureInfo )" />
      </Type>
      <Type Name="Container">
        <Method Sig="instance void Add(class IComponent )" />
        <Method Sig="instance void Add(class IComponent , string )" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class ComponentCollection get_Components()" />
        <Method Sig="instance void Remove(class IComponent )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ContainerFilterService">
        <Method Sig="instance class ComponentCollection FilterComponents(class ComponentCollection )" />
      </Type>
      <Type Name="CultureInfoConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CustomTypeDescriptor">
        <Method Sig="instance class AttributeCollection GetAttributes()" />
        <Method Sig="instance string GetClassName()" />
        <Method Sig="instance string GetComponentName()" />
        <Method Sig="instance class TypeConverter GetConverter()" />
        <Method Sig="instance class EventDescriptor GetDefaultEvent()" />
        <Method Sig="instance class PropertyDescriptor GetDefaultProperty()" />
        <Method Sig="instance object GetEditor(class Type )" />
        <Method Sig="instance class EventDescriptorCollection GetEvents()" />
        <Method Sig="instance class EventDescriptorCollection GetEvents([] class Attribute )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties()" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties([] class Attribute )" />
        <Method Sig="instance object GetPropertyOwner(class PropertyDescriptor )" />
      </Type>
      <Type Name="DataObjectAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_IsDataObject()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DataObjectFieldAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(bool , bool )" />
        <Method Sig="instance void .ctor(bool , bool , bool )" />
        <Method Sig="instance void .ctor(bool , bool , bool , int )" />
        <Method Sig="instance bool get_IsIdentity()" />
        <Method Sig="instance bool get_IsNullable()" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance bool get_PrimaryKey()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="DataObjectMethodAttribute">
        <Method Sig="instance void .ctor(struct DataObjectMethodType )" />
        <Method Sig="instance void .ctor(struct DataObjectMethodType , bool )" />
        <Method Sig="instance bool get_IsDefault()" />
        <Method Sig="instance struct DataObjectMethodType get_MethodType()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Match(object )" />
      </Type>
      <Type Name="DateTimeConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DecimalConverter">
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DefaultBindingPropertyAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DefaultEventAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DefaultPropertyAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DefaultValueAttribute">
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance void .ctor(char )" />
        <Method Sig="instance void .ctor(byte )" />
        <Method Sig="instance void .ctor(short )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(in64 )" />
        <Method Sig="instance void .ctor(float )" />
        <Method Sig="instance void .ctor(double )" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance object get_Value()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="TypeDescriptionProvider">
        <Method Sig="instance object CreateInstance(class IServiceProvider , class Type , [] class Type , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IDictionary GetCache(object )" />
        <Method Sig="instance class ICustomTypeDescriptor GetExtendedTypeDescriptor(object )" />
        <Method Sig="instance string GetFullComponentName(object )" />
        <Method Sig="instance class Type GetReflectionType(class Type )" />
        <Method Sig="instance class Type GetReflectionType(object )" />
        <Method Sig="instance class Type GetReflectionType(class Type , object )" />
        <Method Sig="instance class ICustomTypeDescriptor GetTypeDescriptor(class Type )" />
        <Method Sig="instance class ICustomTypeDescriptor GetTypeDescriptor(object )" />
        <Method Sig="instance class ICustomTypeDescriptor GetTypeDescriptor(class Type , object )" />
      </Type>
      <Type Name="DesignerAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance void .ctor(class Type , class Type )" />
        <Method Sig="instance string get_DesignerBaseTypeName()" />
        <Method Sig="instance string get_DesignerTypeName()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="DesignerCategoryAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Category()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DesignerSerializationVisibilityAttribute">
        <Method Sig="instance void .ctor(struct DesignerSerializationVisibility )" />
        <Method Sig="instance struct DesignerSerializationVisibility get_Visibility()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DesignOnlyAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_IsDesignOnly()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DesignTimeVisibleAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_Visible()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DisplayNameAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="DoubleConverter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DoWorkEventArgs">
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance object get_Argument()" />
        <Method Sig="instance object get_Result()" />
        <Method Sig="instance void set_Result(object )" />
      </Type>
      <Type Name="DoWorkEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class DoWorkEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class DoWorkEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="EditorAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance void .ctor(class Type , class Type )" />
        <Method Sig="instance string get_EditorBaseTypeName()" />
        <Method Sig="instance string get_EditorTypeName()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="EditorBrowsableAttribute">
        <Method Sig="instance void .ctor(struct EditorBrowsableState )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct EditorBrowsableState get_State()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="EnumConverter">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance bool IsValid(class ITypeDescriptorContext , object )" />
      </Type>
      <Type Name="EventDescriptor">
        <Method Sig="instance class Type get_ComponentType()" />
        <Method Sig="instance class Type get_EventType()" />
        <Method Sig="instance bool get_IsMulticast()" />
        <Method Sig="instance void AddEventHandler(object , class Delegate )" />
        <Method Sig="instance void RemoveEventHandler(object , class Delegate )" />
      </Type>
      <Type Name="EventDescriptorCollection">
        <Method Sig="instance void .ctor([] class EventDescriptor )" />
        <Method Sig="instance void .ctor([] class EventDescriptor , bool )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class EventDescriptor get_Item(int )" />
        <Method Sig="instance class EventDescriptor get_Item(string )" />
        <Method Sig="instance int Add(class EventDescriptor )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance bool Contains(class EventDescriptor )" />
        <Method Sig="instance class EventDescriptor Find(string , bool )" />
        <Method Sig="instance int IndexOf(class EventDescriptor )" />
        <Method Sig="instance void Insert(int , class EventDescriptor )" />
        <Method Sig="instance void Remove(class EventDescriptor )" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance class EventDescriptorCollection Sort()" />
        <Method Sig="instance class EventDescriptorCollection Sort([] string )" />
        <Method Sig="instance class EventDescriptorCollection Sort([] string , class IComparer )" />
        <Method Sig="instance class EventDescriptorCollection Sort(class IComparer )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="EventHandlerList">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class Delegate get_Item(object )" />
        <Method Sig="instance void set_Item(object , class Delegate )" />
        <Method Sig="instance void AddHandler(object , class Delegate )" />
        <Method Sig="instance void AddHandlers(class EventHandlerList )" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void RemoveHandler(object , class Delegate )" />
      </Type>
      <Type Name="ExpandableObjectConverter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
      </Type>
      <Type Name="ExtenderProvidedPropertyAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class PropertyDescriptor get_ExtenderProperty()" />
        <Method Sig="instance class IExtenderProvider get_Provider()" />
        <Method Sig="instance class Type get_ReceiverType()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
      </Type>
      <Type Name="GuidConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="HandledEventArgs">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Handled()" />
        <Method Sig="instance void set_Handled(bool )" />
      </Type>
      <Type Name="HandledEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class HandledEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class HandledEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ImmutableObjectAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Immutable()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="InitializationEventAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_EventName()" />
      </Type>
      <Type Name="InstallerTypeAttribute">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance class Type get_InstallerType()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="InstanceCreationEditor">
        <Method Sig="instance string get_Text()" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class Type )" />
      </Type>
      <Type Name="Int16Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Int32Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Int64Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="InvalidAsynchronousStateException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="InvalidEnumArgumentException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , int , class Type )" />
      </Type>
      <Type Name="License">
        <Method Sig="instance string get_LicenseKey()" />
        <Method Sig="instance void Dispose()" />
      </Type>
      <Type Name="LicenseContext">
        <Method Sig="instance struct LicenseUsageMode get_UsageMode()" />
        <Method Sig="instance string GetSavedLicenseKey(class Type , class Assembly )" />
        <Method Sig="instance object GetService(class Type )" />
        <Method Sig="instance void SetSavedLicenseKey(class Type , string )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="LicenseException">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(class Type , object )" />
        <Method Sig="instance void .ctor(class Type , object , string )" />
        <Method Sig="instance void .ctor(class Type , object , string , class Exception )" />
        <Method Sig="instance class Type get_LicensedType()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="LicenseManager">
        <Method Sig="class LicenseContext get_CurrentContext()" />
        <Method Sig="void set_CurrentContext(class LicenseContext )" />
        <Method Sig="struct LicenseUsageMode get_UsageMode()" />
        <Method Sig="object CreateWithContext(class Type , class LicenseContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="object CreateWithContext(class Type , class LicenseContext , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool IsLicensed(class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool IsValid(class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool IsValid(class Type , object , &amp; class License )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void LockContext(object )" />
        <Method Sig="void UnlockContext(object )" />
        <Method Sig="void Validate(class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class License Validate(class Type , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="LicenseProvider">
        <Method Sig="instance class License GetLicense(class LicenseContext , class Type , object , bool )" />
      </Type>
      <Type Name="LicenseProviderAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class Type get_LicenseProvider()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="LicFileLicenseProvider">
        <Method Sig="instance class License GetLicense(class LicenseContext , class Type , object , bool )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ListBindableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(struct BindableSupport )" />
        <Method Sig="instance bool get_ListBindable()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ListChangedEventArgs">
        <Method Sig="instance void .ctor(struct ListChangedType , int )" />
        <Method Sig="instance void .ctor(struct ListChangedType , int , class PropertyDescriptor )" />
        <Method Sig="instance void .ctor(struct ListChangedType , class PropertyDescriptor )" />
        <Method Sig="instance void .ctor(struct ListChangedType , int , int )" />
        <Method Sig="instance struct ListChangedType get_ListChangedType()" />
        <Method Sig="instance int get_NewIndex()" />
        <Method Sig="instance int get_OldIndex()" />
        <Method Sig="instance class PropertyDescriptor get_PropertyDescriptor()" />
      </Type>
      <Type Name="ListChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class ListChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ListChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ListSortDescription">
        <Method Sig="instance void .ctor(class PropertyDescriptor , struct ListSortDirection )" />
        <Method Sig="instance class PropertyDescriptor get_PropertyDescriptor()" />
        <Method Sig="instance void set_PropertyDescriptor(class PropertyDescriptor )" />
        <Method Sig="instance struct ListSortDirection get_SortDirection()" />
        <Method Sig="instance void set_SortDirection(struct ListSortDirection )" />
      </Type>
      <Type Name="ListSortDescriptionCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor([] class ListSortDescription )" />
        <Method Sig="instance class ListSortDescription get_Item(int )" />
        <Method Sig="instance void set_Item(int , class ListSortDescription )" />
        <Method Sig="instance bool Contains(object )" />
        <Method Sig="instance int IndexOf(object )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
      </Type>
      <Type Name="LocalizableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_IsLocalizable()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="LookupBindingPropertiesAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string , string , string )" />
        <Method Sig="instance string get_DataSource()" />
        <Method Sig="instance string get_DisplayMember()" />
        <Method Sig="instance string get_ValueMember()" />
        <Method Sig="instance string get_LookupMember()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MarshalByValueComponent">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void add_Disposed(class EventHandler )" />
        <Method Sig="instance void remove_Disposed(class EventHandler )" />
        <Method Sig="instance class ISite get_Site()" />
        <Method Sig="instance void set_Site(class ISite )" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class IContainer get_Container()" />
        <Method Sig="instance object GetService(class Type )" />
        <Method Sig="instance bool get_DesignMode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MaskedTextProvider">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance void .ctor(string , class CultureInfo )" />
        <Method Sig="instance void .ctor(string , class CultureInfo , bool )" />
        <Method Sig="instance void .ctor(string , char , bool )" />
        <Method Sig="instance void .ctor(string , class CultureInfo , char , bool )" />
        <Method Sig="instance void .ctor(string , class CultureInfo , bool , char , char , bool )" />
        <Method Sig="instance bool get_AllowPromptAsInput()" />
        <Method Sig="instance int get_AssignedEditPositionCount()" />
        <Method Sig="instance int get_AvailableEditPositionCount()" />
        <Method Sig="instance object Clone()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class CultureInfo get_Culture()" />
        <Method Sig="char get_DefaultPasswordChar()" />
        <Method Sig="instance int get_EditPositionCount()" />
        <Method Sig="instance class IEnumerator get_EditPositions()" />
        <Method Sig="instance bool get_IncludeLiterals()" />
        <Method Sig="instance void set_IncludeLiterals(bool )" />
        <Method Sig="instance bool get_IncludePrompt()" />
        <Method Sig="instance void set_IncludePrompt(bool )" />
        <Method Sig="instance bool get_AsciiOnly()" />
        <Method Sig="instance bool get_IsPassword()" />
        <Method Sig="instance void set_IsPassword(bool )" />
        <Method Sig="int get_InvalidIndex()" />
        <Method Sig="instance int get_LastAssignedPosition()" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance string get_Mask()" />
        <Method Sig="instance bool get_MaskCompleted()" />
        <Method Sig="instance bool get_MaskFull()" />
        <Method Sig="instance char get_PasswordChar()" />
        <Method Sig="instance void set_PasswordChar(char )" />
        <Method Sig="instance char get_PromptChar()" />
        <Method Sig="instance void set_PromptChar(char )" />
        <Method Sig="instance bool get_ResetOnPrompt()" />
        <Method Sig="instance void set_ResetOnPrompt(bool )" />
        <Method Sig="instance bool get_ResetOnSpace()" />
        <Method Sig="instance void set_ResetOnSpace(bool )" />
        <Method Sig="instance bool get_SkipLiterals()" />
        <Method Sig="instance void set_SkipLiterals(bool )" />
        <Method Sig="instance char get_Item(int )" />
        <Method Sig="instance bool Add(char )" />
        <Method Sig="instance bool Add(char , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Add(string )" />
        <Method Sig="instance bool Add(string , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance void Clear(&amp; struct MaskedTextResultHint )" />
        <Method Sig="instance int FindAssignedEditPositionFrom(int , bool )" />
        <Method Sig="instance int FindAssignedEditPositionInRange(int , int , bool )" />
        <Method Sig="instance int FindEditPositionFrom(int , bool )" />
        <Method Sig="instance int FindEditPositionInRange(int , int , bool )" />
        <Method Sig="instance int FindNonEditPositionFrom(int , bool )" />
        <Method Sig="instance int FindNonEditPositionInRange(int , int , bool )" />
        <Method Sig="instance int FindUnassignedEditPositionFrom(int , bool )" />
        <Method Sig="instance int FindUnassignedEditPositionInRange(int , int , bool )" />
        <Method Sig="bool GetOperationResultFromHint(struct MaskedTextResultHint )" />
        <Method Sig="instance bool InsertAt(char , int )" />
        <Method Sig="instance bool InsertAt(char , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool InsertAt(string , int )" />
        <Method Sig="instance bool InsertAt(string , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool IsAvailablePosition(int )" />
        <Method Sig="instance bool IsEditPosition(int )" />
        <Method Sig="bool IsValidInputChar(char )" />
        <Method Sig="bool IsValidMaskChar(char )" />
        <Method Sig="bool IsValidPasswordChar(char )" />
        <Method Sig="instance bool Remove()" />
        <Method Sig="instance bool Remove(&amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool RemoveAt(int )" />
        <Method Sig="instance bool RemoveAt(int , int )" />
        <Method Sig="instance bool RemoveAt(int , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Replace(char , int )" />
        <Method Sig="instance bool Replace(char , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Replace(char , int , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Replace(string , int )" />
        <Method Sig="instance bool Replace(string , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Replace(string , int , int , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool Set(string )" />
        <Method Sig="instance bool Set(string , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance string ToDisplayString()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance string ToString(bool )" />
        <Method Sig="instance string ToString(int , int )" />
        <Method Sig="instance string ToString(bool , int , int )" />
        <Method Sig="instance string ToString(bool , bool )" />
        <Method Sig="instance string ToString(bool , bool , int , int )" />
        <Method Sig="instance string ToString(bool , bool , bool , int , int )" />
        <Method Sig="instance bool VerifyChar(char , int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="instance bool VerifyEscapeChar(char , int )" />
        <Method Sig="instance bool VerifyString(string )" />
        <Method Sig="instance bool VerifyString(string , &amp; int , &amp; struct MaskedTextResultHint )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MergablePropertyAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_AllowMerge()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="MultilineStringConverter">
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="NestedContainer">
        <Method Sig="instance void .ctor(class IComponent )" />
        <Method Sig="instance class IComponent get_Owner()" />
      </Type>
      <Type Name="NullableConverter">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance bool IsValid(class ITypeDescriptorContext , object )" />
        <Method Sig="instance class Type get_NullableType()" />
        <Method Sig="instance class Type get_UnderlyingType()" />
        <Method Sig="instance class TypeConverter get_UnderlyingTypeConverter()" />
      </Type>
      <Type Name="PasswordPropertyTextAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Password()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ProgressChangedEventArgs">
        <Method Sig="instance void .ctor(int , object )" />
        <Method Sig="instance int get_ProgressPercentage()" />
        <Method Sig="instance object get_UserState()" />
      </Type>
      <Type Name="ProgressChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class ProgressChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ProgressChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="PropertyChangedEventArgs">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_PropertyName()" />
      </Type>
      <Type Name="PropertyChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class PropertyChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class PropertyChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="PropertyDescriptorCollection">
        <Method Sig="instance void .ctor([] class PropertyDescriptor )" />
        <Method Sig="instance void .ctor([] class PropertyDescriptor , bool )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class PropertyDescriptor get_Item(int )" />
        <Method Sig="instance class PropertyDescriptor get_Item(string )" />
        <Method Sig="instance int Add(class PropertyDescriptor )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance bool Contains(class PropertyDescriptor )" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance class PropertyDescriptor Find(string , bool )" />
        <Method Sig="instance int IndexOf(class PropertyDescriptor )" />
        <Method Sig="instance void Insert(int , class PropertyDescriptor )" />
        <Method Sig="instance void Remove(class PropertyDescriptor )" />
        <Method Sig="instance void RemoveAt(int )" />
        <Method Sig="instance class PropertyDescriptorCollection Sort()" />
        <Method Sig="instance class PropertyDescriptorCollection Sort([] string )" />
        <Method Sig="instance class PropertyDescriptorCollection Sort([] string , class IComparer )" />
        <Method Sig="instance class PropertyDescriptorCollection Sort(class IComparer )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ProvidePropertyAttribute">
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_PropertyName()" />
        <Method Sig="instance string get_ReceiverTypeName()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="ReadOnlyAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RecommendedAsConfigurableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_RecommendedAsConfigurable()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RefreshEventArgs">
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance object get_ComponentChanged()" />
        <Method Sig="instance class Type get_TypeChanged()" />
      </Type>
      <Type Name="RefreshEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(class RefreshEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class RefreshEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="RunInstallerAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_RunInstaller()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RunWorkerCompletedEventArgs">
        <Method Sig="instance void .ctor(object , class Exception , bool )" />
        <Method Sig="instance object get_Result()" />
        <Method Sig="instance object get_UserState()" />
      </Type>
      <Type Name="RunWorkerCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class RunWorkerCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class RunWorkerCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SByteConverter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsBindableAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_Bindable()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SingleConverter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="StringConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SyntaxCheck">
        <Method Sig="bool CheckMachineName(string )" />
        <Method Sig="bool CheckPath(string )" />
        <Method Sig="bool CheckRootedPath(string )" />
      </Type>
      <Type Name="TimeSpanConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ToolboxItemFilterAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , struct ToolboxItemFilterType )" />
        <Method Sig="instance string get_FilterString()" />
        <Method Sig="instance struct ToolboxItemFilterType get_FilterType()" />
        <Method Sig="instance object get_TypeId()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool Match(object )" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="TypeConverterAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_ConverterTypeName()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TypeDescriptionProviderAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance string get_TypeName()" />
      </Type>
      <Type Name="TypeDescriptor">
        <Method Sig="class IComNativeDescriptorHandler get_ComNativeDescriptorHandler()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void set_ComNativeDescriptorHandler(class IComNativeDescriptorHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Type get_ComObjectType()" />
        <Method Sig="void add_Refreshed(class RefreshEventHandler )" />
        <Method Sig="void remove_Refreshed(class RefreshEventHandler )" />
        <Method Sig="class TypeDescriptionProvider AddAttributes(class Type , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class TypeDescriptionProvider AddAttributes(object , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void AddEditorTable(class Type , class Hashtable )" />
        <Method Sig="void AddProvider(class TypeDescriptionProvider , class Type )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void AddProvider(class TypeDescriptionProvider , object )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void CreateAssociation(object , object )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class IDesigner CreateDesigner(class IComponent , class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class EventDescriptor CreateEvent(class Type , string , class Type , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class EventDescriptor CreateEvent(class Type , class EventDescriptor , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="object CreateInstance(class IServiceProvider , class Type , [] class Type , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PropertyDescriptor CreateProperty(class Type , string , class Type , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class PropertyDescriptor CreateProperty(class Type , class PropertyDescriptor , [] class Attribute )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="object GetAssociation(class Type , object )" />
        <Method Sig="class AttributeCollection GetAttributes(class Type )" />
        <Method Sig="class AttributeCollection GetAttributes(object )" />
        <Method Sig="class AttributeCollection GetAttributes(object , bool )" />
        <Method Sig="string GetClassName(object )" />
        <Method Sig="string GetClassName(object , bool )" />
        <Method Sig="string GetClassName(class Type )" />
        <Method Sig="string GetComponentName(object )" />
        <Method Sig="string GetComponentName(object , bool )" />
        <Method Sig="class TypeConverter GetConverter(object )" />
        <Method Sig="class TypeConverter GetConverter(object , bool )" />
        <Method Sig="class TypeConverter GetConverter(class Type )" />
        <Method Sig="class EventDescriptor GetDefaultEvent(class Type )" />
        <Method Sig="class EventDescriptor GetDefaultEvent(object )" />
        <Method Sig="class EventDescriptor GetDefaultEvent(object , bool )" />
        <Method Sig="class PropertyDescriptor GetDefaultProperty(class Type )" />
        <Method Sig="class PropertyDescriptor GetDefaultProperty(object )" />
        <Method Sig="class PropertyDescriptor GetDefaultProperty(object , bool )" />
        <Method Sig="object GetEditor(object , class Type )" />
        <Method Sig="object GetEditor(object , class Type , bool )" />
        <Method Sig="object GetEditor(class Type , class Type )" />
        <Method Sig="class EventDescriptorCollection GetEvents(class Type )" />
        <Method Sig="class EventDescriptorCollection GetEvents(class Type , [] class Attribute )" />
        <Method Sig="class EventDescriptorCollection GetEvents(object )" />
        <Method Sig="class EventDescriptorCollection GetEvents(object , bool )" />
        <Method Sig="class EventDescriptorCollection GetEvents(object , [] class Attribute )" />
        <Method Sig="class EventDescriptorCollection GetEvents(object , [] class Attribute , bool )" />
        <Method Sig="string GetFullComponentName(object )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(class Type )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(class Type , [] class Attribute )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(object )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(object , bool )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(object , [] class Attribute )" />
        <Method Sig="class PropertyDescriptorCollection GetProperties(object , [] class Attribute , bool )" />
        <Method Sig="class TypeDescriptionProvider GetProvider(class Type )" />
        <Method Sig="class TypeDescriptionProvider GetProvider(object )" />
        <Method Sig="class Type GetReflectionType(class Type )" />
        <Method Sig="class Type GetReflectionType(object )" />
        <Method Sig="void Refresh(object )" />
        <Method Sig="void Refresh(class Type )" />
        <Method Sig="void Refresh(class Module )" />
        <Method Sig="void Refresh(class Assembly )" />
        <Method Sig="void RemoveAssociation(object , object )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void RemoveAssociations(object )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void RemoveProvider(class TypeDescriptionProvider , class Type )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void RemoveProvider(class TypeDescriptionProvider , object )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void SortDescriptorArray(class IList )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TypeListConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
      </Type>
      <Type Name="UInt16Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="UInt32Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="UInt64Converter">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="WarningException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , string , string )" />
        <Method Sig="instance string get_HelpUrl()" />
        <Method Sig="instance string get_HelpTopic()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="Win32Exception">
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(int )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(int , string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string , class Exception )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_NativeErrorCode()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Namespace Name="Design">
        <Type Name="ActiveDesignerEventArgs">
          <Method Sig="instance void .ctor(class IDesignerHost , class IDesignerHost )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDesignerHost get_OldDesigner()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDesignerHost get_NewDesigner()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ActiveDesignerEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ActiveDesignerEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ActiveDesignerEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="CheckoutException">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string , class Exception )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CommandID">
          <Method Sig="instance void .ctor(struct Guid , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_ID()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Equals(object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int GetHashCode()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance struct Guid get_Guid()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string ToString()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ComponentChangedEventArgs">
          <Method Sig="instance object get_Component()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class MemberDescriptor get_Member()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_NewValue()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_OldValue()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(object , class MemberDescriptor , object , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ComponentChangedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ComponentChangedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ComponentChangedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ComponentChangingEventArgs">
          <Method Sig="instance object get_Component()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class MemberDescriptor get_Member()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(object , class MemberDescriptor )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ComponentChangingEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ComponentChangingEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ComponentChangingEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ComponentEventArgs">
          <Method Sig="instance class IComponent get_Component()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(class IComponent )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ComponentEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ComponentEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ComponentEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ComponentRenameEventArgs">
          <Method Sig="instance object get_Component()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_OldName()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_NewName()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(object , string , string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ComponentRenameEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ComponentRenameEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ComponentRenameEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="DesignerOptionService">
          <Method Sig="instance class DesignerOptionCollection get_Options()" />
        </Type>
        <Type Name="DesignerTransaction">
          <Method Sig="instance bool get_Canceled()" />
          <Method Sig="instance bool get_Committed()" />
          <Method Sig="instance string get_Description()" />
          <Method Sig="instance void Cancel()" />
          <Method Sig="instance void Commit()" />
        </Type>
        <Type Name="DesignerTransactionCloseEventArgs">
          <Method Sig="instance void .ctor(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(bool , bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_TransactionCommitted()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_LastTransaction()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerTransactionCloseEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class DesignerTransactionCloseEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class DesignerTransactionCloseEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="MenuCommand">
          <Method Sig="instance void .ctor(class EventHandler , class CommandID )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_Checked()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Checked(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_Enabled()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Enabled(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDictionary get_Properties()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_Supported()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Supported(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_Visible()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Visible(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void add_CommandChanged(class EventHandler )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void remove_CommandChanged(class EventHandler )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CommandID get_CommandID()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Invoke()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Invoke(object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_OleStatus()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string ToString()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerVerb">
          <Method Sig="instance void .ctor(string , class EventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string , class EventHandler , class CommandID )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Description()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Description(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Text()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string ToString()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerVerbCollection">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class DesignerVerb get_Item(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Item(int , class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int Add(class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void AddRange([] class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void AddRange(class DesignerVerbCollection )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Insert(int , class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int IndexOf(class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Contains(class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Remove(class DesignerVerb )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void CopyTo([] class DesignerVerb , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesigntimeLicenseContext">
          <Method Sig="instance struct LicenseUsageMode get_UsageMode()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string GetSavedLicenseKey(class Type , class Assembly )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void SetSavedLicenseKey(class Type , string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesigntimeLicenseContextSerializer">
          <Method Sig="void Serialize(class Stream , string , class DesigntimeLicenseContext )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerCollection">
          <Method Sig="instance void .ctor([] class IDesignerHost )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(class IList )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_Count()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDesignerHost get_Item(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IEnumerator GetEnumerator()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerEventArgs">
          <Method Sig="instance void .ctor(class IDesignerHost )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDesignerHost get_Designer()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="DesignerEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class DesignerEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class DesignerEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="HelpKeywordAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance string get_HelpKeyword()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool IsDefaultAttribute()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ServiceCreatorCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance object Invoke(class IServiceContainer , class Type )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class IServiceContainer , class Type , class AsyncCallback , object )" />
          <Method Sig="instance object EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ServiceContainer">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class IServiceProvider )" />
          <Method Sig="instance void AddService(class Type , object )" />
          <Method Sig="instance void AddService(class Type , object , bool )" />
          <Method Sig="instance void AddService(class Type , class ServiceCreatorCallback )" />
          <Method Sig="instance void AddService(class Type , class ServiceCreatorCallback , bool )" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance object GetService(class Type )" />
          <Method Sig="instance void RemoveService(class Type )" />
          <Method Sig="instance void RemoveService(class Type , bool )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="StandardCommands">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="StandardToolWindows">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Namespace Name="Serialization">
          <Type Name="ComponentSerializationService">
            <Method Sig="instance class SerializationStore CreateStore()" />
            <Method Sig="instance class SerializationStore LoadStore(class Stream )" />
            <Method Sig="instance void Serialize(class SerializationStore , object )" />
            <Method Sig="instance void SerializeAbsolute(class SerializationStore , object )" />
            <Method Sig="instance void SerializeMember(class SerializationStore , object , class MemberDescriptor )" />
            <Method Sig="instance void SerializeMemberAbsolute(class SerializationStore , object , class MemberDescriptor )" />
            <Method Sig="instance class ICollection Deserialize(class SerializationStore )" />
            <Method Sig="instance class ICollection Deserialize(class SerializationStore , class IContainer )" />
            <Method Sig="instance void DeserializeTo(class SerializationStore , class IContainer , bool , bool )" />
            <Method Sig="instance void DeserializeTo(class SerializationStore , class IContainer )" />
            <Method Sig="instance void DeserializeTo(class SerializationStore , class IContainer , bool )" />
          </Type>
          <Type Name="ContextStack">
            <Method Sig="instance object get_Current()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Item(int )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Item(class Type )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance void Append(object )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance object Pop()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance void Push(object )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="DefaultSerializationProviderAttribute">
            <Method Sig="instance void .ctor(class Type )" />
            <Method Sig="instance void .ctor(string )" />
            <Method Sig="instance string get_ProviderTypeName()" />
          </Type>
          <Type Name="DesignerLoader">
            <Method Sig="instance bool get_Loading()" />
            <Method Sig="instance void BeginLoad(class IDesignerLoaderHost )" />
            <Method Sig="instance void Dispose()" />
            <Method Sig="instance void Flush()" />
          </Type>
          <Type Name="DesignerSerializerAttribute">
            <Method Sig="instance void .ctor(class Type , class Type )" />
            <Method Sig="instance void .ctor(string , class Type )" />
            <Method Sig="instance void .ctor(string , string )" />
            <Method Sig="instance string get_SerializerTypeName()" />
            <Method Sig="instance string get_SerializerBaseTypeName()" />
            <Method Sig="instance object get_TypeId()" />
          </Type>
          <Type Name="InstanceDescriptor">
            <Method Sig="instance void .ctor(class MemberInfo , class ICollection )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class MemberInfo , class ICollection , bool )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance class ICollection get_Arguments()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance bool get_IsComplete()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance class MemberInfo get_MemberInfo()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance object Invoke()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="MemberRelationshipService">
            <Method Sig="instance struct MemberRelationship get_Item(struct MemberRelationship )" />
            <Method Sig="instance void set_Item(struct MemberRelationship , struct MemberRelationship )" />
            <Method Sig="instance struct MemberRelationship get_Item(object , class MemberDescriptor )" />
            <Method Sig="instance void set_Item(object , class MemberDescriptor , struct MemberRelationship )" />
            <Method Sig="instance bool SupportsRelationship(struct MemberRelationship , struct MemberRelationship )" />
          </Type>
          <Type Name="MemberRelationship">
            <Method Sig="instance void .ctor(object , class MemberDescriptor )" />
            <Method Sig="instance bool get_IsEmpty()" />
            <Method Sig="instance class MemberDescriptor get_Member()" />
            <Method Sig="instance object get_Owner()" />
            <Method Sig="instance bool Equals(object )" />
            <Method Sig="instance int GetHashCode()" />
            <Method Sig="bool op_Equality(struct MemberRelationship , struct MemberRelationship )" />
            <Method Sig="bool op_Inequality(struct MemberRelationship , struct MemberRelationship )" />
            <Method Sig="void .cctor()" />
          </Type>
          <Type Name="ResolveNameEventArgs">
            <Method Sig="instance void .ctor(string )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance string get_Name()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance object get_Value()">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
            <Method Sig="instance void set_Value(object )">
              <LinkDemand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </LinkDemand>
            </Method>
          </Type>
          <Type Name="ResolveNameEventHandler">
            <Method Sig="instance void .ctor(object , intptr )" />
            <Method Sig="instance void Invoke(object , class ResolveNameEventArgs )" />
            <Method Sig="instance class IAsyncResult BeginInvoke(object , class ResolveNameEventArgs , class AsyncCallback , object )" />
            <Method Sig="instance void EndInvoke(class IAsyncResult )" />
          </Type>
          <Type Name="RootDesignerSerializerAttribute">
            <Method Sig="instance void .ctor(class Type , class Type , bool )" />
            <Method Sig="instance void .ctor(string , class Type , bool )" />
            <Method Sig="instance void .ctor(string , string , bool )" />
            <Method Sig="instance bool get_Reloadable()" />
            <Method Sig="instance string get_SerializerTypeName()" />
            <Method Sig="instance string get_SerializerBaseTypeName()" />
            <Method Sig="instance object get_TypeId()" />
          </Type>
          <Type Name="SerializationStore">
            <Method Sig="instance class ICollection get_Errors()" />
            <Method Sig="instance void Close()" />
            <Method Sig="instance void Save(class Stream )" />
          </Type>
        </Namespace>
      </Namespace>
      <Type Name="InheritanceAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct InheritanceLevel )" />
        <Method Sig="instance struct InheritanceLevel get_InheritanceLevel()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="NotifyParentPropertyAttribute">
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_NotifyParent()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ParenthesizePropertyNameAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance bool get_NeedParenthesis()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="PropertyTabAttribute">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type , struct PropertyTabScope )" />
        <Method Sig="instance void .ctor(string , struct PropertyTabScope )" />
        <Method Sig="instance [] class Type get_TabClasses()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] struct PropertyTabScope get_TabScopes()" />
        <Method Sig="instance bool Equals(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool Equals(class PropertyTabAttribute )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="RefreshPropertiesAttribute">
        <Method Sig="instance void .ctor(struct RefreshProperties )" />
        <Method Sig="instance struct RefreshProperties get_RefreshProperties()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ToolboxItemAttribute">
        <Method Sig="instance bool IsDefaultAttribute()" />
        <Method Sig="instance void .ctor(bool )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class Type get_ToolboxItemType()" />
        <Method Sig="instance string get_ToolboxItemTypeName()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
    </Namespace>
    <Namespace Name="Text">
      <Namespace Name="RegularExpressions">
        <Type Name="Regex">
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string Escape(string )" />
          <Method Sig="string Unescape(string )" />
          <Method Sig="int get_CacheSize()" />
          <Method Sig="void set_CacheSize(int )" />
          <Method Sig="instance struct RegexOptions get_Options()" />
          <Method Sig="instance bool get_RightToLeft()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance [] string GetGroupNames()" />
          <Method Sig="instance [] int GetGroupNumbers()" />
          <Method Sig="instance string GroupNameFromNumber(int )" />
          <Method Sig="instance int GroupNumberFromName(string )" />
          <Method Sig="bool IsMatch(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool IsMatch(string , string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool IsMatch(string )" />
          <Method Sig="instance bool IsMatch(string , int )" />
          <Method Sig="class Match Match(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class Match Match(string , string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Match Match(string )" />
          <Method Sig="instance class Match Match(string , int )" />
          <Method Sig="instance class Match Match(string , int , int )" />
          <Method Sig="class MatchCollection Matches(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class MatchCollection Matches(string , string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class MatchCollection Matches(string )" />
          <Method Sig="instance class MatchCollection Matches(string , int )" />
          <Method Sig="string Replace(string , string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string Replace(string , string , string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string Replace(string , string )" />
          <Method Sig="instance string Replace(string , string , int )" />
          <Method Sig="instance string Replace(string , string , int , int )" />
          <Method Sig="string Replace(string , string , class MatchEvaluator )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string Replace(string , string , class MatchEvaluator , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string Replace(string , class MatchEvaluator )" />
          <Method Sig="instance string Replace(string , class MatchEvaluator , int )" />
          <Method Sig="instance string Replace(string , class MatchEvaluator , int , int )" />
          <Method Sig="[] string Split(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="[] string Split(string , string , struct RegexOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] string Split(string )" />
          <Method Sig="instance [] string Split(string , int )" />
          <Method Sig="instance [] string Split(string , int , int )" />
          <Method Sig="void CompileToAssembly([] class RegexCompilationInfo , class AssemblyName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void CompileToAssembly([] class RegexCompilationInfo , class AssemblyName , [] class CustomAttributeBuilder )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void CompileToAssembly([] class RegexCompilationInfo , class AssemblyName , [] class CustomAttributeBuilder , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="MatchEvaluator">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance string Invoke(class Match )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class Match , class AsyncCallback , object )" />
          <Method Sig="instance string EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="Capture">
          <Method Sig="instance int get_Index()" />
          <Method Sig="instance int get_Length()" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="CaptureCollection">
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class Capture get_Item(int )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
        </Type>
        <Type Name="RegexCompilationInfo">
          <Method Sig="instance void .ctor(string , struct RegexOptions , string , string , bool )" />
          <Method Sig="instance string get_Pattern()" />
          <Method Sig="instance void set_Pattern(string )" />
          <Method Sig="instance struct RegexOptions get_Options()" />
          <Method Sig="instance void set_Options(struct RegexOptions )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance bool get_IsPublic()" />
          <Method Sig="instance void set_IsPublic(bool )" />
        </Type>
        <Type Name="Group">
          <Method Sig="instance bool get_Success()" />
          <Method Sig="instance class CaptureCollection get_Captures()" />
          <Method Sig="class Group Synchronized(class Group )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="GroupCollection">
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class Group get_Item(int )" />
          <Method Sig="instance class Group get_Item(string )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
        </Type>
        <Type Name="Match">
          <Method Sig="class Match get_Empty()" />
          <Method Sig="instance class GroupCollection get_Groups()" />
          <Method Sig="instance class Match NextMatch()" />
          <Method Sig="instance string Result(string )" />
          <Method Sig="class Match Synchronized(class Match )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="MatchCollection">
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance class Match get_Item(int )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="CodeDom">
      <Type Name="CodeObject">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class IDictionary get_UserData()" />
      </Type>
      <Type Name="CodeExpression">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeArgumentReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_ParameterName()" />
        <Method Sig="instance void set_ParameterName(string )" />
      </Type>
      <Type Name="CodeArrayCreateExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(string , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(class Type , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(class CodeTypeReference , int )" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance void .ctor(class Type , int )" />
        <Method Sig="instance void .ctor(class CodeTypeReference , class CodeExpression )" />
        <Method Sig="instance void .ctor(string , class CodeExpression )" />
        <Method Sig="instance void .ctor(class Type , class CodeExpression )" />
        <Method Sig="instance class CodeTypeReference get_CreateType()" />
        <Method Sig="instance void set_CreateType(class CodeTypeReference )" />
        <Method Sig="instance class CodeExpressionCollection get_Initializers()" />
        <Method Sig="instance int get_Size()" />
        <Method Sig="instance void set_Size(int )" />
        <Method Sig="instance class CodeExpression get_SizeExpression()" />
        <Method Sig="instance void set_SizeExpression(class CodeExpression )" />
      </Type>
      <Type Name="CodeArrayIndexerExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , [] class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance class CodeExpressionCollection get_Indices()" />
      </Type>
      <Type Name="CodeStatement">
        <Method Sig="instance class CodeLinePragma get_LinePragma()" />
        <Method Sig="instance void set_LinePragma(class CodeLinePragma )" />
        <Method Sig="instance class CodeDirectiveCollection get_StartDirectives()" />
        <Method Sig="instance class CodeDirectiveCollection get_EndDirectives()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeAssignStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Left()" />
        <Method Sig="instance void set_Left(class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Right()" />
        <Method Sig="instance void set_Right(class CodeExpression )" />
      </Type>
      <Type Name="CodeAttachEventStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeEventReferenceExpression , class CodeExpression )" />
        <Method Sig="instance void .ctor(class CodeExpression , string , class CodeExpression )" />
        <Method Sig="instance class CodeEventReferenceExpression get_Event()" />
        <Method Sig="instance void set_Event(class CodeEventReferenceExpression )" />
        <Method Sig="instance class CodeExpression get_Listener()" />
        <Method Sig="instance void set_Listener(class CodeExpression )" />
      </Type>
      <Type Name="CodeAttributeArgument">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression )" />
        <Method Sig="instance void .ctor(string , class CodeExpression )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class CodeExpression get_Value()" />
        <Method Sig="instance void set_Value(class CodeExpression )" />
      </Type>
      <Type Name="CodeAttributeArgumentCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeAttributeArgumentCollection )" />
        <Method Sig="instance void .ctor([] class CodeAttributeArgument )" />
        <Method Sig="instance class CodeAttributeArgument get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeAttributeArgument )" />
        <Method Sig="instance int Add(class CodeAttributeArgument )" />
        <Method Sig="instance void AddRange([] class CodeAttributeArgument )" />
        <Method Sig="instance void AddRange(class CodeAttributeArgumentCollection )" />
        <Method Sig="instance bool Contains(class CodeAttributeArgument )" />
        <Method Sig="instance void CopyTo([] class CodeAttributeArgument , int )" />
        <Method Sig="instance int IndexOf(class CodeAttributeArgument )" />
        <Method Sig="instance void Insert(int , class CodeAttributeArgument )" />
        <Method Sig="instance void Remove(class CodeAttributeArgument )" />
      </Type>
      <Type Name="CodeAttributeDeclaration">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , [] class CodeAttributeArgument )" />
        <Method Sig="instance void .ctor(class CodeTypeReference )" />
        <Method Sig="instance void .ctor(class CodeTypeReference , [] class CodeAttributeArgument )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class CodeAttributeArgumentCollection get_Arguments()" />
        <Method Sig="instance class CodeTypeReference get_AttributeType()" />
      </Type>
      <Type Name="CodeAttributeDeclarationCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeAttributeDeclarationCollection )" />
        <Method Sig="instance void .ctor([] class CodeAttributeDeclaration )" />
        <Method Sig="instance class CodeAttributeDeclaration get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeAttributeDeclaration )" />
        <Method Sig="instance int Add(class CodeAttributeDeclaration )" />
        <Method Sig="instance void AddRange([] class CodeAttributeDeclaration )" />
        <Method Sig="instance void AddRange(class CodeAttributeDeclarationCollection )" />
        <Method Sig="instance bool Contains(class CodeAttributeDeclaration )" />
        <Method Sig="instance void CopyTo([] class CodeAttributeDeclaration , int )" />
        <Method Sig="instance int IndexOf(class CodeAttributeDeclaration )" />
        <Method Sig="instance void Insert(int , class CodeAttributeDeclaration )" />
        <Method Sig="instance void Remove(class CodeAttributeDeclaration )" />
      </Type>
      <Type Name="CodeBaseReferenceExpression">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeBinaryOperatorExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , struct CodeBinaryOperatorType , class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Right()" />
        <Method Sig="instance void set_Right(class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Left()" />
        <Method Sig="instance void set_Left(class CodeExpression )" />
        <Method Sig="instance struct CodeBinaryOperatorType get_Operator()" />
        <Method Sig="instance void set_Operator(struct CodeBinaryOperatorType )" />
      </Type>
      <Type Name="CodeCastExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , class CodeExpression )" />
        <Method Sig="instance void .ctor(string , class CodeExpression )" />
        <Method Sig="instance void .ctor(class Type , class CodeExpression )" />
        <Method Sig="instance class CodeTypeReference get_TargetType()" />
        <Method Sig="instance void set_TargetType(class CodeTypeReference )" />
        <Method Sig="instance class CodeExpression get_Expression()" />
        <Method Sig="instance void set_Expression(class CodeExpression )" />
      </Type>
      <Type Name="CodeCatchClause">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class CodeTypeReference )" />
        <Method Sig="instance void .ctor(string , class CodeTypeReference , [] class CodeStatement )" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance void set_LocalName(string )" />
        <Method Sig="instance class CodeTypeReference get_CatchExceptionType()" />
        <Method Sig="instance void set_CatchExceptionType(class CodeTypeReference )" />
        <Method Sig="instance class CodeStatementCollection get_Statements()" />
      </Type>
      <Type Name="CodeCatchClauseCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeCatchClauseCollection )" />
        <Method Sig="instance void .ctor([] class CodeCatchClause )" />
        <Method Sig="instance class CodeCatchClause get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeCatchClause )" />
        <Method Sig="instance int Add(class CodeCatchClause )" />
        <Method Sig="instance void AddRange([] class CodeCatchClause )" />
        <Method Sig="instance void AddRange(class CodeCatchClauseCollection )" />
        <Method Sig="instance bool Contains(class CodeCatchClause )" />
        <Method Sig="instance void CopyTo([] class CodeCatchClause , int )" />
        <Method Sig="instance int IndexOf(class CodeCatchClause )" />
        <Method Sig="instance void Insert(int , class CodeCatchClause )" />
        <Method Sig="instance void Remove(class CodeCatchClause )" />
      </Type>
      <Type Name="CodeDirective">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeChecksumPragma">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , struct Guid , [] byte )" />
        <Method Sig="instance string get_FileName()" />
        <Method Sig="instance void set_FileName(string )" />
        <Method Sig="instance struct Guid get_ChecksumAlgorithmId()" />
        <Method Sig="instance void set_ChecksumAlgorithmId(struct Guid )" />
        <Method Sig="instance [] byte get_ChecksumData()" />
        <Method Sig="instance void set_ChecksumData([] byte )" />
      </Type>
      <Type Name="CodeComment">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance bool get_DocComment()" />
        <Method Sig="instance void set_DocComment(bool )" />
        <Method Sig="instance string get_Text()" />
        <Method Sig="instance void set_Text(string )" />
      </Type>
      <Type Name="CodeCommentStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeComment )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance class CodeComment get_Comment()" />
        <Method Sig="instance void set_Comment(class CodeComment )" />
      </Type>
      <Type Name="CodeCommentStatementCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeCommentStatementCollection )" />
        <Method Sig="instance void .ctor([] class CodeCommentStatement )" />
        <Method Sig="instance class CodeCommentStatement get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeCommentStatement )" />
        <Method Sig="instance int Add(class CodeCommentStatement )" />
        <Method Sig="instance void AddRange([] class CodeCommentStatement )" />
        <Method Sig="instance void AddRange(class CodeCommentStatementCollection )" />
        <Method Sig="instance bool Contains(class CodeCommentStatement )" />
        <Method Sig="instance void CopyTo([] class CodeCommentStatement , int )" />
        <Method Sig="instance int IndexOf(class CodeCommentStatement )" />
        <Method Sig="instance void Insert(int , class CodeCommentStatement )" />
        <Method Sig="instance void Remove(class CodeCommentStatement )" />
      </Type>
      <Type Name="CodeCompileUnit">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class CodeNamespaceCollection get_Namespaces()" />
        <Method Sig="instance class StringCollection get_ReferencedAssemblies()" />
        <Method Sig="instance class CodeAttributeDeclarationCollection get_AssemblyCustomAttributes()" />
        <Method Sig="instance class CodeDirectiveCollection get_StartDirectives()" />
        <Method Sig="instance class CodeDirectiveCollection get_EndDirectives()" />
      </Type>
      <Type Name="CodeConditionStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , [] class CodeStatement )" />
        <Method Sig="instance void .ctor(class CodeExpression , [] class CodeStatement , [] class CodeStatement )" />
        <Method Sig="instance class CodeExpression get_Condition()" />
        <Method Sig="instance void set_Condition(class CodeExpression )" />
        <Method Sig="instance class CodeStatementCollection get_TrueStatements()" />
        <Method Sig="instance class CodeStatementCollection get_FalseStatements()" />
      </Type>
      <Type Name="CodeTypeMember">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance struct MemberAttributes get_Attributes()" />
        <Method Sig="instance void set_Attributes(struct MemberAttributes )" />
        <Method Sig="instance class CodeAttributeDeclarationCollection get_CustomAttributes()" />
        <Method Sig="instance void set_CustomAttributes(class CodeAttributeDeclarationCollection )" />
        <Method Sig="instance class CodeLinePragma get_LinePragma()" />
        <Method Sig="instance void set_LinePragma(class CodeLinePragma )" />
        <Method Sig="instance class CodeCommentStatementCollection get_Comments()" />
        <Method Sig="instance class CodeDirectiveCollection get_StartDirectives()" />
        <Method Sig="instance class CodeDirectiveCollection get_EndDirectives()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeMemberMethod">
        <Method Sig="instance void add_PopulateParameters(class EventHandler )" />
        <Method Sig="instance void remove_PopulateParameters(class EventHandler )" />
        <Method Sig="instance void add_PopulateStatements(class EventHandler )" />
        <Method Sig="instance void remove_PopulateStatements(class EventHandler )" />
        <Method Sig="instance void add_PopulateImplementationTypes(class EventHandler )" />
        <Method Sig="instance void remove_PopulateImplementationTypes(class EventHandler )" />
        <Method Sig="instance class CodeTypeReference get_ReturnType()" />
        <Method Sig="instance void set_ReturnType(class CodeTypeReference )" />
        <Method Sig="instance class CodeStatementCollection get_Statements()" />
        <Method Sig="instance class CodeParameterDeclarationExpressionCollection get_Parameters()" />
        <Method Sig="instance class CodeTypeReference get_PrivateImplementationType()" />
        <Method Sig="instance void set_PrivateImplementationType(class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_ImplementationTypes()" />
        <Method Sig="instance class CodeAttributeDeclarationCollection get_ReturnTypeCustomAttributes()" />
        <Method Sig="instance class CodeTypeParameterCollection get_TypeParameters()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeConstructor">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class CodeExpressionCollection get_BaseConstructorArgs()" />
        <Method Sig="instance class CodeExpressionCollection get_ChainedConstructorArgs()" />
      </Type>
      <Type Name="CodeDefaultValueExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
      </Type>
      <Type Name="CodeDelegateCreateExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , class CodeExpression , string )" />
        <Method Sig="instance class CodeTypeReference get_DelegateType()" />
        <Method Sig="instance void set_DelegateType(class CodeTypeReference )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance string get_MethodName()" />
        <Method Sig="instance void set_MethodName(string )" />
      </Type>
      <Type Name="CodeDelegateInvokeExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression )" />
        <Method Sig="instance void .ctor(class CodeExpression , [] class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance class CodeExpressionCollection get_Parameters()" />
      </Type>
      <Type Name="CodeDirectionExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct FieldDirection , class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Expression()" />
        <Method Sig="instance void set_Expression(class CodeExpression )" />
        <Method Sig="instance struct FieldDirection get_Direction()" />
        <Method Sig="instance void set_Direction(struct FieldDirection )" />
      </Type>
      <Type Name="CodeDirectiveCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeDirectiveCollection )" />
        <Method Sig="instance void .ctor([] class CodeDirective )" />
        <Method Sig="instance class CodeDirective get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeDirective )" />
        <Method Sig="instance int Add(class CodeDirective )" />
        <Method Sig="instance void AddRange([] class CodeDirective )" />
        <Method Sig="instance void AddRange(class CodeDirectiveCollection )" />
        <Method Sig="instance bool Contains(class CodeDirective )" />
        <Method Sig="instance void CopyTo([] class CodeDirective , int )" />
        <Method Sig="instance int IndexOf(class CodeDirective )" />
        <Method Sig="instance void Insert(int , class CodeDirective )" />
        <Method Sig="instance void Remove(class CodeDirective )" />
      </Type>
      <Type Name="CodeEntryPointMethod">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeEventReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , string )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance string get_EventName()" />
        <Method Sig="instance void set_EventName(string )" />
      </Type>
      <Type Name="CodeExpressionCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpressionCollection )" />
        <Method Sig="instance void .ctor([] class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeExpression )" />
        <Method Sig="instance int Add(class CodeExpression )" />
        <Method Sig="instance void AddRange([] class CodeExpression )" />
        <Method Sig="instance void AddRange(class CodeExpressionCollection )" />
        <Method Sig="instance bool Contains(class CodeExpression )" />
        <Method Sig="instance void CopyTo([] class CodeExpression , int )" />
        <Method Sig="instance int IndexOf(class CodeExpression )" />
        <Method Sig="instance void Insert(int , class CodeExpression )" />
        <Method Sig="instance void Remove(class CodeExpression )" />
      </Type>
      <Type Name="CodeExpressionStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Expression()" />
        <Method Sig="instance void set_Expression(class CodeExpression )" />
      </Type>
      <Type Name="CodeFieldReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , string )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance string get_FieldName()" />
        <Method Sig="instance void set_FieldName(string )" />
      </Type>
      <Type Name="CodeGotoStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Label()" />
        <Method Sig="instance void set_Label(string )" />
      </Type>
      <Type Name="CodeIndexerExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , [] class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance class CodeExpressionCollection get_Indices()" />
      </Type>
      <Type Name="CodeIterationStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeStatement , class CodeExpression , class CodeStatement , [] class CodeStatement )" />
        <Method Sig="instance class CodeStatement get_InitStatement()" />
        <Method Sig="instance void set_InitStatement(class CodeStatement )" />
        <Method Sig="instance class CodeExpression get_TestExpression()" />
        <Method Sig="instance void set_TestExpression(class CodeExpression )" />
        <Method Sig="instance class CodeStatement get_IncrementStatement()" />
        <Method Sig="instance void set_IncrementStatement(class CodeStatement )" />
        <Method Sig="instance class CodeStatementCollection get_Statements()" />
      </Type>
      <Type Name="CodeLabeledStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class CodeStatement )" />
        <Method Sig="instance string get_Label()" />
        <Method Sig="instance void set_Label(string )" />
        <Method Sig="instance class CodeStatement get_Statement()" />
        <Method Sig="instance void set_Statement(class CodeStatement )" />
      </Type>
      <Type Name="CodeLinePragma">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance string get_FileName()" />
        <Method Sig="instance void set_FileName(string )" />
        <Method Sig="instance int get_LineNumber()" />
        <Method Sig="instance void set_LineNumber(int )" />
      </Type>
      <Type Name="CodeMemberEvent">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReference get_PrivateImplementationType()" />
        <Method Sig="instance void set_PrivateImplementationType(class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_ImplementationTypes()" />
      </Type>
      <Type Name="CodeMemberField">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
        <Method Sig="instance class CodeExpression get_InitExpression()" />
        <Method Sig="instance void set_InitExpression(class CodeExpression )" />
      </Type>
      <Type Name="CodeMemberProperty">
        <Method Sig="instance class CodeTypeReference get_PrivateImplementationType()" />
        <Method Sig="instance void set_PrivateImplementationType(class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_ImplementationTypes()" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
        <Method Sig="instance bool get_HasGet()" />
        <Method Sig="instance void set_HasGet(bool )" />
        <Method Sig="instance bool get_HasSet()" />
        <Method Sig="instance void set_HasSet(bool )" />
        <Method Sig="instance class CodeStatementCollection get_GetStatements()" />
        <Method Sig="instance class CodeStatementCollection get_SetStatements()" />
        <Method Sig="instance class CodeParameterDeclarationExpressionCollection get_Parameters()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeMethodInvokeExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeMethodReferenceExpression , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(class CodeExpression , string , [] class CodeExpression )" />
        <Method Sig="instance class CodeMethodReferenceExpression get_Method()" />
        <Method Sig="instance void set_Method(class CodeMethodReferenceExpression )" />
        <Method Sig="instance class CodeExpressionCollection get_Parameters()" />
      </Type>
      <Type Name="CodeMethodReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , string )" />
        <Method Sig="instance void .ctor(class CodeExpression , string , [] class CodeTypeReference )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance string get_MethodName()" />
        <Method Sig="instance void set_MethodName(string )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_TypeArguments()" />
      </Type>
      <Type Name="CodeMethodReturnStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_Expression()" />
        <Method Sig="instance void set_Expression(class CodeExpression )" />
      </Type>
      <Type Name="CodeNamespace">
        <Method Sig="instance void add_PopulateComments(class EventHandler )" />
        <Method Sig="instance void remove_PopulateComments(class EventHandler )" />
        <Method Sig="instance void add_PopulateImports(class EventHandler )" />
        <Method Sig="instance void remove_PopulateImports(class EventHandler )" />
        <Method Sig="instance void add_PopulateTypes(class EventHandler )" />
        <Method Sig="instance void remove_PopulateTypes(class EventHandler )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance class CodeTypeDeclarationCollection get_Types()" />
        <Method Sig="instance class CodeNamespaceImportCollection get_Imports()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class CodeCommentStatementCollection get_Comments()" />
      </Type>
      <Type Name="CodeNamespaceCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeNamespaceCollection )" />
        <Method Sig="instance void .ctor([] class CodeNamespace )" />
        <Method Sig="instance class CodeNamespace get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeNamespace )" />
        <Method Sig="instance int Add(class CodeNamespace )" />
        <Method Sig="instance void AddRange([] class CodeNamespace )" />
        <Method Sig="instance void AddRange(class CodeNamespaceCollection )" />
        <Method Sig="instance bool Contains(class CodeNamespace )" />
        <Method Sig="instance void CopyTo([] class CodeNamespace , int )" />
        <Method Sig="instance int IndexOf(class CodeNamespace )" />
        <Method Sig="instance void Insert(int , class CodeNamespace )" />
        <Method Sig="instance void Remove(class CodeNamespace )" />
      </Type>
      <Type Name="CodeNamespaceImport">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance class CodeLinePragma get_LinePragma()" />
        <Method Sig="instance void set_LinePragma(class CodeLinePragma )" />
        <Method Sig="instance string get_Namespace()" />
        <Method Sig="instance void set_Namespace(string )" />
      </Type>
      <Type Name="CodeNamespaceImportCollection">
        <Method Sig="instance class CodeNamespaceImport get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeNamespaceImport )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance void Add(class CodeNamespaceImport )" />
        <Method Sig="instance void AddRange([] class CodeNamespaceImport )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeObjectCreateExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(string , [] class CodeExpression )" />
        <Method Sig="instance void .ctor(class Type , [] class CodeExpression )" />
        <Method Sig="instance class CodeTypeReference get_CreateType()" />
        <Method Sig="instance void set_CreateType(class CodeTypeReference )" />
        <Method Sig="instance class CodeExpressionCollection get_Parameters()" />
      </Type>
      <Type Name="CodeParameterDeclarationExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance class CodeAttributeDeclarationCollection get_CustomAttributes()" />
        <Method Sig="instance void set_CustomAttributes(class CodeAttributeDeclarationCollection )" />
        <Method Sig="instance struct FieldDirection get_Direction()" />
        <Method Sig="instance void set_Direction(struct FieldDirection )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
      </Type>
      <Type Name="CodeParameterDeclarationExpressionCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeParameterDeclarationExpressionCollection )" />
        <Method Sig="instance void .ctor([] class CodeParameterDeclarationExpression )" />
        <Method Sig="instance class CodeParameterDeclarationExpression get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeParameterDeclarationExpression )" />
        <Method Sig="instance int Add(class CodeParameterDeclarationExpression )" />
        <Method Sig="instance void AddRange([] class CodeParameterDeclarationExpression )" />
        <Method Sig="instance void AddRange(class CodeParameterDeclarationExpressionCollection )" />
        <Method Sig="instance bool Contains(class CodeParameterDeclarationExpression )" />
        <Method Sig="instance void CopyTo([] class CodeParameterDeclarationExpression , int )" />
        <Method Sig="instance int IndexOf(class CodeParameterDeclarationExpression )" />
        <Method Sig="instance void Insert(int , class CodeParameterDeclarationExpression )" />
        <Method Sig="instance void Remove(class CodeParameterDeclarationExpression )" />
      </Type>
      <Type Name="CodePrimitiveExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(object )" />
        <Method Sig="instance object get_Value()" />
        <Method Sig="instance void set_Value(object )" />
      </Type>
      <Type Name="CodePropertyReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression , string )" />
        <Method Sig="instance class CodeExpression get_TargetObject()" />
        <Method Sig="instance void set_TargetObject(class CodeExpression )" />
        <Method Sig="instance string get_PropertyName()" />
        <Method Sig="instance void set_PropertyName(string )" />
      </Type>
      <Type Name="CodePropertySetValueReferenceExpression">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeRegionDirective">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct CodeRegionMode , string )" />
        <Method Sig="instance string get_RegionText()" />
        <Method Sig="instance void set_RegionText(string )" />
        <Method Sig="instance struct CodeRegionMode get_RegionMode()" />
        <Method Sig="instance void set_RegionMode(struct CodeRegionMode )" />
      </Type>
      <Type Name="CodeRemoveEventStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeEventReferenceExpression , class CodeExpression )" />
        <Method Sig="instance void .ctor(class CodeExpression , string , class CodeExpression )" />
        <Method Sig="instance class CodeEventReferenceExpression get_Event()" />
        <Method Sig="instance void set_Event(class CodeEventReferenceExpression )" />
        <Method Sig="instance class CodeExpression get_Listener()" />
        <Method Sig="instance void set_Listener(class CodeExpression )" />
      </Type>
      <Type Name="CodeSnippetCompileUnit">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance class CodeLinePragma get_LinePragma()" />
        <Method Sig="instance void set_LinePragma(class CodeLinePragma )" />
      </Type>
      <Type Name="CodeSnippetExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
      </Type>
      <Type Name="CodeSnippetStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
      </Type>
      <Type Name="CodeSnippetTypeMember">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Text()" />
        <Method Sig="instance void set_Text(string )" />
      </Type>
      <Type Name="CodeStatementCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeStatementCollection )" />
        <Method Sig="instance void .ctor([] class CodeStatement )" />
        <Method Sig="instance class CodeStatement get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeStatement )" />
        <Method Sig="instance int Add(class CodeStatement )" />
        <Method Sig="instance int Add(class CodeExpression )" />
        <Method Sig="instance void AddRange([] class CodeStatement )" />
        <Method Sig="instance void AddRange(class CodeStatementCollection )" />
        <Method Sig="instance bool Contains(class CodeStatement )" />
        <Method Sig="instance void CopyTo([] class CodeStatement , int )" />
        <Method Sig="instance int IndexOf(class CodeStatement )" />
        <Method Sig="instance void Insert(int , class CodeStatement )" />
        <Method Sig="instance void Remove(class CodeStatement )" />
      </Type>
      <Type Name="CodeThisReferenceExpression">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeThrowExceptionStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_ToThrow()" />
        <Method Sig="instance void set_ToThrow(class CodeExpression )" />
      </Type>
      <Type Name="CodeTryCatchFinallyStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor([] class CodeStatement , [] class CodeCatchClause )" />
        <Method Sig="instance void .ctor([] class CodeStatement , [] class CodeCatchClause , [] class CodeStatement )" />
        <Method Sig="instance class CodeStatementCollection get_TryStatements()" />
        <Method Sig="instance class CodeCatchClauseCollection get_CatchClauses()" />
        <Method Sig="instance class CodeStatementCollection get_FinallyStatements()" />
      </Type>
      <Type Name="CodeTypeConstructor">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CodeTypeDeclaration">
        <Method Sig="instance void add_PopulateBaseTypes(class EventHandler )" />
        <Method Sig="instance void remove_PopulateBaseTypes(class EventHandler )" />
        <Method Sig="instance void add_PopulateMembers(class EventHandler )" />
        <Method Sig="instance void remove_PopulateMembers(class EventHandler )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance struct TypeAttributes get_TypeAttributes()" />
        <Method Sig="instance void set_TypeAttributes(struct TypeAttributes )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_BaseTypes()" />
        <Method Sig="instance bool get_IsClass()" />
        <Method Sig="instance void set_IsClass(bool )" />
        <Method Sig="instance bool get_IsStruct()" />
        <Method Sig="instance void set_IsStruct(bool )" />
        <Method Sig="instance bool get_IsEnum()" />
        <Method Sig="instance void set_IsEnum(bool )" />
        <Method Sig="instance bool get_IsInterface()" />
        <Method Sig="instance void set_IsInterface(bool )" />
        <Method Sig="instance bool get_IsPartial()" />
        <Method Sig="instance void set_IsPartial(bool )" />
        <Method Sig="instance class CodeTypeMemberCollection get_Members()" />
        <Method Sig="instance class CodeTypeParameterCollection get_TypeParameters()" />
      </Type>
      <Type Name="CodeTypeDeclarationCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeDeclarationCollection )" />
        <Method Sig="instance void .ctor([] class CodeTypeDeclaration )" />
        <Method Sig="instance class CodeTypeDeclaration get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeTypeDeclaration )" />
        <Method Sig="instance int Add(class CodeTypeDeclaration )" />
        <Method Sig="instance void AddRange([] class CodeTypeDeclaration )" />
        <Method Sig="instance void AddRange(class CodeTypeDeclarationCollection )" />
        <Method Sig="instance bool Contains(class CodeTypeDeclaration )" />
        <Method Sig="instance void CopyTo([] class CodeTypeDeclaration , int )" />
        <Method Sig="instance int IndexOf(class CodeTypeDeclaration )" />
        <Method Sig="instance void Insert(int , class CodeTypeDeclaration )" />
        <Method Sig="instance void Remove(class CodeTypeDeclaration )" />
      </Type>
      <Type Name="CodeTypeDelegate">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance class CodeTypeReference get_ReturnType()" />
        <Method Sig="instance void set_ReturnType(class CodeTypeReference )" />
        <Method Sig="instance class CodeParameterDeclarationExpressionCollection get_Parameters()" />
      </Type>
      <Type Name="CodeTypeMemberCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeMemberCollection )" />
        <Method Sig="instance void .ctor([] class CodeTypeMember )" />
        <Method Sig="instance class CodeTypeMember get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeTypeMember )" />
        <Method Sig="instance int Add(class CodeTypeMember )" />
        <Method Sig="instance void AddRange([] class CodeTypeMember )" />
        <Method Sig="instance void AddRange(class CodeTypeMemberCollection )" />
        <Method Sig="instance bool Contains(class CodeTypeMember )" />
        <Method Sig="instance void CopyTo([] class CodeTypeMember , int )" />
        <Method Sig="instance int IndexOf(class CodeTypeMember )" />
        <Method Sig="instance void Insert(int , class CodeTypeMember )" />
        <Method Sig="instance void Remove(class CodeTypeMember )" />
      </Type>
      <Type Name="CodeTypeOfExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
      </Type>
      <Type Name="CodeTypeParameter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_Constraints()" />
        <Method Sig="instance class CodeAttributeDeclarationCollection get_CustomAttributes()" />
        <Method Sig="instance bool get_HasConstructorConstraint()" />
        <Method Sig="instance void set_HasConstructorConstraint(bool )" />
      </Type>
      <Type Name="CodeTypeParameterCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeParameterCollection )" />
        <Method Sig="instance void .ctor([] class CodeTypeParameter )" />
        <Method Sig="instance class CodeTypeParameter get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeTypeParameter )" />
        <Method Sig="instance int Add(class CodeTypeParameter )" />
        <Method Sig="instance void Add(string )" />
        <Method Sig="instance void AddRange([] class CodeTypeParameter )" />
        <Method Sig="instance void AddRange(class CodeTypeParameterCollection )" />
        <Method Sig="instance bool Contains(class CodeTypeParameter )" />
        <Method Sig="instance void CopyTo([] class CodeTypeParameter , int )" />
        <Method Sig="instance int IndexOf(class CodeTypeParameter )" />
        <Method Sig="instance void Insert(int , class CodeTypeParameter )" />
        <Method Sig="instance void Remove(class CodeTypeParameter )" />
      </Type>
      <Type Name="CodeTypeReference">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(class Type , struct CodeTypeReferenceOptions )" />
        <Method Sig="instance void .ctor(string , struct CodeTypeReferenceOptions )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , [] class CodeTypeReference )" />
        <Method Sig="instance void .ctor(class CodeTypeParameter )" />
        <Method Sig="instance void .ctor(string , int )" />
        <Method Sig="instance void .ctor(class CodeTypeReference , int )" />
        <Method Sig="instance class CodeTypeReference get_ArrayElementType()" />
        <Method Sig="instance void set_ArrayElementType(class CodeTypeReference )" />
        <Method Sig="instance int get_ArrayRank()" />
        <Method Sig="instance void set_ArrayRank(int )" />
        <Method Sig="instance string get_BaseType()" />
        <Method Sig="instance void set_BaseType(string )" />
        <Method Sig="instance struct CodeTypeReferenceOptions get_Options()" />
        <Method Sig="instance void set_Options(struct CodeTypeReferenceOptions )" />
        <Method Sig="instance class CodeTypeReferenceCollection get_TypeArguments()" />
      </Type>
      <Type Name="CodeTypeReferenceCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReferenceCollection )" />
        <Method Sig="instance void .ctor([] class CodeTypeReference )" />
        <Method Sig="instance class CodeTypeReference get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CodeTypeReference )" />
        <Method Sig="instance int Add(class CodeTypeReference )" />
        <Method Sig="instance void Add(string )" />
        <Method Sig="instance void Add(class Type )" />
        <Method Sig="instance void AddRange([] class CodeTypeReference )" />
        <Method Sig="instance void AddRange(class CodeTypeReferenceCollection )" />
        <Method Sig="instance bool Contains(class CodeTypeReference )" />
        <Method Sig="instance void CopyTo([] class CodeTypeReference , int )" />
        <Method Sig="instance int IndexOf(class CodeTypeReference )" />
        <Method Sig="instance void Insert(int , class CodeTypeReference )" />
        <Method Sig="instance void Remove(class CodeTypeReference )" />
      </Type>
      <Type Name="CodeTypeReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
      </Type>
      <Type Name="CodeVariableDeclarationStatement">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CodeTypeReference , string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance void .ctor(class CodeTypeReference , string , class CodeExpression )" />
        <Method Sig="instance void .ctor(string , string , class CodeExpression )" />
        <Method Sig="instance void .ctor(class Type , string , class CodeExpression )" />
        <Method Sig="instance class CodeExpression get_InitExpression()" />
        <Method Sig="instance void set_InitExpression(class CodeExpression )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance class CodeTypeReference get_Type()" />
        <Method Sig="instance void set_Type(class CodeTypeReference )" />
      </Type>
      <Type Name="CodeVariableReferenceExpression">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_VariableName()" />
        <Method Sig="instance void set_VariableName(string )" />
      </Type>
      <Namespace Name="Compiler">
        <Type Name="CodeGenerator">
          <Method Sig="instance void GenerateCodeFromMember(class CodeTypeMember , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="bool IsValidLanguageIndependentIdentifier(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="void ValidateIdentifiers(class CodeObject )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CodeDomProvider">
          <Method Sig="class CodeDomProvider CreateProvider(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="string GetLanguageFromExtension(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="bool IsDefinedLanguage(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="bool IsDefinedExtension(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="class CompilerInfo GetCompilerInfo(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="[] class CompilerInfo GetAllCompilerInfo()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_FileExtension()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance struct LanguageOptions get_LanguageOptions()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICodeGenerator CreateGenerator()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICodeGenerator CreateGenerator(class TextWriter )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICodeGenerator CreateGenerator(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICodeCompiler CreateCompiler()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICodeParser CreateParser()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class TypeConverter GetConverter(class Type )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CompilerResults CompileAssemblyFromDom(class CompilerParameters , [] class CodeCompileUnit )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CompilerResults CompileAssemblyFromFile(class CompilerParameters , [] string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CompilerResults CompileAssemblyFromSource(class CompilerParameters , [] string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool IsValidIdentifier(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string CreateEscapedIdentifier(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string CreateValidIdentifier(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string GetTypeOutput(class CodeTypeReference )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Supports(struct GeneratorSupport )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromExpression(class CodeExpression , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromStatement(class CodeStatement , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromNamespace(class CodeNamespace , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromCompileUnit(class CodeCompileUnit , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromType(class CodeTypeDeclaration , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void GenerateCodeFromMember(class CodeTypeMember , class TextWriter , class CodeGeneratorOptions )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CodeCompileUnit Parse(class TextReader )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CodeGeneratorOptions">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_Item(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Item(string , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_IndentString()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_IndentString(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_BracingStyle()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_BracingStyle(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_ElseOnClosing()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_ElseOnClosing(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_BlankLinesBetweenMembers()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_BlankLinesBetweenMembers(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_VerbatimOrder()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_VerbatimOrder(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CodeParser">
          <Method Sig="instance class CodeCompileUnit Parse(class TextReader )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CompilerError">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , int , int , string , string )" />
          <Method Sig="instance int get_Line()" />
          <Method Sig="instance void set_Line(int )" />
          <Method Sig="instance int get_Column()" />
          <Method Sig="instance void set_Column(int )" />
          <Method Sig="instance string get_ErrorNumber()" />
          <Method Sig="instance void set_ErrorNumber(string )" />
          <Method Sig="instance string get_ErrorText()" />
          <Method Sig="instance void set_ErrorText(string )" />
          <Method Sig="instance bool get_IsWarning()" />
          <Method Sig="instance void set_IsWarning(bool )" />
          <Method Sig="instance string get_FileName()" />
          <Method Sig="instance void set_FileName(string )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="CompilerErrorCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class CompilerErrorCollection )" />
          <Method Sig="instance void .ctor([] class CompilerError )" />
          <Method Sig="instance class CompilerError get_Item(int )" />
          <Method Sig="instance void set_Item(int , class CompilerError )" />
          <Method Sig="instance int Add(class CompilerError )" />
          <Method Sig="instance void AddRange([] class CompilerError )" />
          <Method Sig="instance void AddRange(class CompilerErrorCollection )" />
          <Method Sig="instance bool Contains(class CompilerError )" />
          <Method Sig="instance void CopyTo([] class CompilerError , int )" />
          <Method Sig="instance bool get_HasErrors()" />
          <Method Sig="instance bool get_HasWarnings()" />
          <Method Sig="instance int IndexOf(class CompilerError )" />
          <Method Sig="instance void Insert(int , class CompilerError )" />
          <Method Sig="instance void Remove(class CompilerError )" />
        </Type>
        <Type Name="CompilerInfo">
          <Method Sig="instance [] string GetLanguages()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] string GetExtensions()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Type get_CodeDomProviderType()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsCodeDomProviderTypeValid()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CodeDomProvider CreateProvider()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CompilerParameters CreateDefaultCompilerParameters()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int GetHashCode()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Equals(object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CompilerParameters">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] string , string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] string , string , bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_GenerateExecutable()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_GenerateExecutable(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_GenerateInMemory()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_GenerateInMemory(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class StringCollection get_ReferencedAssemblies()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_MainClass()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_MainClass(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_OutputAssembly()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_OutputAssembly(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class TempFileCollection get_TempFiles()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_TempFiles(class TempFileCollection )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IncludeDebugInformation()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_IncludeDebugInformation(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_TreatWarningsAsErrors()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_TreatWarningsAsErrors(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_WarningLevel()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_WarningLevel(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_CompilerOptions()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_CompilerOptions(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Win32Resource()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Win32Resource(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class StringCollection get_EmbeddedResources()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class StringCollection get_LinkedResources()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance intptr get_UserToken()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_UserToken(intptr )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Evidence get_Evidence()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Evidence(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="CompilerResults">
          <Method Sig="instance void .ctor(class TempFileCollection )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class TempFileCollection get_TempFiles()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_TempFiles(class TempFileCollection )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Evidence get_Evidence()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Evidence(class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Assembly get_CompiledAssembly()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_CompiledAssembly(class Assembly )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class CompilerErrorCollection get_Errors()" />
          <Method Sig="instance class StringCollection get_Output()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_PathToAssembly()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_PathToAssembly(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_NativeCompilerReturnValue()" />
          <Method Sig="instance void set_NativeCompilerReturnValue(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="Executor">
          <Method Sig="void ExecWait(string , class TempFileCollection )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="int ExecWaitWithCapture(string , class TempFileCollection , &amp; string , &amp; string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="int ExecWaitWithCapture(string , string , class TempFileCollection , &amp; string , &amp; string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="int ExecWaitWithCapture(intptr , string , class TempFileCollection , &amp; string , &amp; string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="int ExecWaitWithCapture(intptr , string , string , class TempFileCollection , &amp; string , &amp; string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="GeneratedCodeAttribute">
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance string get_Tool()" />
          <Method Sig="instance string get_Version()" />
        </Type>
        <Type Name="IndentedTextWriter">
          <Method Sig="instance void .ctor(class TextWriter )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(class TextWriter , string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Encoding get_Encoding()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_NewLine()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_NewLine(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_Indent()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Indent(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class TextWriter get_InnerWriter()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Close()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Flush()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(char )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write([] char )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write([] char , int , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(double )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(float )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(in64 )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(string , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(string , object , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Write(string , [] object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLineNoTabs(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(char )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine([] char )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine([] char , int , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(double )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(float )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(in64 )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(string , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(string , object , object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(string , [] object )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void WriteLine(uint )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="TempFileCollection">
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(string , bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string AddExtension(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string AddExtension(string , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void AddFile(string , bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IEnumerator GetEnumerator()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void CopyTo([] string , int )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int get_Count()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_TempDir()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_BasePath()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_KeepFiles()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_KeepFiles(bool )">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Delete()">
            <LinkDemand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </LinkDemand>
          </Method>
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Diagnostics">
      <Type Name="Switch">
        <Method Sig="instance class StringDictionary get_Attributes()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_DisplayName()" />
        <Method Sig="instance string get_Description()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BooleanSwitch">
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , string , string )" />
        <Method Sig="instance bool get_Enabled()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Enabled(bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="TraceListener">
        <Method Sig="instance class StringDictionary get_Attributes()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance bool get_IsThreadSafe()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance int get_IndentLevel()" />
        <Method Sig="instance void set_IndentLevel(int )" />
        <Method Sig="instance int get_IndentSize()" />
        <Method Sig="instance void set_IndentSize(int )" />
        <Method Sig="instance class TraceFilter get_Filter()" />
        <Method Sig="instance void set_Filter(class TraceFilter )" />
        <Method Sig="instance struct TraceOptions get_TraceOutputOptions()" />
        <Method Sig="instance void set_TraceOutputOptions(struct TraceOptions )" />
        <Method Sig="instance void Fail(string )" />
        <Method Sig="instance void Fail(string , string )" />
        <Method Sig="instance void Write(string )" />
        <Method Sig="instance void Write(object )" />
        <Method Sig="instance void Write(string , string )" />
        <Method Sig="instance void Write(object , string )" />
        <Method Sig="instance void WriteLine(string )" />
        <Method Sig="instance void WriteLine(object )" />
        <Method Sig="instance void WriteLine(string , string )" />
        <Method Sig="instance void WriteLine(object , string )" />
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int )" />
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string )" />
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceTransfer(class TraceEventCache , string , int , string , struct Guid )" />
      </Type>
      <Type Name="TextWriterTraceListener">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , string )" />
        <Method Sig="instance void .ctor(class TextWriter )" />
        <Method Sig="instance void .ctor(class TextWriter , string )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance class TextWriter get_Writer()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Writer(class TextWriter )" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ConsoleTraceListener">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(bool )" />
      </Type>
      <Type Name="CorrelationManager">
        <Method Sig="instance struct Guid get_ActivityId()" />
        <Method Sig="instance void set_ActivityId(struct Guid )" />
        <Method Sig="instance class Stack get_LogicalOperationStack()" />
        <Method Sig="instance void StartLogicalOperation(object )" />
        <Method Sig="instance void StartLogicalOperation()" />
        <Method Sig="instance void StopLogicalOperation()" />
      </Type>
      <Type Name="Debug">
        <Method Sig="class TraceListenerCollection get_Listeners()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="bool get_AutoFlush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void set_AutoFlush(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="int get_IndentLevel()" />
        <Method Sig="void set_IndentLevel(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="int get_IndentSize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_IndentSize(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Flush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void Assert(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Assert(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Assert(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Fail(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Fail(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Print(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Print(string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Indent()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Unindent()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="DefaultTraceListener">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_AssertUiEnabled()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_AssertUiEnabled(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_LogFileName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_LogFileName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Fail(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Window="SafeSubWindows" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Fail(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Window="SafeSubWindows" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="DelimitedListTraceListener">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , string )" />
        <Method Sig="instance void .ctor(class TextWriter )" />
        <Method Sig="instance void .ctor(class TextWriter , string )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_Delimiter()" />
        <Method Sig="instance void set_Delimiter(string )" />
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="TraceFilter">
        <Method Sig="instance bool ShouldTrace(class TraceEventCache , string , struct TraceEventType , int , string , [] object , object , [] object )" />
      </Type>
      <Type Name="EventTypeFilter">
        <Method Sig="instance void .ctor(struct SourceLevels )" />
        <Method Sig="instance bool ShouldTrace(class TraceEventCache , string , struct TraceEventType , int , string , [] object , object , [] object )" />
        <Method Sig="instance struct SourceLevels get_EventType()" />
        <Method Sig="instance void set_EventType(struct SourceLevels )" />
      </Type>
      <Type Name="SourceFilter">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance bool ShouldTrace(class TraceEventCache , string , struct TraceEventType , int , string , [] object , object , [] object )" />
        <Method Sig="instance string get_Source()" />
        <Method Sig="instance void set_Source(string )" />
      </Type>
      <Type Name="SourceSwitch">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance struct SourceLevels get_Level()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Level(struct SourceLevels )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance bool ShouldTrace(struct TraceEventType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="SwitchAttribute">
        <Method Sig="instance void .ctor(string , class Type )" />
        <Method Sig="instance string get_SwitchName()" />
        <Method Sig="instance void set_SwitchName(string )" />
        <Method Sig="instance class Type get_SwitchType()" />
        <Method Sig="instance void set_SwitchType(class Type )" />
        <Method Sig="instance string get_SwitchDescription()" />
        <Method Sig="instance void set_SwitchDescription(string )" />
        <Method Sig="[] class SwitchAttribute GetAll(class Assembly )" />
      </Type>
      <Type Name="SwitchLevelAttribute">
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance class Type get_SwitchLevelType()" />
        <Method Sig="instance void set_SwitchLevelType(class Type )" />
      </Type>
      <Type Name="Trace">
        <Method Sig="class TraceListenerCollection get_Listeners()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_AutoFlush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void set_AutoFlush(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="bool get_UseGlobalLock()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void set_UseGlobalLock(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class CorrelationManager get_CorrelationManager()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="int get_IndentLevel()" />
        <Method Sig="void set_IndentLevel(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="int get_IndentSize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_IndentSize(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Flush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Assert(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Assert(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Assert(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Fail(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Fail(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Refresh()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceInformation(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceInformation(string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceWarning(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceWarning(string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceError(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void TraceError(string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Write(object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLine(object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteIf(bool , object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteLineIf(bool , object , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Indent()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Unindent()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="TraceEventCache">
        <Method Sig="instance string get_Callstack()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stack get_LogicalOperationStack()" />
        <Method Sig="instance struct DateTime get_DateTime()" />
        <Method Sig="instance int get_ProcessId()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_ThreadId()" />
        <Method Sig="instance in64 get_Timestamp()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="TraceListenerCollection">
        <Method Sig="instance class TraceListener get_Item(int )" />
        <Method Sig="instance void set_Item(int , class TraceListener )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class TraceListener get_Item(string )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance int Add(class TraceListener )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void AddRange([] class TraceListener )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void AddRange(class TraceListenerCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Clear()" />
        <Method Sig="instance bool Contains(class TraceListener )" />
        <Method Sig="instance void CopyTo([] class TraceListener , int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance int IndexOf(class TraceListener )" />
        <Method Sig="instance void Insert(int , class TraceListener )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Remove(class TraceListener )" />
        <Method Sig="instance void Remove(string )" />
        <Method Sig="instance void RemoveAt(int )" />
      </Type>
      <Type Name="TraceSource">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , struct SourceLevels )" />
        <Method Sig="instance void Close()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Flush()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(struct TraceEventType , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(struct TraceEventType , int , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(struct TraceEventType , int , string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(struct TraceEventType , int , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(struct TraceEventType , int , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceInformation(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceInformation(string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceTransfer(int , string , struct Guid )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class StringDictionary get_Attributes()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance class TraceListenerCollection get_Listeners()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance class SourceSwitch get_Switch()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Switch(class SourceSwitch )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="TraceSwitch">
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , string , string )" />
        <Method Sig="instance struct TraceLevel get_Level()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Level(struct TraceLevel )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_TraceError()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_TraceWarning()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_TraceInfo()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_TraceVerbose()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="XmlWriterTraceListener">
        <Method Sig="instance void .ctor(class Stream )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Stream , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class TextWriter )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class TextWriter , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="COMPUTERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Fail(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close()" />
        <Method Sig="instance void TraceTransfer(class TraceEventCache , string , int , string , struct Guid )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="CounterCreationData">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string , struct PerformanceCounterType )" />
        <Method Sig="instance struct PerformanceCounterType get_CounterType()" />
        <Method Sig="instance void set_CounterType(struct PerformanceCounterType )" />
        <Method Sig="instance string get_CounterName()" />
        <Method Sig="instance void set_CounterName(string )" />
        <Method Sig="instance string get_CounterHelp()" />
        <Method Sig="instance void set_CounterHelp(string )" />
      </Type>
      <Type Name="CounterCreationDataCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class CounterCreationDataCollection )" />
        <Method Sig="instance void .ctor([] class CounterCreationData )" />
        <Method Sig="instance class CounterCreationData get_Item(int )" />
        <Method Sig="instance void set_Item(int , class CounterCreationData )" />
        <Method Sig="instance int Add(class CounterCreationData )" />
        <Method Sig="instance void AddRange([] class CounterCreationData )" />
        <Method Sig="instance void AddRange(class CounterCreationDataCollection )" />
        <Method Sig="instance bool Contains(class CounterCreationData )" />
        <Method Sig="instance void CopyTo([] class CounterCreationData , int )" />
        <Method Sig="instance int IndexOf(class CounterCreationData )" />
        <Method Sig="instance void Insert(int , class CounterCreationData )" />
        <Method Sig="instance void Remove(class CounterCreationData )" />
      </Type>
      <Type Name="CounterSample">
        <Method Sig="instance void .ctor(in64 , in64 , in64 , in64 , in64 , in64 , struct PerformanceCounterType )" />
        <Method Sig="instance void .ctor(in64 , in64 , in64 , in64 , in64 , in64 , struct PerformanceCounterType , in64 )" />
        <Method Sig="instance in64 get_RawValue()" />
        <Method Sig="instance in64 get_BaseValue()" />
        <Method Sig="instance in64 get_SystemFrequency()" />
        <Method Sig="instance in64 get_CounterFrequency()" />
        <Method Sig="instance in64 get_CounterTimeStamp()" />
        <Method Sig="instance in64 get_TimeStamp()" />
        <Method Sig="instance in64 get_TimeStamp100nSec()" />
        <Method Sig="instance struct PerformanceCounterType get_CounterType()" />
        <Method Sig="float Calculate(struct CounterSample )" />
        <Method Sig="float Calculate(struct CounterSample , struct CounterSample )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance bool Equals(struct CounterSample )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="bool op_Equality(struct CounterSample , struct CounterSample )" />
        <Method Sig="bool op_Inequality(struct CounterSample , struct CounterSample )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="CounterSampleCalculator">
        <Method Sig="float ComputeCounterValue(struct CounterSample )" />
        <Method Sig="float ComputeCounterValue(struct CounterSample , struct CounterSample )" />
      </Type>
      <Type Name="DataReceivedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class DataReceivedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class DataReceivedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="DataReceivedEventArgs">
        <Method Sig="instance string get_Data()" />
      </Type>
      <Type Name="DiagnosticsConfigurationHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="EntryWrittenEventArgs">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class EventLogEntry )" />
        <Method Sig="instance class EventLogEntry get_Entry()" />
      </Type>
      <Type Name="EntryWrittenEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class EntryWrittenEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class EntryWrittenEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="EventInstance">
        <Method Sig="instance void .ctor(in64 , int )" />
        <Method Sig="instance void .ctor(in64 , int , struct EventLogEntryType )" />
        <Method Sig="instance int get_CategoryId()" />
        <Method Sig="instance void set_CategoryId(int )" />
        <Method Sig="instance struct EventLogEntryType get_EntryType()" />
        <Method Sig="instance void set_EntryType(struct EventLogEntryType )" />
        <Method Sig="instance in64 get_InstanceId()" />
        <Method Sig="instance void set_InstanceId(in64 )" />
      </Type>
      <Type Name="EventLog">
        <Method Sig="instance void .ctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class EventLogEntryCollection get_Entries()" />
        <Method Sig="instance string get_LogDisplayName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Log()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Log(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 get_MaximumKilobytes()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_MaximumKilobytes(in64 )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct OverflowAction get_OverflowAction()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_MinimumRetentionDays()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_EnableRaisingEvents()" />
        <Method Sig="instance void set_EnableRaisingEvents(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class ISynchronizeInvoke get_SynchronizingObject()" />
        <Method Sig="instance void set_SynchronizingObject(class ISynchronizeInvoke )" />
        <Method Sig="instance string get_Source()" />
        <Method Sig="instance void set_Source(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_EntryWritten(class EntryWrittenEventHandler )" />
        <Method Sig="instance void remove_EntryWritten(class EntryWrittenEventHandler )" />
        <Method Sig="instance void BeginInit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Clear()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void CreateEventSource(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void CreateEventSource(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void CreateEventSource(class EventSourceCreationData )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Delete(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Delete(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void DeleteEventSource(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void DeleteEventSource(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void EndInit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool Exists(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool Exists(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="[] class EventLog GetEventLogs()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="[] class EventLog GetEventLogs(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool SourceExists(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool SourceExists(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string LogNameFromSourceName(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void ModifyOverflowPolicy(struct OverflowAction , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void RegisterDisplayName(string , in64 )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEntry(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEntry(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEntry(string , struct EventLogEntryType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEntry(string , string , struct EventLogEntryType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEntry(string , struct EventLogEntryType , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEntry(string , string , struct EventLogEntryType , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEntry(string , struct EventLogEntryType , int , short )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEntry(string , string , struct EventLogEntryType , int , short )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEntry(string , string , struct EventLogEntryType , int , short , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEntry(string , struct EventLogEntryType , int , short , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEvent(class EventInstance , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteEvent(class EventInstance , [] byte , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEvent(string , class EventInstance , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void WriteEvent(string , class EventInstance , [] byte , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="EventLogEntry">
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance [] byte get_Data()" />
        <Method Sig="instance int get_Index()" />
        <Method Sig="instance string get_Category()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance short get_CategoryNumber()" />
        <Method Sig="instance int get_EventID()" />
        <Method Sig="instance struct EventLogEntryType get_EntryType()" />
        <Method Sig="instance string get_Message()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Source()" />
        <Method Sig="instance [] string get_ReplacementStrings()" />
        <Method Sig="instance in64 get_InstanceId()" />
        <Method Sig="instance struct DateTime get_TimeGenerated()" />
        <Method Sig="instance struct DateTime get_TimeWritten()" />
        <Method Sig="instance string get_UserName()" />
        <Method Sig="instance bool Equals(class EventLogEntry )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="EventLogEntryCollection">
        <Method Sig="instance int get_Count()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class EventLogEntry get_Item(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void CopyTo([] class EventLogEntry , int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="EventLogPermission">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor(struct EventLogPermissionAccess , string )" />
        <Method Sig="instance void .ctor([] class EventLogPermissionEntry )" />
        <Method Sig="instance class EventLogPermissionEntryCollection get_PermissionEntries()" />
      </Type>
      <Type Name="EventLogPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )" />
        <Method Sig="instance struct EventLogPermissionAccess get_PermissionAccess()" />
        <Method Sig="instance void set_PermissionAccess(struct EventLogPermissionAccess )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="EventLogPermissionEntry">
        <Method Sig="instance void .ctor(struct EventLogPermissionAccess , string )" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance struct EventLogPermissionAccess get_PermissionAccess()" />
      </Type>
      <Type Name="EventLogPermissionEntryCollection">
        <Method Sig="instance class EventLogPermissionEntry get_Item(int )" />
        <Method Sig="instance void set_Item(int , class EventLogPermissionEntry )" />
        <Method Sig="instance int Add(class EventLogPermissionEntry )" />
        <Method Sig="instance void AddRange([] class EventLogPermissionEntry )" />
        <Method Sig="instance void AddRange(class EventLogPermissionEntryCollection )" />
        <Method Sig="instance bool Contains(class EventLogPermissionEntry )" />
        <Method Sig="instance void CopyTo([] class EventLogPermissionEntry , int )" />
        <Method Sig="instance int IndexOf(class EventLogPermissionEntry )" />
        <Method Sig="instance void Insert(int , class EventLogPermissionEntry )" />
        <Method Sig="instance void Remove(class EventLogPermissionEntry )" />
      </Type>
      <Type Name="EventLogTraceListener">
        <Method Sig="instance void .ctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class EventLog )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class EventLog get_EventLog()" />
        <Method Sig="instance void set_EventLog(class EventLog )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Write(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteLine(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceEvent(class TraceEventCache , string , struct TraceEventType , int , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void TraceData(class TraceEventCache , string , struct TraceEventType , int , [] object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="EventSourceCreationData">
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_LogName()" />
        <Method Sig="instance void set_LogName(string )" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )" />
        <Method Sig="instance string get_Source()" />
        <Method Sig="instance void set_Source(string )" />
        <Method Sig="instance string get_MessageResourceFile()" />
        <Method Sig="instance void set_MessageResourceFile(string )" />
        <Method Sig="instance string get_ParameterResourceFile()" />
        <Method Sig="instance void set_ParameterResourceFile(string )" />
        <Method Sig="instance string get_CategoryResourceFile()" />
        <Method Sig="instance void set_CategoryResourceFile(string )" />
        <Method Sig="instance int get_CategoryCount()" />
        <Method Sig="instance void set_CategoryCount(int )" />
      </Type>
      <Type Name="FileVersionInfo">
        <Method Sig="instance string get_Comments()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_CompanyName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_FileBuildPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_FileDescription()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_FileMajorPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_FileMinorPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_FileName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_FilePrivatePart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_FileVersion()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_InternalName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IsDebug()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IsPatched()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IsPrivateBuild()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IsPreRelease()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IsSpecialBuild()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Language()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_LegalCopyright()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_LegalTrademarks()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_OriginalFilename()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_PrivateBuild()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ProductBuildPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ProductMajorPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ProductMinorPart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_ProductName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ProductPrivatePart()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_ProductVersion()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_SpecialBuild()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class FileVersionInfo GetVersionInfo(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string ToString()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="InstanceData">
        <Method Sig="instance void .ctor(string , struct CounterSample )" />
        <Method Sig="instance string get_InstanceName()" />
        <Method Sig="instance struct CounterSample get_Sample()" />
        <Method Sig="instance in64 get_RawValue()" />
      </Type>
      <Type Name="InstanceDataCollection">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_CounterName()" />
        <Method Sig="instance class ICollection get_Keys()" />
        <Method Sig="instance class ICollection get_Values()" />
        <Method Sig="instance class InstanceData get_Item(string )" />
        <Method Sig="instance bool Contains(string )" />
        <Method Sig="instance void CopyTo([] class InstanceData , int )" />
      </Type>
      <Type Name="InstanceDataCollectionCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class InstanceDataCollection get_Item(string )" />
        <Method Sig="instance class ICollection get_Keys()" />
        <Method Sig="instance class ICollection get_Values()" />
        <Method Sig="instance bool Contains(string )" />
        <Method Sig="instance void CopyTo([] class InstanceDataCollection , int )" />
      </Type>
      <Type Name="MonitoringDescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
      <Type Name="PerformanceCounter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string , string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_CategoryName()" />
        <Method Sig="instance void set_CategoryName(string )" />
        <Method Sig="instance string get_CounterHelp()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_CounterName()" />
        <Method Sig="instance void set_CounterName(string )" />
        <Method Sig="instance struct PerformanceCounterType get_CounterType()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct PerformanceCounterInstanceLifetime get_InstanceLifetime()" />
        <Method Sig="instance void set_InstanceLifetime(struct PerformanceCounterInstanceLifetime )" />
        <Method Sig="instance string get_InstanceName()" />
        <Method Sig="instance void set_InstanceName(string )" />
        <Method Sig="instance bool get_ReadOnly()" />
        <Method Sig="instance void set_ReadOnly(bool )" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )" />
        <Method Sig="instance in64 get_RawValue()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_RawValue(in64 )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void BeginInit()" />
        <Method Sig="instance void Close()" />
        <Method Sig="void CloseSharedResources()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                <Machine name=".">
                  <Category access="Browse" name="*" />
                </Machine>
              </IPermission>
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 Decrement()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void EndInit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 IncrementBy(in64 )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 Increment()" />
        <Method Sig="instance struct CounterSample NextSample()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance float NextValue()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void RemoveInstance()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="PerformanceCounterCategory">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_CategoryName()" />
        <Method Sig="instance void set_CategoryName(string )" />
        <Method Sig="instance string get_CategoryHelp()" />
        <Method Sig="instance struct PerformanceCounterCategoryType get_CategoryType()" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )" />
        <Method Sig="instance bool CounterExists(string )" />
        <Method Sig="bool CounterExists(string , string )" />
        <Method Sig="bool CounterExists(string , string , string )" />
        <Method Sig="class PerformanceCounterCategory Create(string , string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PerformanceCounterCategory Create(string , string , struct PerformanceCounterCategoryType , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PerformanceCounterCategory Create(string , string , class CounterCreationDataCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class PerformanceCounterCategory Create(string , string , struct PerformanceCounterCategoryType , class CounterCreationDataCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Delete(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool Exists(string )" />
        <Method Sig="bool Exists(string , string )" />
        <Method Sig="instance [] class PerformanceCounter GetCounters()" />
        <Method Sig="instance [] class PerformanceCounter GetCounters(string )" />
        <Method Sig="[] class PerformanceCounterCategory GetCategories()" />
        <Method Sig="[] class PerformanceCounterCategory GetCategories(string )" />
        <Method Sig="instance [] string GetInstanceNames()" />
        <Method Sig="instance bool InstanceExists(string )" />
        <Method Sig="bool InstanceExists(string , string )" />
        <Method Sig="bool InstanceExists(string , string , string )" />
        <Method Sig="instance class InstanceDataCollectionCollection ReadCategory()" />
      </Type>
      <Type Name="PerformanceCounterManager">
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="PerformanceCounterPermission">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor(struct PerformanceCounterPermissionAccess , string , string )" />
        <Method Sig="instance void .ctor([] class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance class PerformanceCounterPermissionEntryCollection get_PermissionEntries()" />
      </Type>
      <Type Name="PerformanceCounterPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance string get_CategoryName()" />
        <Method Sig="instance void set_CategoryName(string )" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance void set_MachineName(string )" />
        <Method Sig="instance struct PerformanceCounterPermissionAccess get_PermissionAccess()" />
        <Method Sig="instance void set_PermissionAccess(struct PerformanceCounterPermissionAccess )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="PerformanceCounterPermissionEntry">
        <Method Sig="instance void .ctor(struct PerformanceCounterPermissionAccess , string , string )" />
        <Method Sig="instance string get_CategoryName()" />
        <Method Sig="instance string get_MachineName()" />
        <Method Sig="instance struct PerformanceCounterPermissionAccess get_PermissionAccess()" />
      </Type>
      <Type Name="PerformanceCounterPermissionEntryCollection">
        <Method Sig="instance class PerformanceCounterPermissionEntry get_Item(int )" />
        <Method Sig="instance void set_Item(int , class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance int Add(class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance void AddRange([] class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance void AddRange(class PerformanceCounterPermissionEntryCollection )" />
        <Method Sig="instance bool Contains(class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance void CopyTo([] class PerformanceCounterPermissionEntry , int )" />
        <Method Sig="instance int IndexOf(class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance void Insert(int , class PerformanceCounterPermissionEntry )" />
        <Method Sig="instance void Remove(class PerformanceCounterPermissionEntry )" />
      </Type>
      <Type Name="Process">
        <Method Sig="instance void add_OutputDataReceived(class DataReceivedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_OutputDataReceived(class DataReceivedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_ErrorDataReceived(class DataReceivedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_ErrorDataReceived(class DataReceivedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_BasePriority()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ExitCode()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_HasExited()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct DateTime get_ExitTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_Handle()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_HandleCount()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_Id()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_MachineName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_MainWindowHandle()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_MainWindowTitle()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ProcessModule get_MainModule()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_MaxWorkingSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_MaxWorkingSet(intptr )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_MinWorkingSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_MinWorkingSet(intptr )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ProcessModuleCollection get_Modules()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_NonpagedSystemMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_NonpagedSystemMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PagedMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PagedMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PagedSystemMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PagedSystemMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PeakPagedMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PeakPagedMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PeakWorkingSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PeakWorkingSet64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PeakVirtualMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PeakVirtualMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_PriorityBoostEnabled()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_PriorityBoostEnabled(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct ProcessPriorityClass get_PriorityClass()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_PriorityClass(struct ProcessPriorityClass )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_PrivateMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_PrivateMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct TimeSpan get_PrivilegedProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_ProcessName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_ProcessorAffinity()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_ProcessorAffinity(intptr )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_Responding()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_SessionId()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ProcessStartInfo get_StartInfo()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_StartInfo(class ProcessStartInfo )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct DateTime get_StartTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ISynchronizeInvoke get_SynchronizingObject()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_SynchronizingObject(class ISynchronizeInvoke )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ProcessThreadCollection get_Threads()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct TimeSpan get_TotalProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct TimeSpan get_UserProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_VirtualMemorySize()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_VirtualMemorySize64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_EnableRaisingEvents()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_EnableRaisingEvents(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class StreamWriter get_StandardInput()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class StreamReader get_StandardOutput()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class StreamReader get_StandardError()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_WorkingSet()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance in64 get_WorkingSet64()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Exited(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Exited(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool CloseMainWindow()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Close()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void EnterDebugMode()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void LeaveDebugMode()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process GetProcessById(int , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process GetProcessById(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="[] class Process GetProcessesByName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="[] class Process GetProcessesByName(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="[] class Process GetProcesses()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="[] class Process GetProcesses(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process GetCurrentProcess()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Refresh()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool Start()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process Start(string , string , class SecureString , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process Start(string , string , string , class SecureString , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process Start(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process Start(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="class Process Start(class ProcessStartInfo )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Kill()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool WaitForExit(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void WaitForExit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool WaitForInputIdle(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool WaitForInputIdle()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void BeginOutputReadLine()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void BeginErrorReadLine()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void CancelOutputRead()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void CancelErrorRead()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void .cctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="ProcessModule">
        <Method Sig="instance string get_ModuleName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_FileName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_BaseAddress()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_ModuleMemorySize()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_EntryPointAddress()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class FileVersionInfo get_FileVersionInfo()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string ToString()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="ProcessModuleCollection">
        <Method Sig="instance void .ctor([] class ProcessModule )" />
        <Method Sig="instance class ProcessModule get_Item(int )" />
        <Method Sig="instance int IndexOf(class ProcessModule )" />
        <Method Sig="instance bool Contains(class ProcessModule )" />
        <Method Sig="instance void CopyTo([] class ProcessModule , int )" />
      </Type>
      <Type Name="ProcessStartInfo">
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string , string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Verb()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Verb(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Arguments()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Arguments(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_CreateNoWindow()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_CreateNoWindow(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class StringDictionary get_EnvironmentVariables()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_RedirectStandardInput()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_RedirectStandardInput(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_RedirectStandardOutput()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_RedirectStandardOutput(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_RedirectStandardError()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_RedirectStandardError(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class Encoding get_StandardErrorEncoding()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_StandardErrorEncoding(class Encoding )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class Encoding get_StandardOutputEncoding()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_StandardOutputEncoding(class Encoding )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_UseShellExecute()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_UseShellExecute(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance [] string get_Verbs()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_UserName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_UserName(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class SecureString get_Password()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Password(class SecureString )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Domain()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Domain(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_LoadUserProfile()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_LoadUserProfile(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_FileName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_FileName(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_WorkingDirectory()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_WorkingDirectory(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_ErrorDialog()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_ErrorDialog(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_ErrorDialogParentHandle()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_ErrorDialogParentHandle(intptr )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct ProcessWindowStyle get_WindowStyle()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_WindowStyle(struct ProcessWindowStyle )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="ProcessThread">
        <Method Sig="instance int get_BasePriority()" />
        <Method Sig="instance int get_CurrentPriority()" />
        <Method Sig="instance int get_Id()" />
        <Method Sig="instance void set_IdealProcessor(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_PriorityBoostEnabled()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_PriorityBoostEnabled(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct ThreadPriorityLevel get_PriorityLevel()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_PriorityLevel(struct ThreadPriorityLevel )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct TimeSpan get_PrivilegedProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance intptr get_StartAddress()" />
        <Method Sig="instance struct DateTime get_StartTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct ThreadState get_ThreadState()" />
        <Method Sig="instance struct TimeSpan get_TotalProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct TimeSpan get_UserProcessorTime()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct ThreadWaitReason get_WaitReason()" />
        <Method Sig="instance void ResetIdealProcessor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_ProcessorAffinity(intptr )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ProcessThreadCollection">
        <Method Sig="instance void .ctor([] class ProcessThread )" />
        <Method Sig="instance class ProcessThread get_Item(int )" />
        <Method Sig="instance int Add(class ProcessThread )" />
        <Method Sig="instance void Insert(int , class ProcessThread )" />
        <Method Sig="instance int IndexOf(class ProcessThread )" />
        <Method Sig="instance bool Contains(class ProcessThread )" />
        <Method Sig="instance void Remove(class ProcessThread )" />
        <Method Sig="instance void CopyTo([] class ProcessThread , int )" />
      </Type>
      <Type Name="Stopwatch">
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void Start()" />
        <Method Sig="class Stopwatch StartNew()" />
        <Method Sig="instance void Stop()" />
        <Method Sig="instance void Reset()" />
        <Method Sig="instance bool get_IsRunning()" />
        <Method Sig="instance struct TimeSpan get_Elapsed()" />
        <Method Sig="instance in64 get_ElapsedMilliseconds()" />
        <Method Sig="instance in64 get_ElapsedTicks()" />
        <Method Sig="in64 GetTimestamp()" />
      </Type>
    </Namespace>
    <Namespace Name="IO">
      <Namespace Name="Compression">
        <Type Name="DeflateStream">
          <Method Sig="instance void .ctor(class Stream , struct CompressionMode )" />
          <Method Sig="instance void .ctor(class Stream , struct CompressionMode , bool )" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance void Flush()" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance void SetLength(in64 )" />
          <Method Sig="instance int Read([] byte , int , int )" />
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )" />
          <Method Sig="instance int EndRead(class IAsyncResult )" />
          <Method Sig="instance void Write([] byte , int , int )" />
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )" />
          <Method Sig="instance void EndWrite(class IAsyncResult )" />
          <Method Sig="instance class Stream get_BaseStream()" />
        </Type>
        <Type Name="GZipStream">
          <Method Sig="instance void .ctor(class Stream , struct CompressionMode )" />
          <Method Sig="instance void .ctor(class Stream , struct CompressionMode , bool )" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance void Flush()" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance void SetLength(in64 )" />
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )" />
          <Method Sig="instance int EndRead(class IAsyncResult )" />
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )" />
          <Method Sig="instance void EndWrite(class IAsyncResult )" />
          <Method Sig="instance int Read([] byte , int , int )" />
          <Method Sig="instance void Write([] byte , int , int )" />
          <Method Sig="instance class Stream get_BaseStream()" />
        </Type>
      </Namespace>
      <Type Name="InvalidDataException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="ErrorEventArgs">
        <Method Sig="instance void .ctor(class Exception )" />
        <Method Sig="instance class Exception GetException()" />
      </Type>
      <Type Name="ErrorEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class ErrorEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ErrorEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="FileSystemEventArgs">
        <Method Sig="instance void .ctor(struct WatcherChangeTypes , string , string )" />
        <Method Sig="instance struct WatcherChangeTypes get_ChangeType()" />
        <Method Sig="instance string get_FullPath()" />
        <Method Sig="instance string get_Name()" />
      </Type>
      <Type Name="FileSystemEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class FileSystemEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class FileSystemEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="FileSystemWatcher">
        <Method Sig="void .cctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(string , string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct NotifyFilters get_NotifyFilter()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_NotifyFilter(struct NotifyFilters )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_EnableRaisingEvents()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_EnableRaisingEvents(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Filter()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Filter(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_IncludeSubdirectories()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_IncludeSubdirectories(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance int get_InternalBufferSize()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_InternalBufferSize(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Path()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Path(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ISite get_Site()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Site(class ISite )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ISynchronizeInvoke get_SynchronizingObject()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_SynchronizingObject(class ISynchronizeInvoke )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Changed(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Changed(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Created(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Created(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Deleted(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Deleted(class FileSystemEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Error(class ErrorEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Error(class ErrorEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void add_Renamed(class RenamedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void remove_Renamed(class RenamedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void BeginInit()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void EndInit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct WaitForChangedResult WaitForChanged(struct WatcherChangeTypes )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct WaitForChangedResult WaitForChanged(struct WatcherChangeTypes , int )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="InternalBufferOverflowException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="IODescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
      <Type Name="RenamedEventArgs">
        <Method Sig="instance void .ctor(struct WatcherChangeTypes , string , string , string )" />
        <Method Sig="instance string get_OldFullPath()" />
        <Method Sig="instance string get_OldName()" />
      </Type>
      <Type Name="RenamedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class RenamedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class RenamedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="WaitForChangedResult">
        <Method Sig="instance struct WatcherChangeTypes get_ChangeType()" />
        <Method Sig="instance void set_ChangeType(struct WatcherChangeTypes )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance string get_OldName()" />
        <Method Sig="instance void set_OldName(string )" />
        <Method Sig="instance bool get_TimedOut()" />
        <Method Sig="instance void set_TimedOut(bool )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Namespace Name="Ports">
        <Type Name="SerialErrorReceivedEventArgs">
          <Method Sig="instance struct SerialError get_EventType()" />
        </Type>
        <Type Name="SerialErrorReceivedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class SerialErrorReceivedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class SerialErrorReceivedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="SerialPinChangedEventArgs">
          <Method Sig="instance struct SerialPinChange get_EventType()" />
        </Type>
        <Type Name="SerialPinChangedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class SerialPinChangedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class SerialPinChangedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="SerialPort">
          <Method Sig="instance void add_ErrorReceived(class SerialErrorReceivedEventHandler )" />
          <Method Sig="instance void remove_ErrorReceived(class SerialErrorReceivedEventHandler )" />
          <Method Sig="instance void add_PinChanged(class SerialPinChangedEventHandler )" />
          <Method Sig="instance void remove_PinChanged(class SerialPinChangedEventHandler )" />
          <Method Sig="instance void add_DataReceived(class SerialDataReceivedEventHandler )" />
          <Method Sig="instance void remove_DataReceived(class SerialDataReceivedEventHandler )" />
          <Method Sig="instance class Stream get_BaseStream()" />
          <Method Sig="instance int get_BaudRate()" />
          <Method Sig="instance void set_BaudRate(int )" />
          <Method Sig="instance bool get_BreakState()" />
          <Method Sig="instance void set_BreakState(bool )" />
          <Method Sig="instance int get_BytesToWrite()" />
          <Method Sig="instance int get_BytesToRead()" />
          <Method Sig="instance bool get_CDHolding()" />
          <Method Sig="instance bool get_CtsHolding()" />
          <Method Sig="instance int get_DataBits()" />
          <Method Sig="instance void set_DataBits(int )" />
          <Method Sig="instance bool get_DiscardNull()" />
          <Method Sig="instance void set_DiscardNull(bool )" />
          <Method Sig="instance bool get_DsrHolding()" />
          <Method Sig="instance bool get_DtrEnable()" />
          <Method Sig="instance void set_DtrEnable(bool )" />
          <Method Sig="instance class Encoding get_Encoding()" />
          <Method Sig="instance void set_Encoding(class Encoding )" />
          <Method Sig="instance struct Handshake get_Handshake()" />
          <Method Sig="instance void set_Handshake(struct Handshake )" />
          <Method Sig="instance bool get_IsOpen()" />
          <Method Sig="instance string get_NewLine()" />
          <Method Sig="instance void set_NewLine(string )" />
          <Method Sig="instance struct Parity get_Parity()" />
          <Method Sig="instance void set_Parity(struct Parity )" />
          <Method Sig="instance byte get_ParityReplace()" />
          <Method Sig="instance void set_ParityReplace(byte )" />
          <Method Sig="instance string get_PortName()" />
          <Method Sig="instance void set_PortName(string )" />
          <Method Sig="instance int get_ReadBufferSize()" />
          <Method Sig="instance void set_ReadBufferSize(int )" />
          <Method Sig="instance int get_ReadTimeout()" />
          <Method Sig="instance void set_ReadTimeout(int )" />
          <Method Sig="instance int get_ReceivedBytesThreshold()" />
          <Method Sig="instance void set_ReceivedBytesThreshold(int )" />
          <Method Sig="instance bool get_RtsEnable()" />
          <Method Sig="instance void set_RtsEnable(bool )" />
          <Method Sig="instance struct StopBits get_StopBits()" />
          <Method Sig="instance void set_StopBits(struct StopBits )" />
          <Method Sig="instance int get_WriteBufferSize()" />
          <Method Sig="instance void set_WriteBufferSize(int )" />
          <Method Sig="instance int get_WriteTimeout()" />
          <Method Sig="instance void set_WriteTimeout(int )" />
          <Method Sig="instance void .ctor(class IContainer )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="instance void .ctor(string , int , struct Parity )" />
          <Method Sig="instance void .ctor(string , int , struct Parity , int )" />
          <Method Sig="instance void .ctor(string , int , struct Parity , int , struct StopBits )" />
          <Method Sig="instance void Close()" />
          <Method Sig="instance void DiscardInBuffer()" />
          <Method Sig="instance void DiscardOutBuffer()" />
          <Method Sig="[] string GetPortNames()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Open()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Read([] byte , int , int )" />
          <Method Sig="instance int ReadChar()" />
          <Method Sig="instance int Read([] char , int , int )" />
          <Method Sig="instance int ReadByte()" />
          <Method Sig="instance string ReadExisting()" />
          <Method Sig="instance string ReadLine()" />
          <Method Sig="instance string ReadTo(string )" />
          <Method Sig="instance void Write(string )" />
          <Method Sig="instance void Write([] char , int , int )" />
          <Method Sig="instance void Write([] byte , int , int )" />
          <Method Sig="instance void WriteLine(string )" />
        </Type>
        <Type Name="SerialDataReceivedEventArgs">
          <Method Sig="instance struct SerialData get_EventType()" />
        </Type>
        <Type Name="SerialDataReceivedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class SerialDataReceivedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class SerialDataReceivedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Runtime">
      <Namespace Name="InteropServices">
        <Type Name="HandleCollector">
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="instance void .ctor(string , int , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int get_InitialThreshold()" />
          <Method Sig="instance int get_MaximumThreshold()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void Add()" />
          <Method Sig="instance void Remove()" />
        </Type>
        <Type Name="DefaultParameterValueAttribute">
          <Method Sig="instance void .ctor(object )" />
          <Method Sig="instance object get_Value()" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Threading">
      <Type Name="Semaphore">
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="instance void .ctor(int , int , string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(int , int , string , &amp; bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(int , int , string , &amp; bool , class SemaphoreSecurity )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Semaphore OpenExisting(string )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Semaphore OpenExisting(string , struct SemaphoreRights )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance int Release()" />
        <Method Sig="instance int Release(int )" />
        <Method Sig="instance class SemaphoreSecurity GetAccessControl()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetAccessControl(class SemaphoreSecurity )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SemaphoreFullException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
      </Type>
      <Type Name="ThreadExceptionEventArgs">
        <Method Sig="instance void .ctor(class Exception )" />
        <Method Sig="instance class Exception get_Exception()" />
      </Type>
      <Type Name="ThreadExceptionEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class ThreadExceptionEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ThreadExceptionEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
    </Namespace>
    <Namespace Name="Media">
      <Type Name="SoundPlayer">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlThread" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance int get_LoadTimeout()" />
        <Method Sig="instance void set_LoadTimeout(int )" />
        <Method Sig="instance string get_SoundLocation()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_SoundLocation(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlThread" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream get_Stream()" />
        <Method Sig="instance void set_Stream(class Stream )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlThread" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_IsLoadCompleted()" />
        <Method Sig="instance object get_Tag()" />
        <Method Sig="instance void set_Tag(object )" />
        <Method Sig="instance void LoadAsync()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Load()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlThread, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Play()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlThread, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void PlaySync()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlThread, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void PlayLooping()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlThread, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Stop()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_LoadCompleted(class AsyncCompletedEventHandler )" />
        <Method Sig="instance void remove_LoadCompleted(class AsyncCompletedEventHandler )" />
        <Method Sig="instance void add_SoundLocationChanged(class EventHandler )" />
        <Method Sig="instance void remove_SoundLocationChanged(class EventHandler )" />
        <Method Sig="instance void add_StreamChanged(class EventHandler )" />
        <Method Sig="instance void remove_StreamChanged(class EventHandler )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SystemSounds">
        <Method Sig="class SystemSound get_Asterisk()" />
        <Method Sig="class SystemSound get_Beep()" />
        <Method Sig="class SystemSound get_Exclamation()" />
        <Method Sig="class SystemSound get_Hand()" />
        <Method Sig="class SystemSound get_Question()" />
      </Type>
      <Type Name="SystemSound">
        <Method Sig="instance void Play()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
    </Namespace>
    <Namespace Name="Security">
      <Namespace Name="AccessControl">
        <Type Name="SemaphoreAccessRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct SemaphoreRights , struct AccessControlType )" />
          <Method Sig="instance void .ctor(string , struct SemaphoreRights , struct AccessControlType )" />
          <Method Sig="instance struct SemaphoreRights get_SemaphoreRights()" />
        </Type>
        <Type Name="SemaphoreAuditRule">
          <Method Sig="instance void .ctor(class IdentityReference , struct SemaphoreRights , struct AuditFlags )" />
          <Method Sig="instance struct SemaphoreRights get_SemaphoreRights()" />
        </Type>
        <Type Name="SemaphoreSecurity">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , struct AccessControlSections )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class AccessRule AccessRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AccessControlType )" />
          <Method Sig="instance class AuditRule AuditRuleFactory(class IdentityReference , int , bool , struct InheritanceFlags , struct PropagationFlags , struct AuditFlags )" />
          <Method Sig="instance void AddAccessRule(class SemaphoreAccessRule )" />
          <Method Sig="instance void SetAccessRule(class SemaphoreAccessRule )" />
          <Method Sig="instance void ResetAccessRule(class SemaphoreAccessRule )" />
          <Method Sig="instance bool RemoveAccessRule(class SemaphoreAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleAll(class SemaphoreAccessRule )" />
          <Method Sig="instance void RemoveAccessRuleSpecific(class SemaphoreAccessRule )" />
          <Method Sig="instance void AddAuditRule(class SemaphoreAuditRule )" />
          <Method Sig="instance void SetAuditRule(class SemaphoreAuditRule )" />
          <Method Sig="instance bool RemoveAuditRule(class SemaphoreAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleAll(class SemaphoreAuditRule )" />
          <Method Sig="instance void RemoveAuditRuleSpecific(class SemaphoreAuditRule )" />
          <Method Sig="instance class Type get_AccessRightType()" />
          <Method Sig="instance class Type get_AccessRuleType()" />
          <Method Sig="instance class Type get_AuditRuleType()" />
        </Type>
      </Namespace>
      <Namespace Name="Permissions">
        <Type Name="StorePermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct StorePermissionFlags )" />
          <Method Sig="instance void set_Flags(struct StorePermissionFlags )" />
          <Method Sig="instance struct StorePermissionFlags get_Flags()" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="StorePermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct StorePermissionFlags get_Flags()" />
          <Method Sig="instance void set_Flags(struct StorePermissionFlags )" />
          <Method Sig="instance bool get_CreateStore()" />
          <Method Sig="instance void set_CreateStore(bool )" />
          <Method Sig="instance bool get_DeleteStore()" />
          <Method Sig="instance void set_DeleteStore(bool )" />
          <Method Sig="instance bool get_EnumerateStores()" />
          <Method Sig="instance void set_EnumerateStores(bool )" />
          <Method Sig="instance bool get_OpenStore()" />
          <Method Sig="instance void set_OpenStore(bool )" />
          <Method Sig="instance bool get_AddToStore()" />
          <Method Sig="instance void set_AddToStore(bool )" />
          <Method Sig="instance bool get_RemoveFromStore()" />
          <Method Sig="instance void set_RemoveFromStore(bool )" />
          <Method Sig="instance bool get_EnumerateCertificates()" />
          <Method Sig="instance void set_EnumerateCertificates(bool )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="ResourcePermissionBase">
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
        </Type>
        <Type Name="ResourcePermissionBaseEntry">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int , [] string )" />
          <Method Sig="instance int get_PermissionAccess()" />
          <Method Sig="instance [] string get_PermissionAccessPath()" />
        </Type>
      </Namespace>
      <Namespace Name="Cryptography">
        <Type Name="AsnEncodedData">
          <Method Sig="instance void .ctor([] byte )" />
          <Method Sig="instance void .ctor(string , [] byte )" />
          <Method Sig="instance void .ctor(class Oid , [] byte )" />
          <Method Sig="instance void .ctor(class AsnEncodedData )" />
          <Method Sig="instance class Oid get_Oid()" />
          <Method Sig="instance void set_Oid(class Oid )" />
          <Method Sig="instance [] byte get_RawData()" />
          <Method Sig="instance void set_RawData([] byte )" />
          <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          <Method Sig="instance string Format(bool )" />
        </Type>
        <Type Name="AsnEncodedDataCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class AsnEncodedData )" />
          <Method Sig="instance int Add(class AsnEncodedData )" />
          <Method Sig="instance void Remove(class AsnEncodedData )" />
          <Method Sig="instance class AsnEncodedData get_Item(int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class AsnEncodedDataEnumerator GetEnumerator()" />
          <Method Sig="instance void CopyTo([] class AsnEncodedData , int )" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
        </Type>
        <Type Name="AsnEncodedDataEnumerator">
          <Method Sig="instance class AsnEncodedData get_Current()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="Oid">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(class Oid )" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance void set_Value(string )" />
          <Method Sig="instance string get_FriendlyName()" />
          <Method Sig="instance void set_FriendlyName(string )" />
        </Type>
        <Type Name="OidCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int Add(class Oid )" />
          <Method Sig="instance class Oid get_Item(int )" />
          <Method Sig="instance class Oid get_Item(string )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class OidEnumerator GetEnumerator()" />
          <Method Sig="instance void CopyTo([] class Oid , int )" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
        </Type>
        <Type Name="OidEnumerator">
          <Method Sig="instance class Oid get_Current()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Namespace Name="X509Certificates">
          <Type Name="X500DistinguishedName">
            <Method Sig="instance void .ctor([] byte )" />
            <Method Sig="instance void .ctor(class AsnEncodedData )" />
            <Method Sig="instance void .ctor(class X500DistinguishedName )" />
            <Method Sig="instance void .ctor(string )" />
            <Method Sig="instance void .ctor(string , struct X500DistinguishedNameFlags )" />
            <Method Sig="instance string get_Name()" />
            <Method Sig="instance string Decode(struct X500DistinguishedNameFlags )" />
            <Method Sig="instance string Format(bool )" />
          </Type>
          <Type Name="PublicKey">
            <Method Sig="instance void .ctor(class Oid , class AsnEncodedData , class AsnEncodedData )" />
            <Method Sig="instance class AsymmetricAlgorithm get_Key()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Window="SafeTopLevelWindows" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                  <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance class Oid get_Oid()" />
            <Method Sig="instance class AsnEncodedData get_EncodedKeyValue()" />
            <Method Sig="instance class AsnEncodedData get_EncodedParameters()" />
          </Type>
          <Type Name="X509Certificate2">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor([] byte )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , class SecureString )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor([] byte , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , class SecureString )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(string , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void .ctor(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance void .ctor(class X509Certificate )" />
            <Method Sig="instance string ToString()" />
            <Method Sig="instance string ToString(bool )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Window="SafeTopLevelWindows" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                  <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance bool get_Archived()" />
            <Method Sig="instance void set_Archived(bool )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance class X509ExtensionCollection get_Extensions()" />
            <Method Sig="instance string get_FriendlyName()" />
            <Method Sig="instance void set_FriendlyName(string )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance class X500DistinguishedName get_IssuerName()" />
            <Method Sig="instance struct DateTime get_NotAfter()" />
            <Method Sig="instance struct DateTime get_NotBefore()" />
            <Method Sig="instance bool get_HasPrivateKey()" />
            <Method Sig="instance class AsymmetricAlgorithm get_PrivateKey()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Window="SafeTopLevelWindows" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                  <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void set_PrivateKey(class AsymmetricAlgorithm )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance class PublicKey get_PublicKey()" />
            <Method Sig="instance [] byte get_RawData()" />
            <Method Sig="instance string get_SerialNumber()" />
            <Method Sig="instance class X500DistinguishedName get_SubjectName()" />
            <Method Sig="instance class Oid get_SignatureAlgorithm()" />
            <Method Sig="instance string get_Thumbprint()" />
            <Method Sig="instance int get_Version()" />
            <Method Sig="instance string GetNameInfo(struct X509NameType , bool )" />
            <Method Sig="instance void Import([] byte )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Import(string , class SecureString , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Reset()" />
            <Method Sig="instance bool Verify()">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="struct X509ContentType GetCertContentType([] byte )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="struct X509ContentType GetCertContentType(string )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
          </Type>
          <Type Name="X509CertificateCollection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(class X509CertificateCollection )" />
            <Method Sig="instance void .ctor([] class X509Certificate )" />
            <Method Sig="instance class X509Certificate get_Item(int )" />
            <Method Sig="instance void set_Item(int , class X509Certificate )" />
            <Method Sig="instance int Add(class X509Certificate )" />
            <Method Sig="instance void AddRange([] class X509Certificate )" />
            <Method Sig="instance void AddRange(class X509CertificateCollection )" />
            <Method Sig="instance bool Contains(class X509Certificate )" />
            <Method Sig="instance void CopyTo([] class X509Certificate , int )" />
            <Method Sig="instance int IndexOf(class X509Certificate )" />
            <Method Sig="instance void Insert(int , class X509Certificate )" />
            <Method Sig="instance class X509CertificateEnumerator GetEnumerator()" />
            <Method Sig="instance void Remove(class X509Certificate )" />
            <Method Sig="instance int GetHashCode()" />
          </Type>
          <Type Name="X509Certificate2Collection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(class X509Certificate2 )" />
            <Method Sig="instance void .ctor(class X509Certificate2Collection )" />
            <Method Sig="instance void .ctor([] class X509Certificate2 )" />
            <Method Sig="instance class X509Certificate2 get_Item(int )" />
            <Method Sig="instance void set_Item(int , class X509Certificate2 )" />
            <Method Sig="instance int Add(class X509Certificate2 )" />
            <Method Sig="instance void AddRange([] class X509Certificate2 )" />
            <Method Sig="instance void AddRange(class X509Certificate2Collection )" />
            <Method Sig="instance bool Contains(class X509Certificate2 )" />
            <Method Sig="instance void Insert(int , class X509Certificate2 )" />
            <Method Sig="instance class X509Certificate2Enumerator GetEnumerator()" />
            <Method Sig="instance void Remove(class X509Certificate2 )" />
            <Method Sig="instance void RemoveRange([] class X509Certificate2 )" />
            <Method Sig="instance void RemoveRange(class X509Certificate2Collection )" />
            <Method Sig="instance class X509Certificate2Collection Find(struct X509FindType , object , bool )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Import([] byte , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Import(string )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Import(string , string , struct X509KeyStorageFlags )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance [] byte Export(struct X509ContentType )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance [] byte Export(struct X509ContentType , string )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
          </Type>
          <Type Name="X509Certificate2Enumerator">
            <Method Sig="instance class X509Certificate2 get_Current()" />
            <Method Sig="instance bool MoveNext()" />
            <Method Sig="instance void Reset()" />
          </Type>
          <Type Name="X509ChainStatus">
            <Method Sig="instance struct X509ChainStatusFlags get_Status()" />
            <Method Sig="instance void set_Status(struct X509ChainStatusFlags )" />
            <Method Sig="instance string get_StatusInformation()" />
            <Method Sig="instance void set_StatusInformation(string )" />
          </Type>
          <Type Name="X509Chain">
            <Method Sig="class X509Chain Create()" />
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(bool )" />
            <Method Sig="instance void .ctor(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance intptr get_ChainContext()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance class X509ChainPolicy get_ChainPolicy()" />
            <Method Sig="instance void set_ChainPolicy(class X509ChainPolicy )" />
            <Method Sig="instance [] struct X509ChainStatus get_ChainStatus()" />
            <Method Sig="instance class X509ChainElementCollection get_ChainElements()" />
            <Method Sig="instance bool Build(class X509Certificate2 )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Reset()" />
          </Type>
          <Type Name="X509ChainElement">
            <Method Sig="instance class X509Certificate2 get_Certificate()" />
            <Method Sig="instance [] struct X509ChainStatus get_ChainElementStatus()" />
            <Method Sig="instance string get_Information()" />
          </Type>
          <Type Name="X509ChainElementCollection">
            <Method Sig="instance class X509ChainElement get_Item(int )" />
            <Method Sig="instance int get_Count()" />
            <Method Sig="instance class X509ChainElementEnumerator GetEnumerator()" />
            <Method Sig="instance void CopyTo([] class X509ChainElement , int )" />
            <Method Sig="instance bool get_IsSynchronized()" />
            <Method Sig="instance object get_SyncRoot()" />
          </Type>
          <Type Name="X509ChainElementEnumerator">
            <Method Sig="instance class X509ChainElement get_Current()" />
            <Method Sig="instance bool MoveNext()" />
            <Method Sig="instance void Reset()" />
          </Type>
          <Type Name="X509ChainPolicy">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance class OidCollection get_ApplicationPolicy()" />
            <Method Sig="instance class OidCollection get_CertificatePolicy()" />
            <Method Sig="instance struct X509RevocationMode get_RevocationMode()" />
            <Method Sig="instance void set_RevocationMode(struct X509RevocationMode )" />
            <Method Sig="instance struct X509RevocationFlag get_RevocationFlag()" />
            <Method Sig="instance void set_RevocationFlag(struct X509RevocationFlag )" />
            <Method Sig="instance struct X509VerificationFlags get_VerificationFlags()" />
            <Method Sig="instance void set_VerificationFlags(struct X509VerificationFlags )" />
            <Method Sig="instance struct DateTime get_VerificationTime()" />
            <Method Sig="instance void set_VerificationTime(struct DateTime )" />
            <Method Sig="instance struct TimeSpan get_UrlRetrievalTimeout()" />
            <Method Sig="instance void set_UrlRetrievalTimeout(struct TimeSpan )" />
            <Method Sig="instance class X509Certificate2Collection get_ExtraStore()" />
            <Method Sig="instance void Reset()" />
          </Type>
          <Type Name="X509Extension">
            <Method Sig="instance void .ctor(string , [] byte , bool )" />
            <Method Sig="instance void .ctor(class AsnEncodedData , bool )" />
            <Method Sig="instance void .ctor(class Oid , [] byte , bool )" />
            <Method Sig="instance bool get_Critical()" />
            <Method Sig="instance void set_Critical(bool )" />
            <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          </Type>
          <Type Name="X509KeyUsageExtension">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(struct X509KeyUsageFlags , bool )" />
            <Method Sig="instance void .ctor(class AsnEncodedData , bool )" />
            <Method Sig="instance struct X509KeyUsageFlags get_KeyUsages()" />
            <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          </Type>
          <Type Name="X509BasicConstraintsExtension">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(bool , bool , int , bool )" />
            <Method Sig="instance void .ctor(class AsnEncodedData , bool )" />
            <Method Sig="instance bool get_CertificateAuthority()" />
            <Method Sig="instance bool get_HasPathLengthConstraint()" />
            <Method Sig="instance int get_PathLengthConstraint()" />
            <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          </Type>
          <Type Name="X509EnhancedKeyUsageExtension">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(class OidCollection , bool )" />
            <Method Sig="instance void .ctor(class AsnEncodedData , bool )" />
            <Method Sig="instance class OidCollection get_EnhancedKeyUsages()" />
            <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          </Type>
          <Type Name="X509SubjectKeyIdentifierExtension">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(string , bool )" />
            <Method Sig="instance void .ctor([] byte , bool )" />
            <Method Sig="instance void .ctor(class AsnEncodedData , bool )" />
            <Method Sig="instance void .ctor(class PublicKey , bool )" />
            <Method Sig="instance void .ctor(class PublicKey , struct X509SubjectKeyIdentifierHashAlgorithm , bool )" />
            <Method Sig="instance string get_SubjectKeyIdentifier()" />
            <Method Sig="instance void CopyFrom(class AsnEncodedData )" />
          </Type>
          <Type Name="X509ExtensionCollection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance class X509Extension get_Item(int )" />
            <Method Sig="instance class X509Extension get_Item(string )" />
            <Method Sig="instance int get_Count()" />
            <Method Sig="instance int Add(class X509Extension )" />
            <Method Sig="instance class X509ExtensionEnumerator GetEnumerator()" />
            <Method Sig="instance void CopyTo([] class X509Extension , int )" />
            <Method Sig="instance bool get_IsSynchronized()" />
            <Method Sig="instance object get_SyncRoot()" />
          </Type>
          <Type Name="X509ExtensionEnumerator">
            <Method Sig="instance class X509Extension get_Current()" />
            <Method Sig="instance bool MoveNext()" />
            <Method Sig="instance void Reset()" />
          </Type>
          <Type Name="X509Store">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(string )" />
            <Method Sig="instance void .ctor(struct StoreName )" />
            <Method Sig="instance void .ctor(struct StoreLocation )" />
            <Method Sig="instance void .ctor(struct StoreName , struct StoreLocation )" />
            <Method Sig="instance void .ctor(string , struct StoreLocation )" />
            <Method Sig="instance void .ctor(intptr )">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance intptr get_StoreHandle()">
              <LinkDemand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="UnmanagedCode" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </LinkDemand>
            </Method>
            <Method Sig="instance struct StoreLocation get_Location()" />
            <Method Sig="instance string get_Name()" />
            <Method Sig="instance void Open(struct OpenFlags )">
              <Demand>
                <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
              </Demand>
            </Method>
            <Method Sig="instance void Close()" />
            <Method Sig="instance void Add(class X509Certificate2 )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="AddToStore" class="System.Security.Permissions.StorePermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void AddRange(class X509Certificate2Collection )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="AddToStore" class="System.Security.Permissions.StorePermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Remove(class X509Certificate2 )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="RemoveFromStore" class="System.Security.Permissions.StorePermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void RemoveRange(class X509Certificate2Collection )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="RemoveFromStore" class="System.Security.Permissions.StorePermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance class X509Certificate2Collection get_Certificates()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" Flags="EnumerateCertificates" class="System.Security.Permissions.StorePermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                </PermissionSet>
              </Demand>
            </Method>
          </Type>
        </Namespace>
      </Namespace>
      <Namespace Name="Authentication">
        <Type Name="AuthenticationException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="InvalidCredentialException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Collections">
      <Namespace Name="Generic">
        <Type Name="LinkedList`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance get_First()" />
          <Method Sig="instance get_Last()" />
          <Method Sig="instance AddAfter(class LinkedListNode`1 , void )" />
          <Method Sig="instance void AddAfter(, class LinkedListNode`1 )" />
          <Method Sig="instance AddBefore(class LinkedListNode`1 , void )" />
          <Method Sig="instance void AddBefore(, class LinkedListNode`1 )" />
          <Method Sig="instance AddFirst(class LinkedListNode`1 )" />
          <Method Sig="instance void AddFirst()" />
          <Method Sig="instance AddLast(class LinkedListNode`1 )" />
          <Method Sig="instance void AddLast()" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance Find(class LinkedListNode`1 )" />
          <Method Sig="instance FindLast(class LinkedListNode`1 )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance void Remove()" />
          <Method Sig="instance void RemoveFirst()" />
          <Method Sig="instance void RemoveLast()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void OnDeserialization(object )" />
        </Type>
        <Type Name="LinkedListNode`1">
          <Method Sig="instance void .ctor(!0)" />
          <Method Sig="instance get_List()" />
          <Method Sig="instance get_Next()" />
          <Method Sig="instance get_Previous()" />
          <Method Sig="instance !0 get_Value()" />
          <Method Sig="instance void set_Value(!0)" />
        </Type>
        <Type Name="Queue`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance void Enqueue(!0)" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance !0 Dequeue()" />
          <Method Sig="instance !0 Peek()" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance [] !0 ToArray()" />
          <Method Sig="instance void TrimExcess()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SortedList`2">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int , )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(, class IDictionary`2 )" />
          <Method Sig="instance void Add(!0, !1)" />
          <Method Sig="instance int get_Capacity()" />
          <Method Sig="instance void set_Capacity(int )" />
          <Method Sig="instance get_Comparer()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance get_Keys()" />
          <Method Sig="instance get_Values()" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool ContainsKey(!0)" />
          <Method Sig="instance bool ContainsValue(!1)" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance !1 get_Item(!0)" />
          <Method Sig="instance void set_Item(!0, !1)" />
          <Method Sig="instance int IndexOfKey(!0)" />
          <Method Sig="instance int IndexOfValue(!1)" />
          <Method Sig="instance bool TryGetValue(!0, &amp; !1)" />
          <Method Sig="instance void RemoveAt(int )" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance void TrimExcess()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="Stack`1">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(!0)" />
          <Method Sig="instance void CopyTo([] !0, int )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance void TrimExcess()" />
          <Method Sig="instance !0 Peek()" />
          <Method Sig="instance !0 Pop()" />
          <Method Sig="instance void Push(!0)" />
          <Method Sig="instance [] !0 ToArray()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SortedDictionary`2">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(, class IDictionary`2 )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance !1 get_Item(!0)" />
          <Method Sig="instance void set_Item(!0, !1)" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance get_Comparer()" />
          <Method Sig="instance get_Keys()" />
          <Method Sig="instance get_Values()" />
          <Method Sig="instance void Add(!0, !1)" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool ContainsKey(!0)" />
          <Method Sig="instance bool ContainsValue(!1)" />
          <Method Sig="instance void CopyTo([] , struct KeyValuePair`2 )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance bool Remove(!0)" />
          <Method Sig="instance bool TryGetValue(!0, &amp; !1)" />
        </Type>
      </Namespace>
      <Namespace Name="Specialized">
        <Type Name="BitVector32">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(struct BitVector32 )" />
          <Method Sig="instance bool get_Item(int )" />
          <Method Sig="instance void set_Item(int , bool )" />
          <Method Sig="instance int get_Item(struct Section )" />
          <Method Sig="instance void set_Item(struct Section , int )" />
          <Method Sig="instance int get_Data()" />
          <Method Sig="int CreateMask()" />
          <Method Sig="int CreateMask(int )" />
          <Method Sig="struct Section CreateSection(short )" />
          <Method Sig="struct Section CreateSection(short , struct Section )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="string ToString(struct BitVector32 )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="CollectionsUtil">
          <Method Sig="class Hashtable CreateCaseInsensitiveHashtable()" />
          <Method Sig="class Hashtable CreateCaseInsensitiveHashtable(int )" />
          <Method Sig="class Hashtable CreateCaseInsensitiveHashtable(class IDictionary )" />
          <Method Sig="class SortedList CreateCaseInsensitiveSortedList()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="HybridDictionary">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance void .ctor(int , bool )" />
          <Method Sig="instance object get_Item(object )" />
          <Method Sig="instance void set_Item(object , object )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class ICollection get_Keys()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance bool get_IsFixedSize()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance class ICollection get_Values()" />
          <Method Sig="instance void Add(object , object )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(object )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
          <Method Sig="instance void Remove(object )" />
        </Type>
        <Type Name="ListDictionary">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class IComparer )" />
          <Method Sig="instance object get_Item(object )" />
          <Method Sig="instance void set_Item(object , object )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class ICollection get_Keys()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance bool get_IsFixedSize()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance class ICollection get_Values()" />
          <Method Sig="instance void Add(object , object )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(object )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
          <Method Sig="instance void Remove(object )" />
        </Type>
        <Type Name="NameObjectCollectionBase">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance void OnDeserialization(object )" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class KeysCollection get_Keys()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="NameValueCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class NameValueCollection )" />
          <Method Sig="instance void .ctor(class IHashCodeProvider , class IComparer )" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(class IEqualityComparer )" />
          <Method Sig="instance void .ctor(int , class IEqualityComparer )" />
          <Method Sig="instance void .ctor(int , class NameValueCollection )" />
          <Method Sig="instance void .ctor(int , class IHashCodeProvider , class IComparer )" />
          <Method Sig="instance void Add(class NameValueCollection )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance bool HasKeys()" />
          <Method Sig="instance void Add(string , string )" />
          <Method Sig="instance string Get(string )" />
          <Method Sig="instance [] string GetValues(string )" />
          <Method Sig="instance void Set(string , string )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance string get_Item(string )" />
          <Method Sig="instance void set_Item(string , string )" />
          <Method Sig="instance string Get(int )" />
          <Method Sig="instance [] string GetValues(int )" />
          <Method Sig="instance string GetKey(int )" />
          <Method Sig="instance string get_Item(int )" />
          <Method Sig="instance [] string get_AllKeys()" />
        </Type>
        <Type Name="OrderedDictionary">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor(class IEqualityComparer )" />
          <Method Sig="instance void .ctor(int , class IEqualityComparer )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance class ICollection get_Keys()" />
          <Method Sig="instance object get_Item(int )" />
          <Method Sig="instance void set_Item(int , object )" />
          <Method Sig="instance object get_Item(object )" />
          <Method Sig="instance void set_Item(object , object )" />
          <Method Sig="instance class ICollection get_Values()" />
          <Method Sig="instance void Add(object , object )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance class OrderedDictionary AsReadOnly()" />
          <Method Sig="instance bool Contains(object )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance void Insert(int , object , object )" />
          <Method Sig="instance void RemoveAt(int )" />
          <Method Sig="instance void Remove(object )" />
          <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="StringCollection">
          <Method Sig="instance string get_Item(int )" />
          <Method Sig="instance void set_Item(int , string )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int Add(string )" />
          <Method Sig="instance void AddRange([] string )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool Contains(string )" />
          <Method Sig="instance void CopyTo([] string , int )" />
          <Method Sig="instance class StringEnumerator GetEnumerator()" />
          <Method Sig="instance int IndexOf(string )" />
          <Method Sig="instance void Insert(int , string )" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance void RemoveAt(int )" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="StringEnumerator">
          <Method Sig="instance string get_Current()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance void Reset()" />
        </Type>
        <Type Name="StringDictionary">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsSynchronized()" />
          <Method Sig="instance string get_Item(string )" />
          <Method Sig="instance void set_Item(string , string )" />
          <Method Sig="instance class ICollection get_Keys()" />
          <Method Sig="instance object get_SyncRoot()" />
          <Method Sig="instance class ICollection get_Values()" />
          <Method Sig="instance void Add(string , string )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool ContainsKey(string )" />
          <Method Sig="instance bool ContainsValue(string )" />
          <Method Sig="instance void CopyTo(class Array , int )" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
          <Method Sig="instance void Remove(string )" />
        </Type>
      </Namespace>
    </Namespace>
    <Type Name="UriParser">
      <Method Sig="void Register(class UriParser , string , int )" />
      <Method Sig="bool IsKnownScheme(string )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="Uri">
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(string , bool )" />
      <Method Sig="instance void .ctor(string , struct UriKind )" />
      <Method Sig="instance void .ctor(class Uri , string )" />
      <Method Sig="instance void .ctor(class Uri , string , bool )" />
      <Method Sig="instance void .ctor(class Uri , class Uri )" />
      <Method Sig="instance string get_AbsolutePath()" />
      <Method Sig="instance string get_AbsoluteUri()" />
      <Method Sig="instance string get_Authority()" />
      <Method Sig="instance string get_Host()" />
      <Method Sig="instance struct UriHostNameType get_HostNameType()" />
      <Method Sig="instance bool get_IsDefaultPort()" />
      <Method Sig="instance bool get_IsFile()" />
      <Method Sig="instance bool get_IsLoopback()" />
      <Method Sig="instance bool get_IsUnc()" />
      <Method Sig="instance string get_LocalPath()" />
      <Method Sig="instance string get_PathAndQuery()" />
      <Method Sig="instance int get_Port()" />
      <Method Sig="instance string get_Query()" />
      <Method Sig="instance string get_Fragment()" />
      <Method Sig="instance string get_Scheme()" />
      <Method Sig="instance string get_OriginalString()" />
      <Method Sig="instance string get_DnsSafeHost()" />
      <Method Sig="instance bool get_IsAbsoluteUri()" />
      <Method Sig="instance [] string get_Segments()" />
      <Method Sig="instance bool get_UserEscaped()" />
      <Method Sig="instance string get_UserInfo()" />
      <Method Sig="struct UriHostNameType CheckHostName(string )" />
      <Method Sig="bool CheckSchemeName(string )" />
      <Method Sig="int FromHex(char )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
      <Method Sig="bool op_Equality(class Uri , class Uri )" />
      <Method Sig="bool op_Inequality(class Uri , class Uri )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance string GetLeftPart(struct UriPartial )" />
      <Method Sig="string HexEscape(char )" />
      <Method Sig="char HexUnescape(string , &amp; int )" />
      <Method Sig="bool IsHexDigit(char )" />
      <Method Sig="bool IsHexEncoding(string , int )" />
      <Method Sig="instance string MakeRelative(class Uri )" />
      <Method Sig="instance class Uri MakeRelativeUri(class Uri )" />
      <Method Sig="bool TryCreate(string , struct UriKind , &amp; class Uri )" />
      <Method Sig="bool TryCreate(class Uri , string , &amp; class Uri )" />
      <Method Sig="bool TryCreate(class Uri , class Uri , &amp; class Uri )" />
      <Method Sig="instance bool IsBaseOf(class Uri )" />
      <Method Sig="instance string GetComponents(struct UriComponents , struct UriFormat )" />
      <Method Sig="instance bool IsWellFormedOriginalString()" />
      <Method Sig="bool IsWellFormedUriString(string , struct UriKind )" />
      <Method Sig="int Compare(class Uri , class Uri , struct UriComponents , struct UriFormat , struct StringComparison )" />
      <Method Sig="string UnescapeDataString(string )" />
      <Method Sig="string EscapeUriString(string )" />
      <Method Sig="string EscapeDataString(string )" />
      <Method Sig="void .cctor()" />
    </Type>
    <Type Name="UriBuilder">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
      <Method Sig="instance void .ctor(class Uri )" />
      <Method Sig="instance void .ctor(string , string )" />
      <Method Sig="instance void .ctor(string , string , int )" />
      <Method Sig="instance void .ctor(string , string , int , string )" />
      <Method Sig="instance void .ctor(string , string , int , string , string )" />
      <Method Sig="instance string get_Fragment()" />
      <Method Sig="instance void set_Fragment(string )" />
      <Method Sig="instance string get_Host()" />
      <Method Sig="instance void set_Host(string )" />
      <Method Sig="instance string get_Password()" />
      <Method Sig="instance void set_Password(string )" />
      <Method Sig="instance string get_Path()" />
      <Method Sig="instance void set_Path(string )" />
      <Method Sig="instance int get_Port()" />
      <Method Sig="instance void set_Port(int )" />
      <Method Sig="instance string get_Query()" />
      <Method Sig="instance void set_Query(string )" />
      <Method Sig="instance string get_Scheme()" />
      <Method Sig="instance void set_Scheme(string )" />
      <Method Sig="instance class Uri get_Uri()" />
      <Method Sig="instance string get_UserName()" />
      <Method Sig="instance void set_UserName(string )" />
      <Method Sig="instance bool Equals(object )" />
      <Method Sig="instance int GetHashCode()" />
      <Method Sig="instance string ToString()" />
    </Type>
    <Type Name="UriFormatException">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance void .ctor(string )" />
    </Type>
    <Type Name="UriTypeConverter">
      <Method Sig="instance void .ctor()" />
      <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
      <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
      <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
      <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
      <Method Sig="instance bool IsValid(class ITypeDescriptorContext , object )" />
    </Type>
    <Type Name="GenericUriParser">
      <Method Sig="instance void .ctor(struct GenericUriParserOptions )" />
    </Type>
    <Type Name="HttpStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="FtpStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="FileStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="NewsStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="GopherStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="LdapStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="NetPipeStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Type Name="NetTcpStyleUriParser">
      <Method Sig="instance void .ctor()" />
    </Type>
    <Namespace Name="Net">
      <Type Name="AuthenticationManager">
        <Method Sig="class ICredentialPolicy get_CredentialPolicy()" />
        <Method Sig="void set_CredentialPolicy(class ICredentialPolicy )" />
        <Method Sig="class StringDictionary get_CustomTargetNameDictionary()" />
        <Method Sig="class Authorization Authenticate(string , class WebRequest , class ICredentials )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Authorization PreAuthenticate(class WebRequest , class ICredentials )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Register(class IAuthenticationModule )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Unregister(class IAuthenticationModule )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void Unregister(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IEnumerator get_RegisteredModules()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="AuthenticationSchemeSelector">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance struct AuthenticationSchemes Invoke(class HttpListenerRequest )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class HttpListenerRequest , class AsyncCallback , object )" />
        <Method Sig="instance struct AuthenticationSchemes EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="Authorization">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , bool )" />
        <Method Sig="instance void .ctor(string , bool , string )" />
        <Method Sig="instance string get_Message()" />
        <Method Sig="instance string get_ConnectionGroupId()" />
        <Method Sig="instance bool get_Complete()" />
        <Method Sig="instance [] string get_ProtectionRealm()" />
        <Method Sig="instance void set_ProtectionRealm([] string )" />
        <Method Sig="instance bool get_MutuallyAuthenticated()" />
        <Method Sig="instance void set_MutuallyAuthenticated(bool )" />
      </Type>
      <Type Name="Cookie">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance void .ctor(string , string , string )" />
        <Method Sig="instance void .ctor(string , string , string , string )" />
        <Method Sig="instance string get_Comment()" />
        <Method Sig="instance void set_Comment(string )" />
        <Method Sig="instance class Uri get_CommentUri()" />
        <Method Sig="instance void set_CommentUri(class Uri )" />
        <Method Sig="instance bool get_HttpOnly()" />
        <Method Sig="instance void set_HttpOnly(bool )" />
        <Method Sig="instance bool get_Discard()" />
        <Method Sig="instance void set_Discard(bool )" />
        <Method Sig="instance string get_Domain()" />
        <Method Sig="instance void set_Domain(string )" />
        <Method Sig="instance bool get_Expired()" />
        <Method Sig="instance void set_Expired(bool )" />
        <Method Sig="instance struct DateTime get_Expires()" />
        <Method Sig="instance void set_Expires(struct DateTime )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance string get_Path()" />
        <Method Sig="instance void set_Path(string )" />
        <Method Sig="instance string get_Port()" />
        <Method Sig="instance void set_Port(string )" />
        <Method Sig="instance bool get_Secure()" />
        <Method Sig="instance void set_Secure(bool )" />
        <Method Sig="instance struct DateTime get_TimeStamp()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance int get_Version()" />
        <Method Sig="instance void set_Version(int )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="CookieCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance class Cookie get_Item(int )" />
        <Method Sig="instance class Cookie get_Item(string )" />
        <Method Sig="instance void Add(class Cookie )" />
        <Method Sig="instance void Add(class CookieCollection )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance void CopyTo([] class Cookie , int )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="CookieContainer">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , int , int )" />
        <Method Sig="instance int get_Capacity()" />
        <Method Sig="instance void set_Capacity(int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance int get_MaxCookieSize()" />
        <Method Sig="instance void set_MaxCookieSize(int )" />
        <Method Sig="instance int get_PerDomainCapacity()" />
        <Method Sig="instance void set_PerDomainCapacity(int )" />
        <Method Sig="instance void Add(class Cookie )" />
        <Method Sig="instance void Add(class CookieCollection )" />
        <Method Sig="instance void Add(class Uri , class Cookie )" />
        <Method Sig="instance void Add(class Uri , class CookieCollection )" />
        <Method Sig="instance class CookieCollection GetCookies(class Uri )" />
        <Method Sig="instance string GetCookieHeader(class Uri )" />
        <Method Sig="instance void SetCookies(class Uri , string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="CookieException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="CredentialCache">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void Add(class Uri , string , class NetworkCredential )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Add(string , int , string , class NetworkCredential )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Remove(class Uri , string )" />
        <Method Sig="instance void Remove(string , int , string )" />
        <Method Sig="instance class NetworkCredential GetCredential(class Uri , string )" />
        <Method Sig="instance class NetworkCredential GetCredential(string , int , string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="class ICredentials get_DefaultCredentials()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class NetworkCredential get_DefaultNetworkCredentials()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="NetworkCredential">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_UserName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_UserName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Password()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Password(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Domain()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Domain(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class NetworkCredential GetCredential(class Uri , string )" />
        <Method Sig="instance class NetworkCredential GetCredential(string , int , string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Dns">
        <Method Sig="class IPHostEntry GetHostByName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry GetHostByAddress(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry GetHostByAddress(class IPAddress )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string GetHostName()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry Resolve(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IAsyncResult BeginGetHostByName(string , class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry EndGetHostByName(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry GetHostEntry(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry GetHostEntry(class IPAddress )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="[] class IPAddress GetHostAddresses(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IAsyncResult BeginGetHostEntry(string , class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IAsyncResult BeginGetHostEntry(class IPAddress , class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry EndGetHostEntry(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IAsyncResult BeginGetHostAddresses(string , class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="[] class IPAddress EndGetHostAddresses(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IAsyncResult BeginResolve(string , class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPHostEntry EndResolve(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="DnsPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="DnsPermission">
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance bool IsUnrestricted()" />
        <Method Sig="instance class IPermission Copy()" />
        <Method Sig="instance class IPermission Union(class IPermission )" />
        <Method Sig="instance class IPermission Intersect(class IPermission )" />
        <Method Sig="instance bool IsSubsetOf(class IPermission )" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance class SecurityElement ToXml()" />
      </Type>
      <Type Name="EndPoint">
        <Method Sig="instance struct AddressFamily get_AddressFamily()" />
        <Method Sig="instance class SocketAddress Serialize()" />
        <Method Sig="instance class EndPoint Create(class SocketAddress )" />
      </Type>
      <Type Name="WebRequest">
        <Method Sig="class WebRequest Create(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class WebRequest Create(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class WebRequest CreateDefault(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool RegisterPrefix(string , class IWebRequestCreate )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class RequestCachePolicy get_DefaultCachePolicy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DefaultCachePolicy(class RequestCachePolicy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class RequestCachePolicy get_CachePolicy()" />
        <Method Sig="instance void set_CachePolicy(class RequestCachePolicy )" />
        <Method Sig="instance string get_Method()" />
        <Method Sig="instance void set_Method(string )" />
        <Method Sig="instance class Uri get_RequestUri()" />
        <Method Sig="instance string get_ConnectionGroupName()" />
        <Method Sig="instance void set_ConnectionGroupName(string )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance void set_Headers(class WebHeaderCollection )" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance void set_ContentLength(in64 )" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )" />
        <Method Sig="instance class IWebProxy get_Proxy()" />
        <Method Sig="instance void set_Proxy(class IWebProxy )" />
        <Method Sig="instance bool get_PreAuthenticate()" />
        <Method Sig="instance void set_PreAuthenticate(bool )" />
        <Method Sig="instance int get_Timeout()" />
        <Method Sig="instance void set_Timeout(int )" />
        <Method Sig="instance class Stream GetRequestStream()" />
        <Method Sig="instance class WebResponse GetResponse()" />
        <Method Sig="instance class IAsyncResult BeginGetResponse(class AsyncCallback , object )" />
        <Method Sig="instance class WebResponse EndGetResponse(class IAsyncResult )" />
        <Method Sig="instance class IAsyncResult BeginGetRequestStream(class AsyncCallback , object )" />
        <Method Sig="instance class Stream EndGetRequestStream(class IAsyncResult )" />
        <Method Sig="instance void Abort()" />
        <Method Sig="instance struct AuthenticationLevel get_AuthenticationLevel()" />
        <Method Sig="instance void set_AuthenticationLevel(struct AuthenticationLevel )" />
        <Method Sig="instance struct TokenImpersonationLevel get_ImpersonationLevel()" />
        <Method Sig="instance void set_ImpersonationLevel(struct TokenImpersonationLevel )" />
        <Method Sig="class IWebProxy get_DefaultWebProxy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DefaultWebProxy(class IWebProxy )" />
        <Method Sig="class IWebProxy GetSystemWebProxy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="FileWebRequest">
        <Method Sig="instance string get_ConnectionGroupName()" />
        <Method Sig="instance void set_ConnectionGroupName(string )" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance void set_ContentLength(in64 )" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance string get_Method()" />
        <Method Sig="instance void set_Method(string )" />
        <Method Sig="instance bool get_PreAuthenticate()" />
        <Method Sig="instance void set_PreAuthenticate(bool )" />
        <Method Sig="instance class IWebProxy get_Proxy()" />
        <Method Sig="instance void set_Proxy(class IWebProxy )" />
        <Method Sig="instance int get_Timeout()" />
        <Method Sig="instance void set_Timeout(int )" />
        <Method Sig="instance class Uri get_RequestUri()" />
        <Method Sig="instance class IAsyncResult BeginGetRequestStream(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetResponse(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream EndGetRequestStream(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse EndGetResponse(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream GetRequestStream()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse GetResponse()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )" />
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="WebResponse">
        <Method Sig="instance void Close()" />
        <Method Sig="instance bool get_IsFromCache()" />
        <Method Sig="instance bool get_IsMutuallyAuthenticated()" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance void set_ContentLength(in64 )" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance class Stream GetResponseStream()" />
        <Method Sig="instance class Uri get_ResponseUri()" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
      </Type>
      <Type Name="FileWebResponse">
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance class Uri get_ResponseUri()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance class Stream GetResponseStream()" />
      </Type>
      <Type Name="FtpWebRequest">
        <Method Sig="class RequestCachePolicy get_DefaultCachePolicy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DefaultCachePolicy(class RequestCachePolicy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Method()" />
        <Method Sig="instance void set_Method(string )" />
        <Method Sig="instance string get_RenameTo()" />
        <Method Sig="instance void set_RenameTo(string )" />
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance class Uri get_RequestUri()" />
        <Method Sig="instance int get_Timeout()" />
        <Method Sig="instance void set_Timeout(int )" />
        <Method Sig="instance int get_ReadWriteTimeout()" />
        <Method Sig="instance void set_ReadWriteTimeout(int )" />
        <Method Sig="instance in64 get_ContentOffset()" />
        <Method Sig="instance void set_ContentOffset(in64 )" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance void set_ContentLength(in64 )" />
        <Method Sig="instance class IWebProxy get_Proxy()" />
        <Method Sig="instance void set_Proxy(class IWebProxy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_ConnectionGroupName()" />
        <Method Sig="instance void set_ConnectionGroupName(string )" />
        <Method Sig="instance class ServicePoint get_ServicePoint()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse GetResponse()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetResponse(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse EndGetResponse(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance class Stream GetRequestStream()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetRequestStream(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance class Stream EndGetRequestStream(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance bool get_KeepAlive()" />
        <Method Sig="instance void set_KeepAlive(bool )" />
        <Method Sig="instance bool get_UseBinary()" />
        <Method Sig="instance void set_UseBinary(bool )" />
        <Method Sig="instance bool get_UsePassive()" />
        <Method Sig="instance void set_UsePassive(bool )" />
        <Method Sig="instance class X509CertificateCollection get_ClientCertificates()" />
        <Method Sig="instance void set_ClientCertificates(class X509CertificateCollection )" />
        <Method Sig="instance bool get_EnableSsl()" />
        <Method Sig="instance void set_EnableSsl(bool )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance void set_Headers(class WebHeaderCollection )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )" />
        <Method Sig="instance bool get_PreAuthenticate()" />
        <Method Sig="instance void set_PreAuthenticate(bool )" />
        <Method Sig="void .cctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="FtpWebResponse">
        <Method Sig="instance class Stream GetResponseStream()" />
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance class Uri get_ResponseUri()" />
        <Method Sig="instance struct FtpStatusCode get_StatusCode()" />
        <Method Sig="instance string get_StatusDescription()" />
        <Method Sig="instance struct DateTime get_LastModified()" />
        <Method Sig="instance string get_BannerMessage()" />
        <Method Sig="instance string get_WelcomeMessage()" />
        <Method Sig="instance string get_ExitMessage()" />
      </Type>
      <Type Name="GlobalProxySelection">
        <Method Sig="class IWebProxy get_Select()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_Select(class IWebProxy )" />
        <Method Sig="class IWebProxy GetEmptyWebProxy()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="HttpListenerBasicIdentity">
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_Password()" />
      </Type>
      <Type Name="HttpListener">
        <Method Sig="instance void .ctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class AuthenticationSchemeSelector get_AuthenticationSchemeSelectorDelegate()" />
        <Method Sig="instance void set_AuthenticationSchemeSelectorDelegate(class AuthenticationSchemeSelector )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct AuthenticationSchemes get_AuthenticationSchemes()" />
        <Method Sig="instance void set_AuthenticationSchemes(struct AuthenticationSchemes )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Realm()" />
        <Method Sig="instance void set_Realm(string )" />
        <Method Sig="bool get_IsSupported()" />
        <Method Sig="instance bool get_IsListening()" />
        <Method Sig="instance bool get_IgnoreWriteExceptions()" />
        <Method Sig="instance void set_IgnoreWriteExceptions(bool )" />
        <Method Sig="instance bool get_UnsafeConnectionNtlmAuthentication()" />
        <Method Sig="instance void set_UnsafeConnectionNtlmAuthentication(bool )" />
        <Method Sig="instance class HttpListenerPrefixCollection get_Prefixes()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Start()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Stop()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class HttpListenerContext GetContext()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetContext(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class HttpListenerContext EndGetContext(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="HttpListenerContext">
        <Method Sig="instance class HttpListenerRequest get_Request()" />
        <Method Sig="instance class HttpListenerResponse get_Response()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IPrincipal get_User()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="HttpListenerException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance void .ctor(int , string )" />
        <Method Sig="instance int get_ErrorCode()" />
      </Type>
      <Type Name="HttpListenerPrefixCollection">
        <Method Sig="instance void CopyTo(class Array , int )" />
        <Method Sig="instance void CopyTo([] string , int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance void Add(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool Contains(string )" />
        <Method Sig="instance GetEnumerator()" />
        <Method Sig="instance bool Remove(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Clear()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="HttpListenerRequest">
        <Method Sig="instance struct Guid get_RequestTraceIdentifier()" />
        <Method Sig="instance [] string get_AcceptTypes()" />
        <Method Sig="instance class Encoding get_ContentEncoding()" />
        <Method Sig="instance in64 get_ContentLength64()" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance class NameValueCollection get_Headers()" />
        <Method Sig="instance string get_HttpMethod()" />
        <Method Sig="instance class Stream get_InputStream()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_IsAuthenticated()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_IsLocal()" />
        <Method Sig="instance bool get_IsSecureConnection()" />
        <Method Sig="instance class NameValueCollection get_QueryString()" />
        <Method Sig="instance string get_RawUrl()" />
        <Method Sig="instance class Uri get_Url()" />
        <Method Sig="instance class Uri get_UrlReferrer()" />
        <Method Sig="instance string get_UserAgent()" />
        <Method Sig="instance string get_UserHostAddress()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_UserHostName()" />
        <Method Sig="instance [] string get_UserLanguages()" />
        <Method Sig="instance int get_ClientCertificateError()" />
        <Method Sig="instance class X509Certificate2 GetClientCertificate()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetClientCertificate(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class X509Certificate2 EndGetClientCertificate(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class CookieCollection get_Cookies()" />
        <Method Sig="instance class Version get_ProtocolVersion()" />
        <Method Sig="instance bool get_HasEntityBody()" />
        <Method Sig="instance bool get_KeepAlive()" />
        <Method Sig="instance class IPEndPoint get_RemoteEndPoint()" />
        <Method Sig="instance class IPEndPoint get_LocalEndPoint()" />
      </Type>
      <Type Name="HttpListenerResponse">
        <Method Sig="instance class Encoding get_ContentEncoding()" />
        <Method Sig="instance void set_ContentEncoding(class Encoding )" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance class Stream get_OutputStream()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_RedirectLocation()" />
        <Method Sig="instance void set_RedirectLocation(string )" />
        <Method Sig="instance int get_StatusCode()" />
        <Method Sig="instance void set_StatusCode(int )" />
        <Method Sig="instance string get_StatusDescription()" />
        <Method Sig="instance void set_StatusDescription(string )" />
        <Method Sig="instance class CookieCollection get_Cookies()" />
        <Method Sig="instance void set_Cookies(class CookieCollection )" />
        <Method Sig="instance void CopyFrom(class HttpListenerResponse )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_SendChunked()" />
        <Method Sig="instance void set_SendChunked(bool )" />
        <Method Sig="instance bool get_KeepAlive()" />
        <Method Sig="instance void set_KeepAlive(bool )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance void set_Headers(class WebHeaderCollection )" />
        <Method Sig="instance void AddHeader(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void AppendHeader(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Redirect(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void AppendCookie(class Cookie )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void SetCookie(class Cookie )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 get_ContentLength64()" />
        <Method Sig="instance void set_ContentLength64(in64 )" />
        <Method Sig="instance class Version get_ProtocolVersion()" />
        <Method Sig="instance void set_ProtocolVersion(class Version )" />
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close([] byte , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="HttpVersion">
        <Method Sig="instance void .ctor()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="HttpWebRequest">
        <Method Sig="instance bool get_AllowAutoRedirect()" />
        <Method Sig="instance void set_AllowAutoRedirect(bool )" />
        <Method Sig="instance bool get_AllowWriteStreamBuffering()" />
        <Method Sig="instance void set_AllowWriteStreamBuffering(bool )" />
        <Method Sig="instance bool get_HaveResponse()" />
        <Method Sig="instance bool get_KeepAlive()" />
        <Method Sig="instance void set_KeepAlive(bool )" />
        <Method Sig="instance bool get_Pipelined()" />
        <Method Sig="instance void set_Pipelined(bool )" />
        <Method Sig="instance bool get_PreAuthenticate()" />
        <Method Sig="instance void set_PreAuthenticate(bool )" />
        <Method Sig="instance bool get_UnsafeAuthenticatedConnectionSharing()" />
        <Method Sig="instance void set_UnsafeAuthenticatedConnectionSharing(bool )" />
        <Method Sig="instance bool get_SendChunked()" />
        <Method Sig="instance void set_SendChunked(bool )" />
        <Method Sig="instance struct DecompressionMethods get_AutomaticDecompression()" />
        <Method Sig="instance void set_AutomaticDecompression(struct DecompressionMethods )" />
        <Method Sig="class RequestCachePolicy get_DefaultCachePolicy()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="void set_DefaultCachePolicy(class RequestCachePolicy )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="int get_DefaultMaximumResponseHeadersLength()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="void set_DefaultMaximumResponseHeadersLength(int )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="int get_DefaultMaximumErrorResponseLength()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DefaultMaximumErrorResponseLength(int )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
        <Method Sig="instance int get_MaximumResponseHeadersLength()" />
        <Method Sig="instance void set_MaximumResponseHeadersLength(int )" />
        <Method Sig="instance class X509CertificateCollection get_ClientCertificates()" />
        <Method Sig="instance void set_ClientCertificates(class X509CertificateCollection )" />
        <Method Sig="instance class CookieContainer get_CookieContainer()" />
        <Method Sig="instance void set_CookieContainer(class CookieContainer )" />
        <Method Sig="instance class Uri get_RequestUri()" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance void set_ContentLength(in64 )" />
        <Method Sig="instance int get_Timeout()" />
        <Method Sig="instance void set_Timeout(int )" />
        <Method Sig="instance int get_ReadWriteTimeout()" />
        <Method Sig="instance void set_ReadWriteTimeout(int )" />
        <Method Sig="instance class IAsyncResult BeginGetRequestStream(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream EndGetRequestStream(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream GetRequestStream()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class IAsyncResult BeginGetResponse(class AsyncCallback , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse EndGetResponse(class IAsyncResult )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebResponse GetResponse()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Uri get_Address()" />
        <Method Sig="instance class HttpContinueDelegate get_ContinueDelegate()" />
        <Method Sig="instance void set_ContinueDelegate(class HttpContinueDelegate )" />
        <Method Sig="instance class ServicePoint get_ServicePoint()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_MaximumAutomaticRedirections()" />
        <Method Sig="instance void set_MaximumAutomaticRedirections(int )" />
        <Method Sig="instance string get_Method()" />
        <Method Sig="instance void set_Method(string )" />
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_ConnectionGroupName()" />
        <Method Sig="instance void set_ConnectionGroupName(string )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance void set_Headers(class WebHeaderCollection )" />
        <Method Sig="instance class IWebProxy get_Proxy()" />
        <Method Sig="instance void set_Proxy(class IWebProxy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Version get_ProtocolVersion()" />
        <Method Sig="instance void set_ProtocolVersion(class Version )" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance void set_ContentType(string )" />
        <Method Sig="instance string get_MediaType()" />
        <Method Sig="instance void set_MediaType(string )" />
        <Method Sig="instance string get_TransferEncoding()" />
        <Method Sig="instance void set_TransferEncoding(string )" />
        <Method Sig="instance string get_Connection()" />
        <Method Sig="instance void set_Connection(string )" />
        <Method Sig="instance string get_Accept()" />
        <Method Sig="instance void set_Accept(string )" />
        <Method Sig="instance string get_Referer()" />
        <Method Sig="instance void set_Referer(string )" />
        <Method Sig="instance string get_UserAgent()" />
        <Method Sig="instance void set_UserAgent(string )" />
        <Method Sig="instance string get_Expect()" />
        <Method Sig="instance void set_Expect(string )" />
        <Method Sig="instance struct DateTime get_IfModifiedSince()" />
        <Method Sig="instance void set_IfModifiedSince(struct DateTime )" />
        <Method Sig="instance void Abort()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void AddRange(int , int )" />
        <Method Sig="instance void AddRange(int )" />
        <Method Sig="instance void AddRange(string , int , int )" />
        <Method Sig="instance void AddRange(string , int )" />
        <Method Sig="void .cctor()">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
        </Method>
      </Type>
      <Type Name="HttpWebResponse">
        <Method Sig="instance bool get_IsMutuallyAuthenticated()" />
        <Method Sig="instance class CookieCollection get_Cookies()" />
        <Method Sig="instance void set_Cookies(class CookieCollection )" />
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance in64 get_ContentLength()" />
        <Method Sig="instance string get_ContentEncoding()" />
        <Method Sig="instance string get_ContentType()" />
        <Method Sig="instance string get_CharacterSet()" />
        <Method Sig="instance string get_Server()" />
        <Method Sig="instance struct DateTime get_LastModified()" />
        <Method Sig="instance struct HttpStatusCode get_StatusCode()" />
        <Method Sig="instance string get_StatusDescription()" />
        <Method Sig="instance class Version get_ProtocolVersion()" />
        <Method Sig="instance class Stream GetResponseStream()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Close()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string GetResponseHeader(string )" />
        <Method Sig="instance class Uri get_ResponseUri()" />
        <Method Sig="instance string get_Method()" />
      </Type>
      <Type Name="HttpContinueDelegate">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(int , class WebHeaderCollection )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(int , class WebHeaderCollection , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="IPAddress">
        <Method Sig="instance void .ctor(in64 )" />
        <Method Sig="instance void .ctor([] byte , in64 )" />
        <Method Sig="instance void .ctor([] byte )" />
        <Method Sig="bool TryParse(string , &amp; class IPAddress )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class IPAddress Parse(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance in64 get_Address()" />
        <Method Sig="instance void set_Address(in64 )" />
        <Method Sig="instance [] byte GetAddressBytes()" />
        <Method Sig="instance struct AddressFamily get_AddressFamily()" />
        <Method Sig="instance in64 get_ScopeId()" />
        <Method Sig="instance void set_ScopeId(in64 )" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="in64 HostToNetworkOrder(in64 )" />
        <Method Sig="int HostToNetworkOrder(int )" />
        <Method Sig="short HostToNetworkOrder(short )" />
        <Method Sig="in64 NetworkToHostOrder(in64 )" />
        <Method Sig="int NetworkToHostOrder(int )" />
        <Method Sig="short NetworkToHostOrder(short )" />
        <Method Sig="bool IsLoopback(class IPAddress )" />
        <Method Sig="instance bool get_IsIPv6Multicast()" />
        <Method Sig="instance bool get_IsIPv6LinkLocal()" />
        <Method Sig="instance bool get_IsIPv6SiteLocal()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="IPEndPoint">
        <Method Sig="instance struct AddressFamily get_AddressFamily()" />
        <Method Sig="instance void .ctor(in64 , int )" />
        <Method Sig="instance void .ctor(class IPAddress , int )" />
        <Method Sig="instance class IPAddress get_Address()" />
        <Method Sig="instance void set_Address(class IPAddress )" />
        <Method Sig="instance int get_Port()" />
        <Method Sig="instance void set_Port(int )" />
        <Method Sig="instance string ToString()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class SocketAddress Serialize()" />
        <Method Sig="instance class EndPoint Create(class SocketAddress )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="IPHostEntry">
        <Method Sig="instance string get_HostName()" />
        <Method Sig="instance void set_HostName(string )" />
        <Method Sig="instance [] string get_Aliases()" />
        <Method Sig="instance void set_Aliases([] string )" />
        <Method Sig="instance [] class IPAddress get_AddressList()" />
        <Method Sig="instance void set_AddressList([] class IPAddress )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ProtocolViolationException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="BindIPEndPoint">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance class IPEndPoint Invoke(class ServicePoint , class IPEndPoint , int )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(class ServicePoint , class IPEndPoint , int , class AsyncCallback , object )" />
        <Method Sig="instance class IPEndPoint EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="ServicePoint">
        <Method Sig="instance class BindIPEndPoint get_BindIPEndPointDelegate()" />
        <Method Sig="instance void set_BindIPEndPointDelegate(class BindIPEndPoint )" />
        <Method Sig="instance int get_ConnectionLeaseTimeout()" />
        <Method Sig="instance void set_ConnectionLeaseTimeout(int )" />
        <Method Sig="instance class Uri get_Address()" />
        <Method Sig="instance int get_MaxIdleTime()" />
        <Method Sig="instance void set_MaxIdleTime(int )" />
        <Method Sig="instance bool get_UseNagleAlgorithm()" />
        <Method Sig="instance void set_UseNagleAlgorithm(bool )" />
        <Method Sig="instance int get_ReceiveBufferSize()" />
        <Method Sig="instance void set_ReceiveBufferSize(int )" />
        <Method Sig="instance void set_Expect100Continue(bool )" />
        <Method Sig="instance bool get_Expect100Continue()" />
        <Method Sig="instance struct DateTime get_IdleSince()" />
        <Method Sig="instance class Version get_ProtocolVersion()" />
        <Method Sig="instance string get_ConnectionName()" />
        <Method Sig="instance bool CloseConnectionGroup(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_ConnectionLimit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_ConnectionLimit(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_CurrentConnections()" />
        <Method Sig="instance class X509Certificate get_Certificate()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class X509Certificate get_ClientCertificate()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_SupportsPipelining()" />
        <Method Sig="void .cctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ServicePointManager">
        <Method Sig="struct SecurityProtocolType get_SecurityProtocol()" />
        <Method Sig="void set_SecurityProtocol(struct SecurityProtocolType )" />
        <Method Sig="int get_MaxServicePoints()" />
        <Method Sig="void set_MaxServicePoints(int )" />
        <Method Sig="int get_DefaultConnectionLimit()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DefaultConnectionLimit(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="int get_MaxServicePointIdleTime()" />
        <Method Sig="void set_MaxServicePointIdleTime(int )" />
        <Method Sig="bool get_UseNagleAlgorithm()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_UseNagleAlgorithm(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_Expect100Continue()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_Expect100Continue(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="bool get_EnableDnsRoundRobin()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_EnableDnsRoundRobin(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="int get_DnsRefreshTimeout()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_DnsRefreshTimeout(int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class ICertificatePolicy get_CertificatePolicy()" />
        <Method Sig="void set_CertificatePolicy(class ICertificatePolicy )" />
        <Method Sig="class RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()" />
        <Method Sig="void set_ServerCertificateValidationCallback(class RemoteCertificateValidationCallback )" />
        <Method Sig="bool get_CheckCertificateRevocationList()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void set_CheckCertificateRevocationList(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class ServicePoint FindServicePoint(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class ServicePoint FindServicePoint(string , class IWebProxy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class ServicePoint FindServicePoint(class Uri , class IWebProxy )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SocketAddress">
        <Method Sig="instance struct AddressFamily get_Family()" />
        <Method Sig="instance int get_Size()" />
        <Method Sig="instance byte get_Item(int )" />
        <Method Sig="instance void set_Item(int , byte )" />
        <Method Sig="instance void .ctor(struct AddressFamily )" />
        <Method Sig="instance void .ctor(struct AddressFamily , int )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Namespace Name="Sockets">
        <Type Name="SocketException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int get_ErrorCode()" />
          <Method Sig="instance struct SocketError get_SocketErrorCode()" />
        </Type>
        <Type Name="NetworkStream">
          <Method Sig="instance void .ctor(class Socket )" />
          <Method Sig="instance void .ctor(class Socket , bool )" />
          <Method Sig="instance void .ctor(class Socket , struct FileAccess )" />
          <Method Sig="instance void .ctor(class Socket , struct FileAccess , bool )" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance bool get_CanTimeout()" />
          <Method Sig="instance int get_ReadTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ReadTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_WriteTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_WriteTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_DataAvailable()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance int Read([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close(int )" />
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndRead(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndWrite(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Flush()" />
          <Method Sig="instance void SetLength(in64 )" />
        </Type>
        <Type Name="LingerOption">
          <Method Sig="instance void .ctor(bool , int )" />
          <Method Sig="instance bool get_Enabled()" />
          <Method Sig="instance void set_Enabled(bool )" />
          <Method Sig="instance int get_LingerTime()" />
          <Method Sig="instance void set_LingerTime(int )" />
        </Type>
        <Type Name="MulticastOption">
          <Method Sig="instance void .ctor(class IPAddress , class IPAddress )" />
          <Method Sig="instance void .ctor(class IPAddress , int )" />
          <Method Sig="instance void .ctor(class IPAddress )" />
          <Method Sig="instance class IPAddress get_Group()" />
          <Method Sig="instance void set_Group(class IPAddress )" />
          <Method Sig="instance class IPAddress get_LocalAddress()" />
          <Method Sig="instance void set_LocalAddress(class IPAddress )" />
          <Method Sig="instance int get_InterfaceIndex()" />
          <Method Sig="instance void set_InterfaceIndex(int )" />
        </Type>
        <Type Name="IPv6MulticastOption">
          <Method Sig="instance void .ctor(class IPAddress , in64 )" />
          <Method Sig="instance void .ctor(class IPAddress )" />
          <Method Sig="instance class IPAddress get_Group()" />
          <Method Sig="instance void set_Group(class IPAddress )" />
          <Method Sig="instance in64 get_InterfaceIndex()" />
          <Method Sig="instance void set_InterfaceIndex(in64 )" />
        </Type>
        <Type Name="SocketInformation">
          <Method Sig="instance [] byte get_ProtocolInformation()" />
          <Method Sig="instance void set_ProtocolInformation([] byte )" />
          <Method Sig="instance struct SocketInformationOptions get_Options()" />
          <Method Sig="instance void set_Options(struct SocketInformationOptions )" />
        </Type>
        <Type Name="Socket">
          <Method Sig="instance void .ctor(struct AddressFamily , struct SocketType , struct ProtocolType )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(struct SocketInformation )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool get_SupportsIPv4()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool get_SupportsIPv6()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool get_OSSupportsIPv6()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_Available()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class EndPoint get_LocalEndPoint()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class EndPoint get_RemoteEndPoint()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance intptr get_Handle()" />
          <Method Sig="instance bool get_Blocking()" />
          <Method Sig="instance void set_Blocking(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_UseOnlyOverlappedIO()" />
          <Method Sig="instance void set_UseOnlyOverlappedIO(bool )" />
          <Method Sig="instance bool get_Connected()" />
          <Method Sig="instance struct AddressFamily get_AddressFamily()" />
          <Method Sig="instance struct SocketType get_SocketType()" />
          <Method Sig="instance struct ProtocolType get_ProtocolType()" />
          <Method Sig="instance bool get_IsBound()" />
          <Method Sig="instance bool get_ExclusiveAddressUse()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ExclusiveAddressUse(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_ReceiveBufferSize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ReceiveBufferSize(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_SendBufferSize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_SendBufferSize(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_ReceiveTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ReceiveTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_SendTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_SendTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class LingerOption get_LingerState()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_LingerState(class LingerOption )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_NoDelay()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_NoDelay(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance short get_Ttl()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_Ttl(short )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_DontFragment()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_DontFragment(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_MulticastLoopback()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_MulticastLoopback(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_EnableBroadcast()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_EnableBroadcast(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Bind(class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect([] class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close(int )" />
          <Method Sig="instance void Listen(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket Accept()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send(, class IList`1 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send(, class IList`1 , void )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendFile(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendFile(string , [] byte , [] byte , struct TransmitFileOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int , int , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int , int , struct SocketFlags , &amp; struct SocketError )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int SendTo([] byte , int , int , struct SocketFlags , class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int SendTo([] byte , int , struct SocketFlags , class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int SendTo([] byte , struct SocketFlags , class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int SendTo([] byte , class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive([] byte , int , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive([] byte , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive([] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive([] byte , int , int , struct SocketFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive([] byte , int , int , struct SocketFlags , &amp; struct SocketError )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive(, class IList`1 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Receive(, class IList`1 , void )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int ReceiveMessageFrom([] byte , int , int , &amp; struct SocketFlags , &amp; class EndPoint , &amp; struct IPPacketInformation )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int ReceiveFrom([] byte , int , int , struct SocketFlags , &amp; class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int ReceiveFrom([] byte , int , struct SocketFlags , &amp; class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int ReceiveFrom([] byte , struct SocketFlags , &amp; class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int ReceiveFrom([] byte , &amp; class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int IOControl(int , [] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int IOControl(struct IOControlCode , [] byte , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetSocketOption(struct SocketOptionLevel , struct SocketOptionName , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetSocketOption(struct SocketOptionLevel , struct SocketOptionName , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetSocketOption(struct SocketOptionLevel , struct SocketOptionName , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SetSocketOption(struct SocketOptionLevel , struct SocketOptionName , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object GetSocketOption(struct SocketOptionLevel , struct SocketOptionName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GetSocketOption(struct SocketOptionLevel , struct SocketOptionName , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte GetSocketOption(struct SocketOptionLevel , struct SocketOptionName , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool Poll(int , struct SelectMode )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void Select(class IList , class IList , class IList , int )" />
          <Method Sig="instance class IAsyncResult BeginSendFile(string , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect(class EndPoint , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct SocketInformation DuplicateAndClose(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect(string , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect(class IPAddress , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect([] class IPAddress , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginDisconnect(bool , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Disconnect(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndConnect(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndDisconnect(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend([] byte , int , int , struct SocketFlags , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend([] byte , int , int , struct SocketFlags , &amp; struct SocketError , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSendFile(string , [] byte , [] byte , struct TransmitFileOptions , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend(, class IList`1 , void , )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend(, class IList`1 , void , , struct ArraySegment`1 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndSend(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndSend(class IAsyncResult , &amp; struct SocketError )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndSendFile(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSendTo([] byte , int , int , struct SocketFlags , class EndPoint , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndSendTo(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceive([] byte , int , int , struct SocketFlags , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceive([] byte , int , int , struct SocketFlags , &amp; struct SocketError , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceive(, class IList`1 , void , )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceive(, class IList`1 , void , , struct ArraySegment`1 )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndReceive(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndReceive(class IAsyncResult , &amp; struct SocketError )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceiveMessageFrom([] byte , int , int , struct SocketFlags , &amp; class EndPoint , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndReceiveMessageFrom(class IAsyncResult , &amp; struct SocketFlags , &amp; class EndPoint , &amp; struct IPPacketInformation )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceiveFrom([] byte , int , int , struct SocketFlags , &amp; class EndPoint , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndReceiveFrom(class IAsyncResult , &amp; class EndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAccept(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAccept(int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAccept(class Socket , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket EndAccept(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket EndAccept(&amp; [] byte , class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket EndAccept(&amp; [] byte , &amp; int , class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Shutdown(struct SocketShutdown )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="TcpClient">
          <Method Sig="instance void .ctor(class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(struct AddressFamily )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket get_Client()" />
          <Method Sig="instance void set_Client(class Socket )" />
          <Method Sig="instance int get_Available()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_Connected()" />
          <Method Sig="instance bool get_ExclusiveAddressUse()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ExclusiveAddressUse(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect([] class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect(string , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect(class IPAddress , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginConnect([] class IPAddress , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndConnect(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class NetworkStream GetStream()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_ReceiveBufferSize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ReceiveBufferSize(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_SendBufferSize()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_SendBufferSize(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_ReceiveTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ReceiveTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int get_SendTimeout()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_SendTimeout(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class LingerOption get_LingerState()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_LingerState(class LingerOption )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_NoDelay()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_NoDelay(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="TcpListener">
          <Method Sig="instance void .ctor(class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket get_Server()" />
          <Method Sig="instance class EndPoint get_LocalEndpoint()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_ExclusiveAddressUse()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ExclusiveAddressUse(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Start()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Start(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Stop()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool Pending()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket AcceptSocket()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class TcpClient AcceptTcpClient()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAcceptSocket(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket EndAcceptSocket(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAcceptTcpClient(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class TcpClient EndAcceptTcpClient(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="UdpClient">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(struct AddressFamily )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(int , struct AddressFamily )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class Socket get_Client()" />
          <Method Sig="instance void set_Client(class Socket )" />
          <Method Sig="instance int get_Available()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance short get_Ttl()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_Ttl(short )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_DontFragment()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_DontFragment(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_MulticastLoopback()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_MulticastLoopback(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_EnableBroadcast()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_EnableBroadcast(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_ExclusiveAddressUse()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_ExclusiveAddressUse(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Close()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Connect(class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int , class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int , string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int Send([] byte , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend([] byte , int , class IPEndPoint , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend([] byte , int , string , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginSend([] byte , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndSend(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte Receive(&amp; class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginReceive(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] byte EndReceive(class IAsyncResult , &amp; class IPEndPoint )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void JoinMulticastGroup(class IPAddress )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void JoinMulticastGroup(class IPAddress , class IPAddress )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void JoinMulticastGroup(int , class IPAddress )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void JoinMulticastGroup(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void DropMulticastGroup(class IPAddress )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void DropMulticastGroup(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="IPPacketInformation">
          <Method Sig="instance class IPAddress get_Address()" />
          <Method Sig="instance int get_Interface()" />
          <Method Sig="bool op_Equality(struct IPPacketInformation , struct IPPacketInformation )" />
          <Method Sig="bool op_Inequality(struct IPPacketInformation , struct IPPacketInformation )" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
      </Namespace>
      <Type Name="SocketPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance string get_Access()" />
        <Method Sig="instance void set_Access(string )" />
        <Method Sig="instance string get_Host()" />
        <Method Sig="instance void set_Host(string )" />
        <Method Sig="instance string get_Transport()" />
        <Method Sig="instance void set_Transport(string )" />
        <Method Sig="instance string get_Port()" />
        <Method Sig="instance void set_Port(string )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="SocketPermission">
        <Method Sig="instance class IEnumerator get_ConnectList()" />
        <Method Sig="instance class IEnumerator get_AcceptList()" />
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor(struct NetworkAccess , struct TransportType , string , int )" />
        <Method Sig="instance void AddPermission(struct NetworkAccess , struct TransportType , string , int )" />
        <Method Sig="instance bool IsUnrestricted()" />
        <Method Sig="instance class IPermission Copy()" />
        <Method Sig="instance class IPermission Union(class IPermission )" />
        <Method Sig="instance class IPermission Intersect(class IPermission )" />
        <Method Sig="instance bool IsSubsetOf(class IPermission )" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance class SecurityElement ToXml()" />
      </Type>
      <Type Name="EndpointPermission">
        <Method Sig="instance string get_Hostname()" />
        <Method Sig="instance struct TransportType get_Transport()" />
        <Method Sig="instance int get_Port()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="WebClient">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance void set_Encoding(class Encoding )" />
        <Method Sig="instance string get_BaseAddress()" />
        <Method Sig="instance void set_BaseAddress(string )" />
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class WebHeaderCollection get_Headers()" />
        <Method Sig="instance void set_Headers(class WebHeaderCollection )" />
        <Method Sig="instance class NameValueCollection get_QueryString()" />
        <Method Sig="instance void set_QueryString(class NameValueCollection )" />
        <Method Sig="instance class WebHeaderCollection get_ResponseHeaders()" />
        <Method Sig="instance class IWebProxy get_Proxy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Proxy(class IWebProxy )" />
        <Method Sig="instance class RequestCachePolicy get_CachePolicy()" />
        <Method Sig="instance void set_CachePolicy(class RequestCachePolicy )" />
        <Method Sig="instance bool get_IsBusy()" />
        <Method Sig="instance [] byte DownloadData(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte DownloadData(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DownloadFile(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DownloadFile(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenRead(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenRead(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenWrite(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenWrite(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenWrite(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Stream OpenWrite(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadData(string , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadData(class Uri , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadData(string , string , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadData(class Uri , string , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadFile(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadFile(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadFile(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadFile(class Uri , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadValues(string , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadValues(class Uri , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadValues(string , string , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance [] byte UploadValues(class Uri , string , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string UploadString(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string UploadString(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string UploadString(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string UploadString(class Uri , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string DownloadString(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string DownloadString(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_OpenReadCompleted(class OpenReadCompletedEventHandler )" />
        <Method Sig="instance void remove_OpenReadCompleted(class OpenReadCompletedEventHandler )" />
        <Method Sig="instance void OpenReadAsync(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void OpenReadAsync(class Uri , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_OpenWriteCompleted(class OpenWriteCompletedEventHandler )" />
        <Method Sig="instance void remove_OpenWriteCompleted(class OpenWriteCompletedEventHandler )" />
        <Method Sig="instance void OpenWriteAsync(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void OpenWriteAsync(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void OpenWriteAsync(class Uri , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_DownloadStringCompleted(class DownloadStringCompletedEventHandler )" />
        <Method Sig="instance void remove_DownloadStringCompleted(class DownloadStringCompletedEventHandler )" />
        <Method Sig="instance void DownloadStringAsync(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DownloadStringAsync(class Uri , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_DownloadDataCompleted(class DownloadDataCompletedEventHandler )" />
        <Method Sig="instance void remove_DownloadDataCompleted(class DownloadDataCompletedEventHandler )" />
        <Method Sig="instance void DownloadDataAsync(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DownloadDataAsync(class Uri , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_DownloadFileCompleted(class AsyncCompletedEventHandler )" />
        <Method Sig="instance void remove_DownloadFileCompleted(class AsyncCompletedEventHandler )" />
        <Method Sig="instance void DownloadFileAsync(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void DownloadFileAsync(class Uri , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_UploadStringCompleted(class UploadStringCompletedEventHandler )" />
        <Method Sig="instance void remove_UploadStringCompleted(class UploadStringCompletedEventHandler )" />
        <Method Sig="instance void UploadStringAsync(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadStringAsync(class Uri , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadStringAsync(class Uri , string , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_UploadDataCompleted(class UploadDataCompletedEventHandler )" />
        <Method Sig="instance void remove_UploadDataCompleted(class UploadDataCompletedEventHandler )" />
        <Method Sig="instance void UploadDataAsync(class Uri , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadDataAsync(class Uri , string , [] byte )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadDataAsync(class Uri , string , [] byte , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_UploadFileCompleted(class UploadFileCompletedEventHandler )" />
        <Method Sig="instance void remove_UploadFileCompleted(class UploadFileCompletedEventHandler )" />
        <Method Sig="instance void UploadFileAsync(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadFileAsync(class Uri , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadFileAsync(class Uri , string , string , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_UploadValuesCompleted(class UploadValuesCompletedEventHandler )" />
        <Method Sig="instance void remove_UploadValuesCompleted(class UploadValuesCompletedEventHandler )" />
        <Method Sig="instance void UploadValuesAsync(class Uri , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadValuesAsync(class Uri , string , class NameValueCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void UploadValuesAsync(class Uri , string , class NameValueCollection , object )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void CancelAsync()" />
        <Method Sig="instance void add_DownloadProgressChanged(class DownloadProgressChangedEventHandler )" />
        <Method Sig="instance void remove_DownloadProgressChanged(class DownloadProgressChangedEventHandler )" />
        <Method Sig="instance void add_UploadProgressChanged(class UploadProgressChangedEventHandler )" />
        <Method Sig="instance void remove_UploadProgressChanged(class UploadProgressChangedEventHandler )" />
      </Type>
      <Type Name="OpenReadCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class OpenReadCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class OpenReadCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="OpenReadCompletedEventArgs">
        <Method Sig="instance class Stream get_Result()" />
      </Type>
      <Type Name="OpenWriteCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class OpenWriteCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class OpenWriteCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="OpenWriteCompletedEventArgs">
        <Method Sig="instance class Stream get_Result()" />
      </Type>
      <Type Name="DownloadStringCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class DownloadStringCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class DownloadStringCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="DownloadStringCompletedEventArgs">
        <Method Sig="instance string get_Result()" />
      </Type>
      <Type Name="DownloadDataCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class DownloadDataCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class DownloadDataCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="DownloadDataCompletedEventArgs">
        <Method Sig="instance [] byte get_Result()" />
      </Type>
      <Type Name="UploadStringCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UploadStringCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UploadStringCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UploadStringCompletedEventArgs">
        <Method Sig="instance string get_Result()" />
      </Type>
      <Type Name="UploadDataCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UploadDataCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UploadDataCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UploadDataCompletedEventArgs">
        <Method Sig="instance [] byte get_Result()" />
      </Type>
      <Type Name="UploadFileCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UploadFileCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UploadFileCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UploadFileCompletedEventArgs">
        <Method Sig="instance [] byte get_Result()" />
      </Type>
      <Type Name="UploadValuesCompletedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UploadValuesCompletedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UploadValuesCompletedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UploadValuesCompletedEventArgs">
        <Method Sig="instance [] byte get_Result()" />
      </Type>
      <Type Name="DownloadProgressChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class DownloadProgressChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class DownloadProgressChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="DownloadProgressChangedEventArgs">
        <Method Sig="instance in64 get_BytesReceived()" />
        <Method Sig="instance in64 get_TotalBytesToReceive()" />
      </Type>
      <Type Name="UploadProgressChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UploadProgressChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UploadProgressChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UploadProgressChangedEventArgs">
        <Method Sig="instance in64 get_BytesReceived()" />
        <Method Sig="instance in64 get_TotalBytesToReceive()" />
        <Method Sig="instance in64 get_BytesSent()" />
        <Method Sig="instance in64 get_TotalBytesToSend()" />
      </Type>
      <Type Name="WebException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , struct WebExceptionStatus )" />
        <Method Sig="instance void .ctor(string , class Exception , struct WebExceptionStatus , class WebResponse )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance struct WebExceptionStatus get_Status()" />
        <Method Sig="instance class WebResponse get_Response()" />
      </Type>
      <Type Name="WebHeaderCollection">
        <Method Sig="instance string get_Item(struct HttpRequestHeader )" />
        <Method Sig="instance void set_Item(struct HttpRequestHeader , string )" />
        <Method Sig="instance string get_Item(struct HttpResponseHeader )" />
        <Method Sig="instance void set_Item(struct HttpResponseHeader , string )" />
        <Method Sig="instance void Add(struct HttpRequestHeader , string )" />
        <Method Sig="instance void Add(struct HttpResponseHeader , string )" />
        <Method Sig="instance void Set(struct HttpRequestHeader , string )" />
        <Method Sig="instance void Set(struct HttpResponseHeader , string )" />
        <Method Sig="instance void Remove(struct HttpRequestHeader )" />
        <Method Sig="instance void Remove(struct HttpResponseHeader )" />
        <Method Sig="instance void Add(string , string )" />
        <Method Sig="instance void Add(string )" />
        <Method Sig="instance void Set(string , string )" />
        <Method Sig="instance void Remove(string )" />
        <Method Sig="instance [] string GetValues(string )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance [] byte ToByteArray()" />
        <Method Sig="bool IsRestricted(string )" />
        <Method Sig="bool IsRestricted(string , bool )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void OnDeserialization(object )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance string Get(string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class KeysCollection get_Keys()" />
        <Method Sig="instance string Get(int )" />
        <Method Sig="instance [] string GetValues(int )" />
        <Method Sig="instance string GetKey(int )" />
        <Method Sig="instance [] string get_AllKeys()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="WebPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance string get_Connect()" />
        <Method Sig="instance void set_Connect(string )" />
        <Method Sig="instance string get_Accept()" />
        <Method Sig="instance void set_Accept(string )" />
        <Method Sig="instance string get_ConnectPattern()" />
        <Method Sig="instance void set_ConnectPattern(string )" />
        <Method Sig="instance string get_AcceptPattern()" />
        <Method Sig="instance void set_AcceptPattern(string )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="WebPermission">
        <Method Sig="instance class IEnumerator get_ConnectList()" />
        <Method Sig="instance class IEnumerator get_AcceptList()" />
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct NetworkAccess , class Regex )" />
        <Method Sig="instance void .ctor(struct NetworkAccess , string )" />
        <Method Sig="instance void AddPermission(struct NetworkAccess , string )" />
        <Method Sig="instance void AddPermission(struct NetworkAccess , class Regex )" />
        <Method Sig="instance bool IsUnrestricted()" />
        <Method Sig="instance class IPermission Copy()" />
        <Method Sig="instance bool IsSubsetOf(class IPermission )" />
        <Method Sig="instance class IPermission Union(class IPermission )" />
        <Method Sig="instance class IPermission Intersect(class IPermission )" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance class SecurityElement ToXml()" />
      </Type>
      <Type Name="WebProxy">
        <Method Sig="instance void .ctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Uri , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Uri , bool , [] string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Uri , bool , [] string , class ICredentials )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , int )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , bool , [] string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , bool , [] string , class ICredentials )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Uri get_Address()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Address(class Uri )" />
        <Method Sig="instance bool get_BypassProxyOnLocal()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_BypassProxyOnLocal(bool )" />
        <Method Sig="instance [] string get_BypassList()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_BypassList([] string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class ICredentials get_Credentials()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance bool get_UseDefaultCredentials()" />
        <Method Sig="instance void set_UseDefaultCredentials(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class ArrayList get_BypassArrayList()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Uri GetProxy(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool IsBypassed(class Uri )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class WebProxy GetDefaultProxy()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Namespace Name="Cache">
        <Type Name="RequestCachePolicy">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct RequestCacheLevel )" />
          <Method Sig="instance struct RequestCacheLevel get_Level()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="HttpRequestCachePolicy">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct HttpRequestCacheLevel )" />
          <Method Sig="instance void .ctor(struct HttpCacheAgeControl , struct TimeSpan )" />
          <Method Sig="instance void .ctor(struct HttpCacheAgeControl , struct TimeSpan , struct TimeSpan )" />
          <Method Sig="instance void .ctor(struct DateTime )" />
          <Method Sig="instance void .ctor(struct HttpCacheAgeControl , struct TimeSpan , struct TimeSpan , struct DateTime )" />
          <Method Sig="instance struct HttpRequestCacheLevel get_Level()" />
          <Method Sig="instance struct DateTime get_CacheSyncDate()" />
          <Method Sig="instance struct TimeSpan get_MaxAge()" />
          <Method Sig="instance struct TimeSpan get_MinFresh()" />
          <Method Sig="instance struct TimeSpan get_MaxStale()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
      <Namespace Name="Security">
        <Type Name="AuthenticatedStream">
          <Method Sig="instance bool get_LeaveInnerStreamOpen()" />
          <Method Sig="instance bool get_IsAuthenticated()" />
          <Method Sig="instance bool get_IsMutuallyAuthenticated()" />
          <Method Sig="instance bool get_IsEncrypted()" />
          <Method Sig="instance bool get_IsSigned()" />
          <Method Sig="instance bool get_IsServer()" />
        </Type>
        <Type Name="NegotiateStream">
          <Method Sig="instance void .ctor(class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Stream , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsClient()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsClient(class NetworkCredential , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsClient(class NetworkCredential , string , struct ProtectionLevel , struct TokenImpersonationLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsClient(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsClient(class NetworkCredential , string , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsClient(class NetworkCredential , string , struct ProtectionLevel , struct TokenImpersonationLevel , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndAuthenticateAsClient(class IAsyncResult )" />
          <Method Sig="instance void AuthenticateAsServer()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsServer(class NetworkCredential , struct ProtectionLevel , struct TokenImpersonationLevel )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsServer(class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsServer(class NetworkCredential , struct ProtectionLevel , struct TokenImpersonationLevel , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndAuthenticateAsServer(class IAsyncResult )" />
          <Method Sig="instance bool get_IsAuthenticated()" />
          <Method Sig="instance bool get_IsMutuallyAuthenticated()" />
          <Method Sig="instance bool get_IsEncrypted()" />
          <Method Sig="instance bool get_IsSigned()" />
          <Method Sig="instance bool get_IsServer()" />
          <Method Sig="instance struct TokenImpersonationLevel get_ImpersonationLevel()" />
          <Method Sig="instance class IIdentity get_RemoteIdentity()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="UnmanagedCode, ControlPrincipal" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanTimeout()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance int get_ReadTimeout()" />
          <Method Sig="instance void set_ReadTimeout(int )" />
          <Method Sig="instance int get_WriteTimeout()" />
          <Method Sig="instance void set_WriteTimeout(int )" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance void SetLength(in64 )" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance void Flush()" />
          <Method Sig="instance int Read([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance int EndRead(class IAsyncResult )" />
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndWrite(class IAsyncResult )" />
          <Method Sig="void .cctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="RemoteCertificateValidationCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance bool Invoke(object , class X509Certificate , class X509Chain , struct SslPolicyErrors )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class X509Certificate , class X509Chain , struct SslPolicyErrors , class AsyncCallback , object )" />
          <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="LocalCertificateSelectionCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance class X509Certificate Invoke(object , string , class X509CertificateCollection , class X509Certificate , [] string )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , string , class X509CertificateCollection , class X509Certificate , [] string , class AsyncCallback , object )" />
          <Method Sig="instance class X509Certificate EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="SslStream">
          <Method Sig="instance void .ctor(class Stream )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Stream , bool )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Stream , bool , class RemoteCertificateValidationCallback )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Stream , bool , class RemoteCertificateValidationCallback , class LocalCertificateSelectionCallback )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsClient(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsClient(string , class X509CertificateCollection , struct SslProtocols , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsClient(string , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsClient(string , class X509CertificateCollection , struct SslProtocols , bool , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndAuthenticateAsClient(class IAsyncResult )" />
          <Method Sig="instance void AuthenticateAsServer(class X509Certificate )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AuthenticateAsServer(class X509Certificate , bool , struct SslProtocols , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsServer(class X509Certificate , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginAuthenticateAsServer(class X509Certificate , bool , struct SslProtocols , bool , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void EndAuthenticateAsServer(class IAsyncResult )" />
          <Method Sig="instance bool get_IsAuthenticated()" />
          <Method Sig="instance bool get_IsMutuallyAuthenticated()" />
          <Method Sig="instance bool get_IsEncrypted()" />
          <Method Sig="instance bool get_IsSigned()" />
          <Method Sig="instance bool get_IsServer()" />
          <Method Sig="instance struct SslProtocols get_SslProtocol()" />
          <Method Sig="instance bool get_CheckCertRevocationStatus()" />
          <Method Sig="instance class X509Certificate get_LocalCertificate()" />
          <Method Sig="instance class X509Certificate get_RemoteCertificate()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="Create" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct CipherAlgorithmType get_CipherAlgorithm()" />
          <Method Sig="instance int get_CipherStrength()" />
          <Method Sig="instance struct HashAlgorithmType get_HashAlgorithm()" />
          <Method Sig="instance int get_HashStrength()" />
          <Method Sig="instance struct ExchangeAlgorithmType get_KeyExchangeAlgorithm()" />
          <Method Sig="instance int get_KeyExchangeStrength()" />
          <Method Sig="instance bool get_CanSeek()" />
          <Method Sig="instance bool get_CanRead()" />
          <Method Sig="instance bool get_CanTimeout()" />
          <Method Sig="instance bool get_CanWrite()" />
          <Method Sig="instance int get_ReadTimeout()" />
          <Method Sig="instance void set_ReadTimeout(int )" />
          <Method Sig="instance int get_WriteTimeout()" />
          <Method Sig="instance void set_WriteTimeout(int )" />
          <Method Sig="instance in64 get_Length()" />
          <Method Sig="instance in64 get_Position()" />
          <Method Sig="instance void set_Position(in64 )" />
          <Method Sig="instance void SetLength(in64 )" />
          <Method Sig="instance in64 Seek(in64 , struct SeekOrigin )" />
          <Method Sig="instance void Flush()" />
          <Method Sig="instance int Read([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void Write([] byte )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void Write([] byte , int , int )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginRead([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance int EndRead(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class IAsyncResult BeginWrite([] byte , int , int , class AsyncCallback , object )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void EndWrite(class IAsyncResult )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
        </Type>
      </Namespace>
      <Namespace Name="NetworkInformation">
        <Type Name="IcmpV4Statistics">
          <Method Sig="instance in64 get_AddressMaskRepliesReceived()" />
          <Method Sig="instance in64 get_AddressMaskRepliesSent()" />
          <Method Sig="instance in64 get_AddressMaskRequestsReceived()" />
          <Method Sig="instance in64 get_AddressMaskRequestsSent()" />
          <Method Sig="instance in64 get_DestinationUnreachableMessagesReceived()" />
          <Method Sig="instance in64 get_DestinationUnreachableMessagesSent()" />
          <Method Sig="instance in64 get_EchoRepliesReceived()" />
          <Method Sig="instance in64 get_EchoRepliesSent()" />
          <Method Sig="instance in64 get_EchoRequestsReceived()" />
          <Method Sig="instance in64 get_EchoRequestsSent()" />
          <Method Sig="instance in64 get_ErrorsReceived()" />
          <Method Sig="instance in64 get_ErrorsSent()" />
          <Method Sig="instance in64 get_MessagesReceived()" />
          <Method Sig="instance in64 get_MessagesSent()" />
          <Method Sig="instance in64 get_ParameterProblemsReceived()" />
          <Method Sig="instance in64 get_ParameterProblemsSent()" />
          <Method Sig="instance in64 get_RedirectsReceived()" />
          <Method Sig="instance in64 get_RedirectsSent()" />
          <Method Sig="instance in64 get_SourceQuenchesReceived()" />
          <Method Sig="instance in64 get_SourceQuenchesSent()" />
          <Method Sig="instance in64 get_TimeExceededMessagesReceived()" />
          <Method Sig="instance in64 get_TimeExceededMessagesSent()" />
          <Method Sig="instance in64 get_TimestampRepliesReceived()" />
          <Method Sig="instance in64 get_TimestampRepliesSent()" />
          <Method Sig="instance in64 get_TimestampRequestsReceived()" />
          <Method Sig="instance in64 get_TimestampRequestsSent()" />
        </Type>
        <Type Name="IcmpV6Statistics">
          <Method Sig="instance in64 get_DestinationUnreachableMessagesReceived()" />
          <Method Sig="instance in64 get_DestinationUnreachableMessagesSent()" />
          <Method Sig="instance in64 get_EchoRepliesReceived()" />
          <Method Sig="instance in64 get_EchoRepliesSent()" />
          <Method Sig="instance in64 get_EchoRequestsReceived()" />
          <Method Sig="instance in64 get_EchoRequestsSent()" />
          <Method Sig="instance in64 get_ErrorsReceived()" />
          <Method Sig="instance in64 get_ErrorsSent()" />
          <Method Sig="instance in64 get_MembershipQueriesReceived()" />
          <Method Sig="instance in64 get_MembershipQueriesSent()" />
          <Method Sig="instance in64 get_MembershipReductionsReceived()" />
          <Method Sig="instance in64 get_MembershipReductionsSent()" />
          <Method Sig="instance in64 get_MembershipReportsReceived()" />
          <Method Sig="instance in64 get_MembershipReportsSent()" />
          <Method Sig="instance in64 get_MessagesReceived()" />
          <Method Sig="instance in64 get_MessagesSent()" />
          <Method Sig="instance in64 get_NeighborAdvertisementsReceived()" />
          <Method Sig="instance in64 get_NeighborAdvertisementsSent()" />
          <Method Sig="instance in64 get_NeighborSolicitsReceived()" />
          <Method Sig="instance in64 get_NeighborSolicitsSent()" />
          <Method Sig="instance in64 get_PacketTooBigMessagesReceived()" />
          <Method Sig="instance in64 get_PacketTooBigMessagesSent()" />
          <Method Sig="instance in64 get_ParameterProblemsReceived()" />
          <Method Sig="instance in64 get_ParameterProblemsSent()" />
          <Method Sig="instance in64 get_RedirectsReceived()" />
          <Method Sig="instance in64 get_RedirectsSent()" />
          <Method Sig="instance in64 get_RouterAdvertisementsReceived()" />
          <Method Sig="instance in64 get_RouterAdvertisementsSent()" />
          <Method Sig="instance in64 get_RouterSolicitsReceived()" />
          <Method Sig="instance in64 get_RouterSolicitsSent()" />
          <Method Sig="instance in64 get_TimeExceededMessagesReceived()" />
          <Method Sig="instance in64 get_TimeExceededMessagesSent()" />
        </Type>
        <Type Name="IPAddressInformation">
          <Method Sig="instance class IPAddress get_Address()" />
          <Method Sig="instance bool get_IsDnsEligible()" />
          <Method Sig="instance bool get_IsTransient()" />
        </Type>
        <Type Name="IPAddressInformationCollection">
          <Method Sig="instance void CopyTo([] class IPAddressInformation , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Add(class IPAddressInformation )" />
          <Method Sig="instance bool Contains(class IPAddressInformation )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance class IPAddressInformation get_Item(int )" />
          <Method Sig="instance bool Remove(class IPAddressInformation )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="IPGlobalProperties">
          <Method Sig="class IPGlobalProperties GetIPGlobalProperties()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Read" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance [] class IPEndPoint GetActiveUdpListeners()" />
          <Method Sig="instance [] class IPEndPoint GetActiveTcpListeners()" />
          <Method Sig="instance [] class TcpConnectionInformation GetActiveTcpConnections()" />
          <Method Sig="instance string get_DhcpScopeName()" />
          <Method Sig="instance string get_DomainName()" />
          <Method Sig="instance string get_HostName()" />
          <Method Sig="instance bool get_IsWinsProxy()" />
          <Method Sig="instance struct NetBiosNodeType get_NodeType()" />
          <Method Sig="instance class TcpStatistics GetTcpIPv4Statistics()" />
          <Method Sig="instance class TcpStatistics GetTcpIPv6Statistics()" />
          <Method Sig="instance class UdpStatistics GetUdpIPv4Statistics()" />
          <Method Sig="instance class UdpStatistics GetUdpIPv6Statistics()" />
          <Method Sig="instance class IcmpV4Statistics GetIcmpV4Statistics()" />
          <Method Sig="instance class IcmpV6Statistics GetIcmpV6Statistics()" />
          <Method Sig="instance class IPGlobalStatistics GetIPv4GlobalStatistics()" />
          <Method Sig="instance class IPGlobalStatistics GetIPv6GlobalStatistics()" />
        </Type>
        <Type Name="IPGlobalStatistics">
          <Method Sig="instance int get_DefaultTtl()" />
          <Method Sig="instance bool get_ForwardingEnabled()" />
          <Method Sig="instance int get_NumberOfInterfaces()" />
          <Method Sig="instance int get_NumberOfIPAddresses()" />
          <Method Sig="instance in64 get_OutputPacketRequests()" />
          <Method Sig="instance in64 get_OutputPacketRoutingDiscards()" />
          <Method Sig="instance in64 get_OutputPacketsDiscarded()" />
          <Method Sig="instance in64 get_OutputPacketsWithNoRoute()" />
          <Method Sig="instance in64 get_PacketFragmentFailures()" />
          <Method Sig="instance in64 get_PacketReassembliesRequired()" />
          <Method Sig="instance in64 get_PacketReassemblyFailures()" />
          <Method Sig="instance in64 get_PacketReassemblyTimeout()" />
          <Method Sig="instance in64 get_PacketsFragmented()" />
          <Method Sig="instance in64 get_PacketsReassembled()" />
          <Method Sig="instance in64 get_ReceivedPackets()" />
          <Method Sig="instance in64 get_ReceivedPacketsDelivered()" />
          <Method Sig="instance in64 get_ReceivedPacketsDiscarded()" />
          <Method Sig="instance in64 get_ReceivedPacketsForwarded()" />
          <Method Sig="instance in64 get_ReceivedPacketsWithAddressErrors()" />
          <Method Sig="instance in64 get_ReceivedPacketsWithHeadersErrors()" />
          <Method Sig="instance in64 get_ReceivedPacketsWithUnknownProtocol()" />
          <Method Sig="instance int get_NumberOfRoutes()" />
        </Type>
        <Type Name="IPInterfaceProperties">
          <Method Sig="instance bool get_IsDnsEnabled()" />
          <Method Sig="instance string get_DnsSuffix()" />
          <Method Sig="instance bool get_IsDynamicDnsEnabled()" />
          <Method Sig="instance class UnicastIPAddressInformationCollection get_UnicastAddresses()" />
          <Method Sig="instance class MulticastIPAddressInformationCollection get_MulticastAddresses()" />
          <Method Sig="instance class IPAddressInformationCollection get_AnycastAddresses()" />
          <Method Sig="instance class IPAddressCollection get_DnsAddresses()" />
          <Method Sig="instance class GatewayIPAddressInformationCollection get_GatewayAddresses()" />
          <Method Sig="instance class IPAddressCollection get_DhcpServerAddresses()" />
          <Method Sig="instance class IPAddressCollection get_WinsServersAddresses()" />
          <Method Sig="instance class IPv4InterfaceProperties GetIPv4Properties()" />
          <Method Sig="instance class IPv6InterfaceProperties GetIPv6Properties()" />
        </Type>
        <Type Name="IPv4InterfaceStatistics">
          <Method Sig="instance in64 get_BytesReceived()" />
          <Method Sig="instance in64 get_BytesSent()" />
          <Method Sig="instance in64 get_IncomingPacketsDiscarded()" />
          <Method Sig="instance in64 get_IncomingPacketsWithErrors()" />
          <Method Sig="instance in64 get_IncomingUnknownProtocolPackets()" />
          <Method Sig="instance in64 get_NonUnicastPacketsReceived()" />
          <Method Sig="instance in64 get_NonUnicastPacketsSent()" />
          <Method Sig="instance in64 get_OutgoingPacketsDiscarded()" />
          <Method Sig="instance in64 get_OutgoingPacketsWithErrors()" />
          <Method Sig="instance in64 get_OutputQueueLength()" />
          <Method Sig="instance in64 get_UnicastPacketsReceived()" />
          <Method Sig="instance in64 get_UnicastPacketsSent()" />
        </Type>
        <Type Name="UnicastIPAddressInformation">
          <Method Sig="instance in64 get_AddressPreferredLifetime()" />
          <Method Sig="instance in64 get_AddressValidLifetime()" />
          <Method Sig="instance in64 get_DhcpLeaseLifetime()" />
          <Method Sig="instance struct DuplicateAddressDetectionState get_DuplicateAddressDetectionState()" />
          <Method Sig="instance struct PrefixOrigin get_PrefixOrigin()" />
          <Method Sig="instance struct SuffixOrigin get_SuffixOrigin()" />
          <Method Sig="instance class IPAddress get_IPv4Mask()" />
        </Type>
        <Type Name="UnicastIPAddressInformationCollection">
          <Method Sig="instance void CopyTo([] class UnicastIPAddressInformation , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Add(class UnicastIPAddressInformation )" />
          <Method Sig="instance bool Contains(class UnicastIPAddressInformation )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance class UnicastIPAddressInformation get_Item(int )" />
          <Method Sig="instance bool Remove(class UnicastIPAddressInformation )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="MulticastIPAddressInformation">
          <Method Sig="instance in64 get_AddressPreferredLifetime()" />
          <Method Sig="instance in64 get_AddressValidLifetime()" />
          <Method Sig="instance in64 get_DhcpLeaseLifetime()" />
          <Method Sig="instance struct DuplicateAddressDetectionState get_DuplicateAddressDetectionState()" />
          <Method Sig="instance struct PrefixOrigin get_PrefixOrigin()" />
          <Method Sig="instance struct SuffixOrigin get_SuffixOrigin()" />
        </Type>
        <Type Name="MulticastIPAddressInformationCollection">
          <Method Sig="instance void CopyTo([] class MulticastIPAddressInformation , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Add(class MulticastIPAddressInformation )" />
          <Method Sig="instance bool Contains(class MulticastIPAddressInformation )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance class MulticastIPAddressInformation get_Item(int )" />
          <Method Sig="instance bool Remove(class MulticastIPAddressInformation )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="IPAddressCollection">
          <Method Sig="instance void CopyTo([] class IPAddress , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance void Add(class IPAddress )" />
          <Method Sig="instance bool Contains(class IPAddress )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance class IPAddress get_Item(int )" />
          <Method Sig="instance bool Remove(class IPAddress )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="GatewayIPAddressInformation">
          <Method Sig="instance class IPAddress get_Address()" />
        </Type>
        <Type Name="GatewayIPAddressInformationCollection">
          <Method Sig="instance void CopyTo([] class GatewayIPAddressInformation , int )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool get_IsReadOnly()" />
          <Method Sig="instance class GatewayIPAddressInformation get_Item(int )" />
          <Method Sig="instance void Add(class GatewayIPAddressInformation )" />
          <Method Sig="instance bool Contains(class GatewayIPAddressInformation )" />
          <Method Sig="instance GetEnumerator()" />
          <Method Sig="instance bool Remove(class GatewayIPAddressInformation )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="IPv4InterfaceProperties">
          <Method Sig="instance bool get_UsesWins()" />
          <Method Sig="instance bool get_IsDhcpEnabled()" />
          <Method Sig="instance bool get_IsAutomaticPrivateAddressingActive()" />
          <Method Sig="instance bool get_IsAutomaticPrivateAddressingEnabled()" />
          <Method Sig="instance int get_Index()" />
          <Method Sig="instance bool get_IsForwardingEnabled()" />
          <Method Sig="instance int get_Mtu()" />
        </Type>
        <Type Name="IPv6InterfaceProperties">
          <Method Sig="instance int get_Index()" />
          <Method Sig="instance int get_Mtu()" />
        </Type>
        <Type Name="NetworkAvailabilityEventArgs">
          <Method Sig="instance bool get_IsAvailable()" />
        </Type>
        <Type Name="NetworkChange">
          <Method Sig="void add_NetworkAvailabilityChanged(class NetworkAvailabilityChangedEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void remove_NetworkAvailabilityChanged(class NetworkAvailabilityChangedEventHandler )" />
          <Method Sig="void add_NetworkAddressChanged(class NetworkAddressChangedEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void remove_NetworkAddressChanged(class NetworkAddressChangedEventHandler )" />
        </Type>
        <Type Name="NetworkAddressChangedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class EventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class EventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="NetworkAvailabilityChangedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class NetworkAvailabilityEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class NetworkAvailabilityEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="NetworkInformationException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance int get_ErrorCode()" />
        </Type>
        <Type Name="NetworkInformationPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Access()" />
          <Method Sig="instance void set_Access(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="NetworkInformationPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct NetworkInformationAccess )" />
          <Method Sig="instance struct NetworkInformationAccess get_Access()" />
          <Method Sig="instance void AddPermission(struct NetworkInformationAccess )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
        <Type Name="NetworkInterface">
          <Method Sig="[] class NetworkInterface GetAllNetworkInterfaces()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Read" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool GetIsNetworkAvailable()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="int get_LoopbackInterfaceIndex()" />
          <Method Sig="instance string get_Id()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance string get_Description()" />
          <Method Sig="instance class IPInterfaceProperties GetIPProperties()" />
          <Method Sig="instance class IPv4InterfaceStatistics GetIPv4Statistics()" />
          <Method Sig="instance struct OperationalStatus get_OperationalStatus()" />
          <Method Sig="instance in64 get_Speed()" />
          <Method Sig="instance bool get_IsReceiveOnly()" />
          <Method Sig="instance bool get_SupportsMulticast()" />
          <Method Sig="instance class PhysicalAddress GetPhysicalAddress()" />
          <Method Sig="instance struct NetworkInterfaceType get_NetworkInterfaceType()" />
          <Method Sig="instance bool Supports(struct NetworkInterfaceComponent )" />
        </Type>
        <Type Name="PhysicalAddress">
          <Method Sig="instance void .ctor([] byte )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance [] byte GetAddressBytes()" />
          <Method Sig="class PhysicalAddress Parse(string )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="PingCompletedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class PingCompletedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class PingCompletedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="PingCompletedEventArgs">
          <Method Sig="instance class PingReply get_Reply()" />
        </Type>
        <Type Name="Ping">
          <Method Sig="instance void add_PingCompleted(class PingCompletedEventHandler )" />
          <Method Sig="instance void remove_PingCompleted(class PingCompletedEventHandler )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void SendAsyncCancel()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(class IPAddress )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(class IPAddress , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(string , int , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(class IPAddress , int , [] byte )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(string , int , [] byte , class PingOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class PingReply Send(class IPAddress , int , [] byte , class PingOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(string , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(string , int , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(class IPAddress , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(class IPAddress , int , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(string , int , [] byte , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(class IPAddress , int , [] byte , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(string , int , [] byte , class PingOptions , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(class IPAddress , int , [] byte , class PingOptions , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                  <NetworkInformationAccess Access="Ping" />
                </IPermission>
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="PingException">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
        </Type>
        <Type Name="PingOptions">
          <Method Sig="instance void .ctor(int , bool )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_Ttl()" />
          <Method Sig="instance void set_Ttl(int )" />
          <Method Sig="instance bool get_DontFragment()" />
          <Method Sig="instance void set_DontFragment(bool )" />
        </Type>
        <Type Name="PingReply">
          <Method Sig="instance struct IPStatus get_Status()" />
          <Method Sig="instance class IPAddress get_Address()" />
          <Method Sig="instance in64 get_RoundtripTime()" />
          <Method Sig="instance class PingOptions get_Options()" />
          <Method Sig="instance [] byte get_Buffer()" />
        </Type>
        <Type Name="TcpConnectionInformation">
          <Method Sig="instance class IPEndPoint get_LocalEndPoint()" />
          <Method Sig="instance class IPEndPoint get_RemoteEndPoint()" />
          <Method Sig="instance struct TcpState get_State()" />
        </Type>
        <Type Name="TcpStatistics">
          <Method Sig="instance in64 get_ConnectionsAccepted()" />
          <Method Sig="instance in64 get_ConnectionsInitiated()" />
          <Method Sig="instance in64 get_CumulativeConnections()" />
          <Method Sig="instance in64 get_CurrentConnections()" />
          <Method Sig="instance in64 get_ErrorsReceived()" />
          <Method Sig="instance in64 get_FailedConnectionAttempts()" />
          <Method Sig="instance in64 get_MaximumConnections()" />
          <Method Sig="instance in64 get_MaximumTransmissionTimeout()" />
          <Method Sig="instance in64 get_MinimumTransmissionTimeout()" />
          <Method Sig="instance in64 get_ResetConnections()" />
          <Method Sig="instance in64 get_SegmentsReceived()" />
          <Method Sig="instance in64 get_SegmentsResent()" />
          <Method Sig="instance in64 get_SegmentsSent()" />
          <Method Sig="instance in64 get_ResetsSent()" />
        </Type>
        <Type Name="UdpStatistics">
          <Method Sig="instance in64 get_DatagramsReceived()" />
          <Method Sig="instance in64 get_DatagramsSent()" />
          <Method Sig="instance in64 get_IncomingDatagramsDiscarded()" />
          <Method Sig="instance in64 get_IncomingDatagramsWithErrors()" />
          <Method Sig="instance int get_UdpListeners()" />
        </Type>
      </Namespace>
      <Namespace Name="Configuration">
        <Type Name="AuthenticationModuleElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Type()" />
          <Method Sig="instance void set_Type(string )" />
        </Type>
        <Type Name="AuthenticationModuleElementCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class AuthenticationModuleElement get_Item(int )" />
          <Method Sig="instance void set_Item(int , class AuthenticationModuleElement )" />
          <Method Sig="instance class AuthenticationModuleElement get_Item(string )" />
          <Method Sig="instance void set_Item(string , class AuthenticationModuleElement )" />
          <Method Sig="instance void Add(class AuthenticationModuleElement )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int IndexOf(class AuthenticationModuleElement )" />
          <Method Sig="instance void Remove(class AuthenticationModuleElement )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance void RemoveAt(int )" />
        </Type>
        <Type Name="AuthenticationModulesSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class AuthenticationModuleElementCollection get_AuthenticationModules()" />
        </Type>
        <Type Name="BypassElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Address()" />
          <Method Sig="instance void set_Address(string )" />
        </Type>
        <Type Name="BypassElementCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class BypassElement get_Item(int )" />
          <Method Sig="instance void set_Item(int , class BypassElement )" />
          <Method Sig="instance class BypassElement get_Item(string )" />
          <Method Sig="instance void set_Item(string , class BypassElement )" />
          <Method Sig="instance void Add(class BypassElement )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int IndexOf(class BypassElement )" />
          <Method Sig="instance void Remove(class BypassElement )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance void RemoveAt(int )" />
        </Type>
        <Type Name="ConnectionManagementElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , int )" />
          <Method Sig="instance string get_Address()" />
          <Method Sig="instance void set_Address(string )" />
          <Method Sig="instance int get_MaxConnection()" />
          <Method Sig="instance void set_MaxConnection(int )" />
        </Type>
        <Type Name="ConnectionManagementElementCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class ConnectionManagementElement get_Item(int )" />
          <Method Sig="instance void set_Item(int , class ConnectionManagementElement )" />
          <Method Sig="instance class ConnectionManagementElement get_Item(string )" />
          <Method Sig="instance void set_Item(string , class ConnectionManagementElement )" />
          <Method Sig="instance void Add(class ConnectionManagementElement )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int IndexOf(class ConnectionManagementElement )" />
          <Method Sig="instance void Remove(class ConnectionManagementElement )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance void RemoveAt(int )" />
        </Type>
        <Type Name="ConnectionManagementSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class ConnectionManagementElementCollection get_ConnectionManagement()" />
        </Type>
        <Type Name="DefaultProxySection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class BypassElementCollection get_BypassList()" />
          <Method Sig="instance class ModuleElement get_Module()" />
          <Method Sig="instance class ProxyElement get_Proxy()" />
          <Method Sig="instance bool get_Enabled()" />
          <Method Sig="instance void set_Enabled(bool )" />
          <Method Sig="instance bool get_UseDefaultCredentials()" />
          <Method Sig="instance void set_UseDefaultCredentials(bool )" />
        </Type>
        <Type Name="HttpWebRequestElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance int get_MaximumUnauthorizedUploadLength()" />
          <Method Sig="instance void set_MaximumUnauthorizedUploadLength(int )" />
          <Method Sig="instance int get_MaximumErrorResponseLength()" />
          <Method Sig="instance void set_MaximumErrorResponseLength(int )" />
          <Method Sig="instance int get_MaximumResponseHeadersLength()" />
          <Method Sig="instance void set_MaximumResponseHeadersLength(int )" />
          <Method Sig="instance bool get_UseUnsafeHeaderParsing()" />
          <Method Sig="instance void set_UseUnsafeHeaderParsing(bool )" />
        </Type>
        <Type Name="HttpCachePolicyElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct TimeSpan get_MaximumAge()" />
          <Method Sig="instance void set_MaximumAge(struct TimeSpan )" />
          <Method Sig="instance struct TimeSpan get_MaximumStale()" />
          <Method Sig="instance void set_MaximumStale(struct TimeSpan )" />
          <Method Sig="instance struct TimeSpan get_MinimumFresh()" />
          <Method Sig="instance void set_MinimumFresh(struct TimeSpan )" />
          <Method Sig="instance struct HttpRequestCacheLevel get_PolicyLevel()" />
          <Method Sig="instance void set_PolicyLevel(struct HttpRequestCacheLevel )" />
        </Type>
        <Type Name="FtpCachePolicyElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct RequestCacheLevel get_PolicyLevel()" />
          <Method Sig="instance void set_PolicyLevel(struct RequestCacheLevel )" />
        </Type>
        <Type Name="Ipv6Element">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_Enabled()" />
          <Method Sig="instance void set_Enabled(bool )" />
        </Type>
        <Type Name="MailSettingsSectionGroup">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class SmtpSection get_Smtp()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
        </Type>
        <Type Name="ModuleElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance string get_Type()" />
          <Method Sig="instance void set_Type(string )" />
        </Type>
        <Type Name="NetSectionGroup">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class AuthenticationModulesSection get_AuthenticationModules()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class ConnectionManagementSection get_ConnectionManagement()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class DefaultProxySection get_DefaultProxy()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class MailSettingsSectionGroup get_MailSettings()" />
          <Method Sig="class NetSectionGroup GetSectionGroup(class Configuration )" />
          <Method Sig="instance class RequestCachingSection get_RequestCaching()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class SettingsSection get_Settings()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance class WebRequestModulesSection get_WebRequestModules()">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
        </Type>
        <Type Name="PerformanceCountersElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_Enabled()" />
          <Method Sig="instance void set_Enabled(bool )" />
        </Type>
        <Type Name="ProxyElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct AutoDetectValues get_AutoDetect()" />
          <Method Sig="instance void set_AutoDetect(struct AutoDetectValues )" />
          <Method Sig="instance class Uri get_ScriptLocation()" />
          <Method Sig="instance void set_ScriptLocation(class Uri )" />
          <Method Sig="instance struct BypassOnLocalValues get_BypassOnLocal()" />
          <Method Sig="instance void set_BypassOnLocal(struct BypassOnLocalValues )" />
          <Method Sig="instance class Uri get_ProxyAddress()" />
          <Method Sig="instance void set_ProxyAddress(class Uri )" />
          <Method Sig="instance struct UseSystemDefaultValues get_UseSystemDefault()" />
          <Method Sig="instance void set_UseSystemDefault(struct UseSystemDefaultValues )" />
        </Type>
        <Type Name="RequestCachingSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class HttpCachePolicyElement get_DefaultHttpCachePolicy()" />
          <Method Sig="instance class FtpCachePolicyElement get_DefaultFtpCachePolicy()" />
          <Method Sig="instance struct RequestCacheLevel get_DefaultPolicyLevel()" />
          <Method Sig="instance void set_DefaultPolicyLevel(struct RequestCacheLevel )" />
          <Method Sig="instance bool get_DisableAllCaching()" />
          <Method Sig="instance void set_DisableAllCaching(bool )" />
          <Method Sig="instance bool get_IsPrivateCache()" />
          <Method Sig="instance void set_IsPrivateCache(bool )" />
          <Method Sig="instance struct TimeSpan get_UnspecifiedMaximumAge()" />
          <Method Sig="instance void set_UnspecifiedMaximumAge(struct TimeSpan )" />
        </Type>
        <Type Name="SettingsSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class HttpWebRequestElement get_HttpWebRequest()" />
          <Method Sig="instance class Ipv6Element get_Ipv6()" />
          <Method Sig="instance class ServicePointManagerElement get_ServicePointManager()" />
          <Method Sig="instance class SocketElement get_Socket()" />
          <Method Sig="instance class WebProxyScriptElement get_WebProxyScript()" />
          <Method Sig="instance class PerformanceCountersElement get_PerformanceCounters()" />
        </Type>
        <Type Name="ServicePointManagerElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_CheckCertificateName()" />
          <Method Sig="instance void set_CheckCertificateName(bool )" />
          <Method Sig="instance bool get_CheckCertificateRevocationList()" />
          <Method Sig="instance void set_CheckCertificateRevocationList(bool )" />
          <Method Sig="instance int get_DnsRefreshTimeout()" />
          <Method Sig="instance void set_DnsRefreshTimeout(int )" />
          <Method Sig="instance bool get_EnableDnsRoundRobin()" />
          <Method Sig="instance void set_EnableDnsRoundRobin(bool )" />
          <Method Sig="instance bool get_Expect100Continue()" />
          <Method Sig="instance void set_Expect100Continue(bool )" />
          <Method Sig="instance bool get_UseNagleAlgorithm()" />
          <Method Sig="instance void set_UseNagleAlgorithm(bool )" />
        </Type>
        <Type Name="SmtpSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct SmtpDeliveryMethod get_DeliveryMethod()" />
          <Method Sig="instance void set_DeliveryMethod(struct SmtpDeliveryMethod )" />
          <Method Sig="instance string get_From()" />
          <Method Sig="instance void set_From(string )" />
          <Method Sig="instance class SmtpNetworkElement get_Network()" />
          <Method Sig="instance class SmtpSpecifiedPickupDirectoryElement get_SpecifiedPickupDirectory()" />
        </Type>
        <Type Name="SmtpNetworkElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_DefaultCredentials()" />
          <Method Sig="instance void set_DefaultCredentials(bool )" />
          <Method Sig="instance string get_Host()" />
          <Method Sig="instance void set_Host(string )" />
          <Method Sig="instance string get_Password()" />
          <Method Sig="instance void set_Password(string )" />
          <Method Sig="instance int get_Port()" />
          <Method Sig="instance void set_Port(int )" />
          <Method Sig="instance string get_UserName()" />
          <Method Sig="instance void set_UserName(string )" />
        </Type>
        <Type Name="SmtpSpecifiedPickupDirectoryElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance string get_PickupDirectoryLocation()" />
          <Method Sig="instance void set_PickupDirectoryLocation(string )" />
        </Type>
        <Type Name="SocketElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_AlwaysUseCompletionPortsForAccept()" />
          <Method Sig="instance void set_AlwaysUseCompletionPortsForAccept(bool )" />
          <Method Sig="instance bool get_AlwaysUseCompletionPortsForConnect()" />
          <Method Sig="instance void set_AlwaysUseCompletionPortsForConnect(bool )" />
        </Type>
        <Type Name="WebProxyScriptElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct TimeSpan get_DownloadTimeout()" />
          <Method Sig="instance void set_DownloadTimeout(struct TimeSpan )" />
        </Type>
        <Type Name="WebRequestModuleElement">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class Type )" />
          <Method Sig="instance string get_Prefix()" />
          <Method Sig="instance void set_Prefix(string )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
        </Type>
        <Type Name="WebRequestModuleElementCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class WebRequestModuleElement get_Item(int )" />
          <Method Sig="instance void set_Item(int , class WebRequestModuleElement )" />
          <Method Sig="instance class WebRequestModuleElement get_Item(string )" />
          <Method Sig="instance void set_Item(string , class WebRequestModuleElement )" />
          <Method Sig="instance void Add(class WebRequestModuleElement )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance int IndexOf(class WebRequestModuleElement )" />
          <Method Sig="instance void Remove(class WebRequestModuleElement )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance void RemoveAt(int )" />
        </Type>
        <Type Name="WebRequestModulesSection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class WebRequestModuleElementCollection get_WebRequestModules()" />
        </Type>
      </Namespace>
      <Namespace Name="Mail">
        <Type Name="AttachmentBase">
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance class Stream get_ContentStream()" />
          <Method Sig="instance string get_ContentId()" />
          <Method Sig="instance void set_ContentId(string )" />
          <Method Sig="instance class ContentType get_ContentType()" />
          <Method Sig="instance void set_ContentType(class ContentType )" />
          <Method Sig="instance struct TransferEncoding get_TransferEncoding()" />
          <Method Sig="instance void set_TransferEncoding(struct TransferEncoding )" />
        </Type>
        <Type Name="AlternateView">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class ContentType )" />
          <Method Sig="instance void .ctor(class Stream )" />
          <Method Sig="instance void .ctor(class Stream , string )" />
          <Method Sig="instance void .ctor(class Stream , class ContentType )" />
          <Method Sig="instance class LinkedResourceCollection get_LinkedResources()" />
          <Method Sig="instance class Uri get_BaseUri()" />
          <Method Sig="instance void set_BaseUri(class Uri )" />
          <Method Sig="class AlternateView CreateAlternateViewFromString(string )" />
          <Method Sig="class AlternateView CreateAlternateViewFromString(string , class Encoding , string )" />
          <Method Sig="class AlternateView CreateAlternateViewFromString(string , class ContentType )" />
        </Type>
        <Type Name="AlternateViewCollection">
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="Attachment">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class ContentType )" />
          <Method Sig="instance void .ctor(class Stream , string )" />
          <Method Sig="instance void .ctor(class Stream , string , string )" />
          <Method Sig="instance void .ctor(class Stream , class ContentType )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class Encoding get_NameEncoding()" />
          <Method Sig="instance void set_NameEncoding(class Encoding )" />
          <Method Sig="instance class ContentDisposition get_ContentDisposition()" />
          <Method Sig="class Attachment CreateAttachmentFromString(string , string )" />
          <Method Sig="class Attachment CreateAttachmentFromString(string , string , class Encoding , string )" />
          <Method Sig="class Attachment CreateAttachmentFromString(string , class ContentType )" />
        </Type>
        <Type Name="AttachmentCollection">
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="LinkedResource">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , class ContentType )" />
          <Method Sig="instance void .ctor(class Stream )" />
          <Method Sig="instance void .ctor(class Stream , string )" />
          <Method Sig="instance void .ctor(class Stream , class ContentType )" />
          <Method Sig="instance class Uri get_ContentLink()" />
          <Method Sig="instance void set_ContentLink(class Uri )" />
          <Method Sig="class LinkedResource CreateLinkedResourceFromString(string )" />
          <Method Sig="class LinkedResource CreateLinkedResourceFromString(string , class Encoding , string )" />
          <Method Sig="class LinkedResource CreateLinkedResourceFromString(string , class ContentType )" />
        </Type>
        <Type Name="LinkedResourceCollection">
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="MailAddress">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance void .ctor(string , string , class Encoding )" />
          <Method Sig="instance string get_DisplayName()" />
          <Method Sig="instance string get_User()" />
          <Method Sig="instance string get_Host()" />
          <Method Sig="instance string get_Address()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="MailAddressCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void Add(string )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="MailMessage">
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , string , string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class MailAddress , class MailAddress )" />
          <Method Sig="instance class MailAddress get_From()" />
          <Method Sig="instance void set_From(class MailAddress )" />
          <Method Sig="instance class MailAddress get_Sender()" />
          <Method Sig="instance void set_Sender(class MailAddress )" />
          <Method Sig="instance class MailAddress get_ReplyTo()" />
          <Method Sig="instance void set_ReplyTo(class MailAddress )" />
          <Method Sig="instance class MailAddressCollection get_To()" />
          <Method Sig="instance class MailAddressCollection get_Bcc()" />
          <Method Sig="instance class MailAddressCollection get_CC()" />
          <Method Sig="instance struct MailPriority get_Priority()" />
          <Method Sig="instance void set_Priority(struct MailPriority )" />
          <Method Sig="instance struct DeliveryNotificationOptions get_DeliveryNotificationOptions()" />
          <Method Sig="instance void set_DeliveryNotificationOptions(struct DeliveryNotificationOptions )" />
          <Method Sig="instance string get_Subject()" />
          <Method Sig="instance void set_Subject(string )" />
          <Method Sig="instance class Encoding get_SubjectEncoding()" />
          <Method Sig="instance void set_SubjectEncoding(class Encoding )" />
          <Method Sig="instance class NameValueCollection get_Headers()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_Body()" />
          <Method Sig="instance void set_Body(string )" />
          <Method Sig="instance class Encoding get_BodyEncoding()" />
          <Method Sig="instance void set_BodyEncoding(class Encoding )" />
          <Method Sig="instance bool get_IsBodyHtml()" />
          <Method Sig="instance void set_IsBodyHtml(bool )" />
          <Method Sig="instance class AttachmentCollection get_Attachments()" />
          <Method Sig="instance class AlternateViewCollection get_AlternateViews()" />
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="SendCompletedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class AsyncCompletedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCompletedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="SmtpClient">
          <Method Sig="instance void add_SendCompleted(class SendCompletedEventHandler )" />
          <Method Sig="instance void remove_SendCompleted(class SendCompletedEventHandler )" />
          <Method Sig="instance void .ctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Access="ConnectToUnrestrictedPort" class="System.Net.Mail.SmtpPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Access="ConnectToUnrestrictedPort" class="System.Net.Mail.SmtpPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Access="ConnectToUnrestrictedPort" class="System.Net.Mail.SmtpPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_Host()" />
          <Method Sig="instance void set_Host(string )" />
          <Method Sig="instance int get_Port()" />
          <Method Sig="instance void set_Port(int )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Access="ConnectToUnrestrictedPort" class="System.Net.Mail.SmtpPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool get_UseDefaultCredentials()" />
          <Method Sig="instance void set_UseDefaultCredentials(bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="USERNAME" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class ICredentialsByHost get_Credentials()" />
          <Method Sig="instance void set_Credentials(class ICredentialsByHost )" />
          <Method Sig="instance int get_Timeout()" />
          <Method Sig="instance void set_Timeout(int )" />
          <Method Sig="instance class ServicePoint get_ServicePoint()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct SmtpDeliveryMethod get_DeliveryMethod()" />
          <Method Sig="instance void set_DeliveryMethod(struct SmtpDeliveryMethod )" />
          <Method Sig="instance string get_PickupDirectoryLocation()" />
          <Method Sig="instance void set_PickupDirectoryLocation(string )" />
          <Method Sig="instance bool get_EnableSsl()" />
          <Method Sig="instance void set_EnableSsl(bool )" />
          <Method Sig="instance class X509CertificateCollection get_ClientCertificates()" />
          <Method Sig="instance void Send(string , string , string , string )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void Send(class MailMessage )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(string , string , string , string , object )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void SendAsync(class MailMessage , object )">
            <Demand>
              <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
            </Demand>
          </Method>
          <Method Sig="instance void SendAsyncCancel()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
                <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SmtpException">
          <Method Sig="instance void .ctor(struct SmtpStatusCode )" />
          <Method Sig="instance void .ctor(struct SmtpStatusCode , string )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
          <Method Sig="instance struct SmtpStatusCode get_StatusCode()" />
          <Method Sig="instance void set_StatusCode(struct SmtpStatusCode )" />
        </Type>
        <Type Name="SmtpFailedRecipientException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(struct SmtpStatusCode , string )" />
          <Method Sig="instance void .ctor(struct SmtpStatusCode , string , string )" />
          <Method Sig="instance void .ctor(string , string , class Exception )" />
          <Method Sig="instance string get_FailedRecipient()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SmtpFailedRecipientsException">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , [] class SmtpFailedRecipientException )" />
          <Method Sig="instance [] class SmtpFailedRecipientException get_InnerExceptions()" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              </PermissionSet>
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="SmtpPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance string get_Access()" />
          <Method Sig="instance void set_Access(string )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="SmtpPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance void .ctor(struct SmtpAccess )" />
          <Method Sig="instance struct SmtpAccess get_Access()" />
          <Method Sig="instance void AddPermission(struct SmtpAccess )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
          <Method Sig="instance class SecurityElement ToXml()" />
        </Type>
      </Namespace>
      <Namespace Name="Mime">
        <Type Name="ContentDisposition">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_DispositionType()" />
          <Method Sig="instance void set_DispositionType(string )" />
          <Method Sig="instance class StringDictionary get_Parameters()" />
          <Method Sig="instance string get_FileName()" />
          <Method Sig="instance void set_FileName(string )" />
          <Method Sig="instance struct DateTime get_CreationDate()" />
          <Method Sig="instance void set_CreationDate(struct DateTime )" />
          <Method Sig="instance struct DateTime get_ModificationDate()" />
          <Method Sig="instance void set_ModificationDate(struct DateTime )" />
          <Method Sig="instance bool get_Inline()" />
          <Method Sig="instance void set_Inline(bool )" />
          <Method Sig="instance struct DateTime get_ReadDate()" />
          <Method Sig="instance void set_ReadDate(struct DateTime )" />
          <Method Sig="instance in64 get_Size()" />
          <Method Sig="instance void set_Size(in64 )" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="ContentType">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Boundary()" />
          <Method Sig="instance void set_Boundary(string )" />
          <Method Sig="instance string get_CharSet()" />
          <Method Sig="instance void set_CharSet(string )" />
          <Method Sig="instance string get_MediaType()" />
          <Method Sig="instance void set_MediaType(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class StringDictionary get_Parameters()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="void .cctor()" />
        </Type>
      </Namespace>
    </Namespace>
    <Namespace Name="Configuration">
      <Type Name="SettingsBase">
        <Method Sig="instance object get_Item(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Item(string , object )" />
        <Method Sig="instance void Initialize(class SettingsContext , class SettingsPropertyCollection , class SettingsProviderCollection )" />
        <Method Sig="instance void Save()" />
        <Method Sig="instance class SettingsPropertyCollection get_Properties()" />
        <Method Sig="instance class SettingsProviderCollection get_Providers()" />
        <Method Sig="instance class SettingsPropertyValueCollection get_PropertyValues()" />
        <Method Sig="instance class SettingsContext get_Context()" />
        <Method Sig="class SettingsBase Synchronized(class SettingsBase )" />
        <Method Sig="instance bool get_IsSynchronized()" />
      </Type>
      <Type Name="ApplicationSettingsBase">
        <Method Sig="instance class SettingsContext get_Context()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class SettingsPropertyCollection get_Properties()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class SettingsPropertyValueCollection get_PropertyValues()" />
        <Method Sig="instance class SettingsProviderCollection get_Providers()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_SettingsKey()" />
        <Method Sig="instance void set_SettingsKey(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_PropertyChanged(class PropertyChangedEventHandler )" />
        <Method Sig="instance void remove_PropertyChanged(class PropertyChangedEventHandler )" />
        <Method Sig="instance void add_SettingChanging(class SettingChangingEventHandler )" />
        <Method Sig="instance void remove_SettingChanging(class SettingChangingEventHandler )" />
        <Method Sig="instance void add_SettingsLoaded(class SettingsLoadedEventHandler )" />
        <Method Sig="instance void remove_SettingsLoaded(class SettingsLoadedEventHandler )" />
        <Method Sig="instance void add_SettingsSaving(class SettingsSavingEventHandler )" />
        <Method Sig="instance void remove_SettingsSaving(class SettingsSavingEventHandler )" />
        <Method Sig="instance object GetPreviousVersion(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Reload()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Reset()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Save()" />
        <Method Sig="instance object get_Item(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Item(string , object )" />
        <Method Sig="instance void Upgrade()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="SettingsLoadedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class SettingsLoadedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class SettingsLoadedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SettingsSavingEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class CancelEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class CancelEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SettingChangingEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class SettingChangingEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class SettingChangingEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SettingChangingEventArgs">
        <Method Sig="instance void .ctor(string , string , string , object , bool )" />
        <Method Sig="instance object get_NewValue()" />
        <Method Sig="instance string get_SettingClass()" />
        <Method Sig="instance string get_SettingName()" />
        <Method Sig="instance string get_SettingKey()" />
      </Type>
      <Type Name="SettingsLoadedEventArgs">
        <Method Sig="instance void .ctor(class SettingsProvider )" />
        <Method Sig="instance class SettingsProvider get_Provider()" />
      </Type>
      <Type Name="ConfigurationException">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , class XmlNode )" />
        <Method Sig="instance void .ctor(string , class Exception , class XmlNode )" />
        <Method Sig="instance void .ctor(string , string , int )" />
        <Method Sig="instance void .ctor(string , class Exception , string , int )" />
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Message()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_BareMessage()" />
        <Method Sig="instance string get_Filename()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int get_Line()" />
        <Method Sig="string GetXmlNodeFilename(class XmlNode )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="int GetXmlNodeLineNumber(class XmlNode )" />
      </Type>
      <Type Name="ConfigurationSettings">
        <Method Sig="class NameValueCollection get_AppSettings()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="object GetConfig(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="ConfigXmlDocument">
        <Method Sig="instance int get_LineNumber()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance string get_Filename()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Load(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void LoadSingleElement(string , class XmlTextReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlAttribute CreateAttribute(string , string , string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlElement CreateElement(string , string , string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlText CreateTextNode(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlCDataSection CreateCDataSection(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlComment CreateComment(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlSignificantWhitespace CreateSignificantWhitespace(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class XmlWhitespace CreateWhitespace(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="DictionarySectionHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="IgnoreSectionHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsProvider">
        <Method Sig="instance class SettingsPropertyValueCollection GetPropertyValues(class SettingsContext , class SettingsPropertyCollection )" />
        <Method Sig="instance void SetPropertyValues(class SettingsContext , class SettingsPropertyValueCollection )" />
        <Method Sig="instance string get_ApplicationName()" />
        <Method Sig="instance void set_ApplicationName(string )" />
      </Type>
      <Type Name="LocalFileSettingsProvider">
        <Method Sig="instance string get_ApplicationName()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_ApplicationName(string )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Initialize(string , class NameValueCollection )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class SettingsPropertyValueCollection GetPropertyValues(class SettingsContext , class SettingsPropertyCollection )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void SetPropertyValues(class SettingsContext , class SettingsPropertyValueCollection )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Reset(class SettingsContext )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void Upgrade(class SettingsContext , class SettingsPropertyCollection )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class SettingsPropertyValue GetPreviousVersion(class SettingsContext , class SettingsProperty )">
          <Demand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="NameValueFileSectionHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="NameValueSectionHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsAttributeDictionary">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class SettingsAttributeDictionary )" />
      </Type>
      <Type Name="SettingAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ApplicationScopedSettingAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="DefaultSettingValueAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Value()" />
      </Type>
      <Type Name="NoSettingsVersionUpgradeAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsDescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
      <Type Name="SettingsGroupDescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
      <Type Name="SettingsGroupNameAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_GroupName()" />
      </Type>
      <Type Name="SettingsManageabilityAttribute">
        <Method Sig="instance void .ctor(struct SettingsManageability )" />
        <Method Sig="instance struct SettingsManageability get_Manageability()" />
      </Type>
      <Type Name="SettingsProviderAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance string get_ProviderTypeName()" />
      </Type>
      <Type Name="SettingsSerializeAsAttribute">
        <Method Sig="instance void .ctor(struct SettingsSerializeAs )" />
        <Method Sig="instance struct SettingsSerializeAs get_SerializeAs()" />
      </Type>
      <Type Name="SpecialSettingAttribute">
        <Method Sig="instance void .ctor(struct SpecialSetting )" />
        <Method Sig="instance struct SpecialSetting get_SpecialSetting()" />
      </Type>
      <Type Name="UserScopedSettingAttribute">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsContext">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsProperty">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance void set_IsReadOnly(bool )" />
        <Method Sig="instance object get_DefaultValue()" />
        <Method Sig="instance void set_DefaultValue(object )" />
        <Method Sig="instance class Type get_PropertyType()" />
        <Method Sig="instance void set_PropertyType(class Type )" />
        <Method Sig="instance struct SettingsSerializeAs get_SerializeAs()" />
        <Method Sig="instance void set_SerializeAs(struct SettingsSerializeAs )" />
        <Method Sig="instance class SettingsProvider get_Provider()" />
        <Method Sig="instance void set_Provider(class SettingsProvider )" />
        <Method Sig="instance class SettingsAttributeDictionary get_Attributes()" />
        <Method Sig="instance bool get_ThrowOnErrorDeserializing()" />
        <Method Sig="instance void set_ThrowOnErrorDeserializing(bool )" />
        <Method Sig="instance bool get_ThrowOnErrorSerializing()" />
        <Method Sig="instance void set_ThrowOnErrorSerializing(bool )" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Type , class SettingsProvider , bool , object , struct SettingsSerializeAs , class SettingsAttributeDictionary , bool , bool )" />
        <Method Sig="instance void .ctor(class SettingsProperty )" />
      </Type>
      <Type Name="SettingsPropertyCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void Add(class SettingsProperty )" />
        <Method Sig="instance void Remove(string )" />
        <Method Sig="instance class SettingsProperty get_Item(string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void SetReadOnly()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
      </Type>
      <Type Name="SettingsPropertyIsReadOnlyException">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsPropertyNotFoundException">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsPropertyValue">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool get_IsDirty()" />
        <Method Sig="instance void set_IsDirty(bool )" />
        <Method Sig="instance class SettingsProperty get_Property()" />
        <Method Sig="instance bool get_UsingDefaultValue()" />
        <Method Sig="instance void .ctor(class SettingsProperty )" />
        <Method Sig="instance object get_PropertyValue()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_PropertyValue(object )" />
        <Method Sig="instance object get_SerializedValue()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" PathDiscovery="*AllFiles*" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" />
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="UnmanagedCode, ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_SerializedValue(object )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="SerializationFormatter" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_Deserialized()" />
        <Method Sig="instance void set_Deserialized(bool )" />
      </Type>
      <Type Name="SettingsPropertyValueCollection">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void Add(class SettingsPropertyValue )" />
        <Method Sig="instance void Remove(string )" />
        <Method Sig="instance class SettingsPropertyValue get_Item(string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void SetReadOnly()" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance bool get_IsSynchronized()" />
        <Method Sig="instance object get_SyncRoot()" />
        <Method Sig="instance void CopyTo(class Array , int )" />
      </Type>
      <Type Name="SettingsPropertyWrongTypeException">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingsProviderCollection">
        <Method Sig="instance void Add(class ProviderBase )" />
        <Method Sig="instance class SettingsProvider get_Item(string )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SingleTagSectionHandler">
        <Method Sig="instance object Create(object , object , class XmlNode )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ApplicationSettingsGroup">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="UserSettingsGroup">
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ClientSettingsSection">
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class SettingElementCollection get_Settings()" />
      </Type>
      <Type Name="SettingElementCollection">
        <Method Sig="instance struct ConfigurationElementCollectionType get_CollectionType()" />
        <Method Sig="instance class SettingElement Get(string )" />
        <Method Sig="instance void Add(class SettingElement )" />
        <Method Sig="instance void Remove(class SettingElement )" />
        <Method Sig="instance void Clear()" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SettingElement">
        <Method Sig="void .cctor()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string , struct SettingsSerializeAs )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance void set_Name(string )" />
        <Method Sig="instance struct SettingsSerializeAs get_SerializeAs()" />
        <Method Sig="instance void set_SerializeAs(struct SettingsSerializeAs )" />
        <Method Sig="instance class SettingValueElement get_Value()" />
        <Method Sig="instance void set_Value(class SettingValueElement )" />
      </Type>
      <Type Name="SettingValueElement">
        <Method Sig="instance class XmlNode get_ValueXml()" />
        <Method Sig="instance void set_ValueXml(class XmlNode )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="AppSettingsReader">
        <Method Sig="instance void .ctor()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" Flags="MemberAccess" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Flags="ControlEvidence" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <IPermission version="1" Unrestricted="true" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance object GetValue(string , class Type )" />
        <Method Sig="void .cctor()" />
      </Type>
    </Namespace>
    <Namespace Name="Timers">
      <Type Name="ElapsedEventArgs">
        <Method Sig="instance struct DateTime get_SignalTime()" />
      </Type>
      <Type Name="ElapsedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class ElapsedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class ElapsedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="Timer">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(double )" />
        <Method Sig="instance bool get_AutoReset()" />
        <Method Sig="instance void set_AutoReset(bool )" />
        <Method Sig="instance bool get_Enabled()" />
        <Method Sig="instance void set_Enabled(bool )" />
        <Method Sig="instance double get_Interval()" />
        <Method Sig="instance void set_Interval(double )" />
        <Method Sig="instance void add_Elapsed(class ElapsedEventHandler )" />
        <Method Sig="instance void remove_Elapsed(class ElapsedEventHandler )" />
        <Method Sig="instance void set_Site(class ISite )" />
        <Method Sig="instance class ISite get_Site()" />
        <Method Sig="instance class ISynchronizeInvoke get_SynchronizingObject()" />
        <Method Sig="instance void set_SynchronizingObject(class ISynchronizeInvoke )" />
        <Method Sig="instance void BeginInit()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void EndInit()" />
        <Method Sig="instance void Start()" />
        <Method Sig="instance void Stop()" />
      </Type>
      <Type Name="TimersDescriptionAttribute">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance string get_Description()" />
      </Type>
    </Namespace>
    <Namespace Name="Web">
      <Type Name="AspNetHostingPermissionAttribute">
        <Method Sig="instance void .ctor(struct SecurityAction )" />
        <Method Sig="instance struct AspNetHostingPermissionLevel get_Level()" />
        <Method Sig="instance void set_Level(struct AspNetHostingPermissionLevel )" />
        <Method Sig="instance class IPermission CreatePermission()" />
      </Type>
      <Type Name="AspNetHostingPermission">
        <Method Sig="instance void .ctor(struct PermissionState )" />
        <Method Sig="instance void .ctor(struct AspNetHostingPermissionLevel )" />
        <Method Sig="instance struct AspNetHostingPermissionLevel get_Level()" />
        <Method Sig="instance void set_Level(struct AspNetHostingPermissionLevel )" />
        <Method Sig="instance bool IsUnrestricted()" />
        <Method Sig="instance class IPermission Copy()" />
        <Method Sig="instance class IPermission Union(class IPermission )" />
        <Method Sig="instance class IPermission Intersect(class IPermission )" />
        <Method Sig="instance bool IsSubsetOf(class IPermission )" />
        <Method Sig="instance void FromXml(class SecurityElement )" />
        <Method Sig="instance class SecurityElement ToXml()" />
      </Type>
    </Namespace>
  </Namespace>
  <Type Name="StandardValuesCollection">
    <Method Sig="instance void .ctor(class ICollection )" />
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance object get_Item(int )" />
    <Method Sig="instance void CopyTo(class Array , int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
  </Type>
  <Type Name="DesignerOptionCollection">
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance string get_Name()" />
    <Method Sig="instance class DesignerOptionCollection get_Parent()" />
    <Method Sig="instance class PropertyDescriptorCollection get_Properties()" />
    <Method Sig="instance class DesignerOptionCollection get_Item(int )" />
    <Method Sig="instance class DesignerOptionCollection get_Item(string )" />
    <Method Sig="instance void CopyTo(class Array , int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance int IndexOf(class DesignerOptionCollection )" />
    <Method Sig="instance bool ShowDialog()" />
  </Type>
  <Type Name="Enumerator">
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance !1 get_Current()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance void Dispose()" />
    <Method Sig="instance !0 get_Current()" />
    <Method Sig="void .cctor()" />
  </Type>
  <Type Name="KeyCollection">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance GetEnumerator()" />
    <Method Sig="instance void CopyTo([] !0, int )" />
    <Method Sig="instance int get_Count()" />
  </Type>
  <Type Name="ValueCollection">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance GetEnumerator()" />
    <Method Sig="instance void CopyTo([] !1, int )" />
    <Method Sig="instance int get_Count()" />
  </Type>
  <Type Name="Section">
    <Method Sig="instance short get_Mask()" />
    <Method Sig="instance short get_Offset()" />
    <Method Sig="instance bool Equals(object )" />
    <Method Sig="instance bool Equals(struct Section )" />
    <Method Sig="bool op_Equality(struct Section , struct Section )" />
    <Method Sig="bool op_Inequality(struct Section , struct Section )" />
    <Method Sig="instance int GetHashCode()" />
    <Method Sig="string ToString(struct Section )" />
    <Method Sig="instance string ToString()" />
  </Type>
  <Type Name="KeysCollection">
    <Method Sig="instance string Get(int )" />
    <Method Sig="instance string get_Item(int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance int get_Count()" />
  </Type>
  <Type Name="WndProc">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance intptr Invoke(intptr , int , intptr , intptr )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(intptr , int , intptr , intptr , class AsyncCallback , object )" />
    <Method Sig="instance intptr EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="ConHndlr">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance int Invoke(int )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(int , class AsyncCallback , object )" />
    <Method Sig="instance int EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="PDH_RAW_COUNTER">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="PDH_FMT_COUNTERVALUE">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Namespace Name="Microsoft">
    <Namespace Name="Win32">
      <Type Name="PowerModeChangedEventArgs">
        <Method Sig="instance void .ctor(struct PowerModes )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct PowerModes get_Mode()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="PowerModeChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class PowerModeChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class PowerModeChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SessionEndedEventArgs">
        <Method Sig="instance void .ctor(struct SessionEndReasons )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct SessionEndReasons get_Reason()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="SessionEndedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class SessionEndedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class SessionEndedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SessionEndingEventArgs">
        <Method Sig="instance void .ctor(struct SessionEndReasons )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance bool get_Cancel()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void set_Cancel(bool )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct SessionEndReasons get_Reason()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="SessionEndingEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class SessionEndingEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class SessionEndingEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SessionSwitchEventArgs">
        <Method Sig="instance void .ctor(struct SessionSwitchReason )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct SessionSwitchReason get_Reason()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="SessionSwitchEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class SessionSwitchEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class SessionSwitchEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="SystemEvents">
        <Method Sig="void add_DisplaySettingsChanging(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_DisplaySettingsChanging(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_DisplaySettingsChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_DisplaySettingsChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_EventsThreadShutdown(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_EventsThreadShutdown(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_InstalledFontsChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_InstalledFontsChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_LowMemory(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_LowMemory(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_PaletteChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_PaletteChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_PowerModeChanged(class PowerModeChangedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_PowerModeChanged(class PowerModeChangedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_SessionEnded(class SessionEndedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_SessionEnded(class SessionEndedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_SessionEnding(class SessionEndingEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_SessionEnding(class SessionEndingEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_SessionSwitch(class SessionSwitchEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_SessionSwitch(class SessionSwitchEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_TimeChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_TimeChanged(class EventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_TimerElapsed(class TimerElapsedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_TimerElapsed(class TimerElapsedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_UserPreferenceChanged(class UserPreferenceChangedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_UserPreferenceChanged(class UserPreferenceChangedEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void add_UserPreferenceChanging(class UserPreferenceChangingEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void remove_UserPreferenceChanging(class UserPreferenceChangingEventHandler )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="intptr CreateTimer(int )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void InvokeOnEventsThread(class Delegate )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void KillTimer(intptr )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="void .cctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="TimerElapsedEventArgs">
        <Method Sig="instance void .ctor(intptr )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr get_TimerId()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="TimerElapsedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class TimerElapsedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class TimerElapsedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UserPreferenceChangedEventArgs">
        <Method Sig="instance void .ctor(struct UserPreferenceCategory )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct UserPreferenceCategory get_Category()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="UserPreferenceChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UserPreferenceChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UserPreferenceChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="UserPreferenceChangingEventArgs">
        <Method Sig="instance void .ctor(struct UserPreferenceCategory )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct UserPreferenceCategory get_Category()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
      <Type Name="UserPreferenceChangingEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class UserPreferenceChangingEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class UserPreferenceChangingEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="IntranetZoneCredentialPolicy">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool ShouldSendCredential(class Uri , class WebRequest , class NetworkCredential , class IAuthenticationModule )" />
      </Type>
    </Namespace>
    <Namespace Name="CSharp">
      <Type Name="CSharpCodeProvider">
        <Method Sig="instance string get_FileExtension()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ICodeGenerator CreateGenerator()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ICodeCompiler CreateCompiler()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class TypeConverter GetConverter(class Type )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void GenerateCodeFromMember(class CodeTypeMember , class TextWriter , class CodeGeneratorOptions )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
    </Namespace>
    <Namespace Name="VisualBasic">
      <Type Name="VBCodeProvider">
        <Method Sig="instance string get_FileExtension()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance struct LanguageOptions get_LanguageOptions()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ICodeGenerator CreateGenerator()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class ICodeCompiler CreateCompiler()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance class TypeConverter GetConverter(class Type )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void GenerateCodeFromMember(class CodeTypeMember , class TextWriter , class CodeGeneratorOptions )">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor()">
          <LinkDemand>
            <PermissionSet version="1" Unrestricted="true" class="System.Security.PermissionSet" />
          </LinkDemand>
        </Method>
      </Type>
    </Namespace>
  </Namespace>
  <Type Name="X509CertificateEnumerator">
    <Method Sig="instance void .ctor(class X509CertificateCollection )" />
    <Method Sig="instance class X509Certificate get_Current()" />
    <Method Sig="instance bool MoveNext()" />
    <Method Sig="instance void Reset()" />
  </Type>
</Assembly>
