<?xml version="1.0"?>
<Assembly>
  <Namespace Name="System">
    <Namespace Name="Xml">
      <Type Name="XmlNameTable">
        <Method Sig="instance string Get([] char , int , int )" />
        <Method Sig="instance string Get(string )" />
        <Method Sig="instance string Add([] char , int , int )" />
        <Method Sig="instance string Add(string )" />
      </Type>
      <Type Name="NameTable">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance string Add(string )" />
        <Method Sig="instance string Add([] char , int , int )" />
        <Method Sig="instance string Get(string )" />
        <Method Sig="instance string Get([] char , int , int )" />
      </Type>
      <Type Name="XmlConvert">
        <Method Sig="string EncodeName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string EncodeNmToken(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string EncodeLocalName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string DecodeName(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="string VerifyName(string )" />
        <Method Sig="string VerifyNCName(string )" />
        <Method Sig="string VerifyTOKEN(string )" />
        <Method Sig="string VerifyNMTOKEN(string )" />
        <Method Sig="string ToString(bool )" />
        <Method Sig="string ToString(char )" />
        <Method Sig="string ToString(struct Decimal )" />
        <Method Sig="string ToString(sbyte )" />
        <Method Sig="string ToString(short )" />
        <Method Sig="string ToString(int )" />
        <Method Sig="string ToString(in64 )" />
        <Method Sig="string ToString(byte )" />
        <Method Sig="string ToString(ushort )" />
        <Method Sig="string ToString(uint )" />
        <Method Sig="string ToString(uint64 )" />
        <Method Sig="string ToString(float )" />
        <Method Sig="string ToString(double )" />
        <Method Sig="string ToString(struct TimeSpan )" />
        <Method Sig="string ToString(struct DateTime )" />
        <Method Sig="string ToString(struct DateTime , string )" />
        <Method Sig="string ToString(struct DateTime , struct XmlDateTimeSerializationMode )" />
        <Method Sig="string ToString(struct Guid )" />
        <Method Sig="bool ToBoolean(string )" />
        <Method Sig="char ToChar(string )" />
        <Method Sig="struct Decimal ToDecimal(string )" />
        <Method Sig="sbyte ToSByte(string )" />
        <Method Sig="short ToInt16(string )" />
        <Method Sig="int ToInt32(string )" />
        <Method Sig="in64 ToInt64(string )" />
        <Method Sig="byte ToByte(string )" />
        <Method Sig="ushort ToUInt16(string )" />
        <Method Sig="uint ToUInt32(string )" />
        <Method Sig="uint64 ToUInt64(string )" />
        <Method Sig="float ToSingle(string )" />
        <Method Sig="double ToDouble(string )" />
        <Method Sig="struct TimeSpan ToTimeSpan(string )" />
        <Method Sig="struct DateTime ToDateTime(string )" />
        <Method Sig="struct DateTime ToDateTime(string , string )" />
        <Method Sig="struct DateTime ToDateTime(string , [] string )" />
        <Method Sig="struct DateTime ToDateTime(string , struct XmlDateTimeSerializationMode )" />
        <Method Sig="struct Guid ToGuid(string )" />
        <Method Sig="instance void .ctor()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlException">
        <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class Exception )" />
        <Method Sig="instance void .ctor(string , class Exception , int , int )" />
        <Method Sig="instance int get_LineNumber()" />
        <Method Sig="instance int get_LinePosition()" />
        <Method Sig="instance string get_SourceUri()" />
        <Method Sig="instance string get_Message()" />
      </Type>
      <Type Name="XmlNamespaceManager">
        <Method Sig="instance void .ctor(class XmlNameTable )" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance string get_DefaultNamespace()" />
        <Method Sig="instance void PushScope()" />
        <Method Sig="instance bool PopScope()" />
        <Method Sig="instance void AddNamespace(string , string )" />
        <Method Sig="instance void RemoveNamespace(string , string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance GetNamespacesInScope(class IDictionary`2 )" />
        <Method Sig="instance string LookupNamespace(string )" />
        <Method Sig="instance string LookupPrefix(string )" />
        <Method Sig="instance bool HasNamespace(string )" />
      </Type>
      <Type Name="XmlResolver">
        <Method Sig="instance object GetEntity(class Uri , string , class Type )" />
        <Method Sig="instance class Uri ResolveUri(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void set_Credentials(class ICredentials )" />
      </Type>
      <Type Name="XmlUrlResolver">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance object GetEntity(class Uri , string , class Type )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
              <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class Uri ResolveUri(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="XmlQualifiedName">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , string )" />
        <Method Sig="instance string get_Namespace()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="bool op_Equality(class XmlQualifiedName , class XmlQualifiedName )" />
        <Method Sig="bool op_Inequality(class XmlQualifiedName , class XmlQualifiedName )" />
        <Method Sig="string ToString(string , string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlSecureResolver">
        <Method Sig="instance void .ctor(class XmlResolver , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class XmlResolver , class Evidence )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class XmlResolver , class PermissionSet )" />
        <Method Sig="instance void set_Credentials(class ICredentials )" />
        <Method Sig="instance object GetEntity(class Uri , string , class Type )" />
        <Method Sig="instance class Uri ResolveUri(class Uri , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Evidence CreateEvidenceForUrl(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
            </PermissionSet>
          </Demand>
        </Method>
      </Type>
      <Type Name="XmlWriter">
        <Method Sig="instance class XmlWriterSettings get_Settings()" />
        <Method Sig="instance void WriteStartDocument()" />
        <Method Sig="instance void WriteStartDocument(bool )" />
        <Method Sig="instance void WriteEndDocument()" />
        <Method Sig="instance void WriteDocType(string , string , string , string )" />
        <Method Sig="instance void WriteStartElement(string , string )" />
        <Method Sig="instance void WriteStartElement(string , string , string )" />
        <Method Sig="instance void WriteStartElement(string )" />
        <Method Sig="instance void WriteEndElement()" />
        <Method Sig="instance void WriteFullEndElement()" />
        <Method Sig="instance void WriteAttributeString(string , string , string )" />
        <Method Sig="instance void WriteAttributeString(string , string )" />
        <Method Sig="instance void WriteAttributeString(string , string , string , string )" />
        <Method Sig="instance void WriteStartAttribute(string , string )" />
        <Method Sig="instance void WriteStartAttribute(string , string , string )" />
        <Method Sig="instance void WriteStartAttribute(string )" />
        <Method Sig="instance void WriteEndAttribute()" />
        <Method Sig="instance void WriteCData(string )" />
        <Method Sig="instance void WriteComment(string )" />
        <Method Sig="instance void WriteProcessingInstruction(string , string )" />
        <Method Sig="instance void WriteEntityRef(string )" />
        <Method Sig="instance void WriteCharEntity(char )" />
        <Method Sig="instance void WriteWhitespace(string )" />
        <Method Sig="instance void WriteString(string )" />
        <Method Sig="instance void WriteSurrogateCharEntity(char , char )" />
        <Method Sig="instance void WriteChars([] char , int , int )" />
        <Method Sig="instance void WriteRaw([] char , int , int )" />
        <Method Sig="instance void WriteRaw(string )" />
        <Method Sig="instance void WriteBase64([] byte , int , int )" />
        <Method Sig="instance void WriteBinHex([] byte , int , int )" />
        <Method Sig="instance struct WriteState get_WriteState()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance string LookupPrefix(string )" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance void WriteNmToken(string )" />
        <Method Sig="instance void WriteName(string )" />
        <Method Sig="instance void WriteQualifiedName(string , string )" />
        <Method Sig="instance void WriteValue(object )" />
        <Method Sig="instance void WriteValue(string )" />
        <Method Sig="instance void WriteValue(bool )" />
        <Method Sig="instance void WriteValue(struct DateTime )" />
        <Method Sig="instance void WriteValue(double )" />
        <Method Sig="instance void WriteValue(float )" />
        <Method Sig="instance void WriteValue(struct Decimal )" />
        <Method Sig="instance void WriteValue(int )" />
        <Method Sig="instance void WriteValue(in64 )" />
        <Method Sig="instance void WriteAttributes(class XmlReader , bool )" />
        <Method Sig="instance void WriteNode(class XmlReader , bool )" />
        <Method Sig="instance void WriteNode(class XPathNavigator , bool )" />
        <Method Sig="instance void WriteElementString(string , string )" />
        <Method Sig="instance void WriteElementString(string , string , string )" />
        <Method Sig="instance void WriteElementString(string , string , string , string )" />
        <Method Sig="class XmlWriter Create(string )" />
        <Method Sig="class XmlWriter Create(string , class XmlWriterSettings )" />
        <Method Sig="class XmlWriter Create(class Stream )" />
        <Method Sig="class XmlWriter Create(class Stream , class XmlWriterSettings )" />
        <Method Sig="class XmlWriter Create(class TextWriter )" />
        <Method Sig="class XmlWriter Create(class TextWriter , class XmlWriterSettings )" />
        <Method Sig="class XmlWriter Create(class StringBuilder )" />
        <Method Sig="class XmlWriter Create(class StringBuilder , class XmlWriterSettings )" />
        <Method Sig="class XmlWriter Create(class XmlWriter )" />
        <Method Sig="class XmlWriter Create(class XmlWriter , class XmlWriterSettings )" />
      </Type>
      <Type Name="XmlReader">
        <Method Sig="instance class XmlReaderSettings get_Settings()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance bool get_HasValue()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance int get_Depth()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance bool get_IsEmptyElement()" />
        <Method Sig="instance bool get_IsDefault()" />
        <Method Sig="instance char get_QuoteChar()" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance class Type get_ValueType()" />
        <Method Sig="instance object ReadContentAsObject()" />
        <Method Sig="instance bool ReadContentAsBoolean()" />
        <Method Sig="instance struct DateTime ReadContentAsDateTime()" />
        <Method Sig="instance double ReadContentAsDouble()" />
        <Method Sig="instance float ReadContentAsFloat()" />
        <Method Sig="instance struct Decimal ReadContentAsDecimal()" />
        <Method Sig="instance int ReadContentAsInt()" />
        <Method Sig="instance in64 ReadContentAsLong()" />
        <Method Sig="instance string ReadContentAsString()" />
        <Method Sig="instance object ReadContentAs(class Type , class IXmlNamespaceResolver )" />
        <Method Sig="instance object ReadElementContentAsObject()" />
        <Method Sig="instance object ReadElementContentAsObject(string , string )" />
        <Method Sig="instance bool ReadElementContentAsBoolean()" />
        <Method Sig="instance bool ReadElementContentAsBoolean(string , string )" />
        <Method Sig="instance struct DateTime ReadElementContentAsDateTime()" />
        <Method Sig="instance struct DateTime ReadElementContentAsDateTime(string , string )" />
        <Method Sig="instance double ReadElementContentAsDouble()" />
        <Method Sig="instance double ReadElementContentAsDouble(string , string )" />
        <Method Sig="instance float ReadElementContentAsFloat()" />
        <Method Sig="instance float ReadElementContentAsFloat(string , string )" />
        <Method Sig="instance struct Decimal ReadElementContentAsDecimal()" />
        <Method Sig="instance struct Decimal ReadElementContentAsDecimal(string , string )" />
        <Method Sig="instance int ReadElementContentAsInt()" />
        <Method Sig="instance int ReadElementContentAsInt(string , string )" />
        <Method Sig="instance in64 ReadElementContentAsLong()" />
        <Method Sig="instance in64 ReadElementContentAsLong(string , string )" />
        <Method Sig="instance string ReadElementContentAsString()" />
        <Method Sig="instance string ReadElementContentAsString(string , string )" />
        <Method Sig="instance object ReadElementContentAs(class Type , class IXmlNamespaceResolver )" />
        <Method Sig="instance object ReadElementContentAs(class Type , class IXmlNamespaceResolver , string , string )" />
        <Method Sig="instance int get_AttributeCount()" />
        <Method Sig="instance string GetAttribute(string )" />
        <Method Sig="instance string GetAttribute(string , string )" />
        <Method Sig="instance string GetAttribute(int )" />
        <Method Sig="instance string get_Item(int )" />
        <Method Sig="instance string get_Item(string )" />
        <Method Sig="instance string get_Item(string , string )" />
        <Method Sig="instance bool MoveToAttribute(string )" />
        <Method Sig="instance bool MoveToAttribute(string , string )" />
        <Method Sig="instance void MoveToAttribute(int )" />
        <Method Sig="instance bool MoveToFirstAttribute()" />
        <Method Sig="instance bool MoveToNextAttribute()" />
        <Method Sig="instance bool MoveToElement()" />
        <Method Sig="instance bool ReadAttributeValue()" />
        <Method Sig="instance bool Read()" />
        <Method Sig="instance bool get_EOF()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance struct ReadState get_ReadState()" />
        <Method Sig="instance void Skip()" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance string LookupNamespace(string )" />
        <Method Sig="instance bool get_CanResolveEntity()" />
        <Method Sig="instance void ResolveEntity()" />
        <Method Sig="instance bool get_CanReadBinaryContent()" />
        <Method Sig="instance int ReadContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance bool get_CanReadValueChunk()" />
        <Method Sig="instance int ReadValueChunk([] char , int , int )" />
        <Method Sig="instance string ReadString()" />
        <Method Sig="instance struct XmlNodeType MoveToContent()" />
        <Method Sig="instance void ReadStartElement()" />
        <Method Sig="instance void ReadStartElement(string )" />
        <Method Sig="instance void ReadStartElement(string , string )" />
        <Method Sig="instance string ReadElementString()" />
        <Method Sig="instance string ReadElementString(string )" />
        <Method Sig="instance string ReadElementString(string , string )" />
        <Method Sig="instance void ReadEndElement()" />
        <Method Sig="instance bool IsStartElement()" />
        <Method Sig="instance bool IsStartElement(string )" />
        <Method Sig="instance bool IsStartElement(string , string )" />
        <Method Sig="instance bool ReadToFollowing(string )" />
        <Method Sig="instance bool ReadToFollowing(string , string )" />
        <Method Sig="instance bool ReadToDescendant(string )" />
        <Method Sig="instance bool ReadToDescendant(string , string )" />
        <Method Sig="instance bool ReadToNextSibling(string )" />
        <Method Sig="instance bool ReadToNextSibling(string , string )" />
        <Method Sig="bool IsName(string )" />
        <Method Sig="bool IsNameToken(string )" />
        <Method Sig="instance string ReadInnerXml()" />
        <Method Sig="instance string ReadOuterXml()" />
        <Method Sig="instance class XmlReader ReadSubtree()" />
        <Method Sig="instance bool get_HasAttributes()" />
        <Method Sig="class XmlReader Create(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
              <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(string , class XmlReaderSettings )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
              <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(string , class XmlReaderSettings , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
              <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class Stream )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class Stream , class XmlReaderSettings )" />
        <Method Sig="class XmlReader Create(class Stream , class XmlReaderSettings , string )" />
        <Method Sig="class XmlReader Create(class Stream , class XmlReaderSettings , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class TextReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class TextReader , class XmlReaderSettings )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class TextReader , class XmlReaderSettings , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class TextReader , class XmlReaderSettings , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class XmlReader Create(class XmlReader , class XmlReaderSettings )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlParserContext">
        <Method Sig="instance void .ctor(class XmlNameTable , class XmlNamespaceManager , string , struct XmlSpace )" />
        <Method Sig="instance void .ctor(class XmlNameTable , class XmlNamespaceManager , string , struct XmlSpace , class Encoding )" />
        <Method Sig="instance void .ctor(class XmlNameTable , class XmlNamespaceManager , string , string , string , string , string , string , struct XmlSpace )" />
        <Method Sig="instance void .ctor(class XmlNameTable , class XmlNamespaceManager , string , string , string , string , string , string , struct XmlSpace , class Encoding )" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance void set_NameTable(class XmlNameTable )" />
        <Method Sig="instance class XmlNamespaceManager get_NamespaceManager()" />
        <Method Sig="instance void set_NamespaceManager(class XmlNamespaceManager )" />
        <Method Sig="instance string get_DocTypeName()" />
        <Method Sig="instance void set_DocTypeName(string )" />
        <Method Sig="instance string get_PublicId()" />
        <Method Sig="instance void set_PublicId(string )" />
        <Method Sig="instance string get_SystemId()" />
        <Method Sig="instance void set_SystemId(string )" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance void set_BaseURI(string )" />
        <Method Sig="instance string get_InternalSubset()" />
        <Method Sig="instance void set_InternalSubset(string )" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance void set_XmlLang(string )" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance void set_XmlSpace(struct XmlSpace )" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance void set_Encoding(class Encoding )" />
      </Type>
      <Type Name="XmlReaderSettings">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance void set_NameTable(class XmlNameTable )" />
        <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
        <Method Sig="instance int get_LineNumberOffset()" />
        <Method Sig="instance void set_LineNumberOffset(int )" />
        <Method Sig="instance int get_LinePositionOffset()" />
        <Method Sig="instance void set_LinePositionOffset(int )" />
        <Method Sig="instance struct ConformanceLevel get_ConformanceLevel()" />
        <Method Sig="instance void set_ConformanceLevel(struct ConformanceLevel )" />
        <Method Sig="instance bool get_CheckCharacters()" />
        <Method Sig="instance void set_CheckCharacters(bool )" />
        <Method Sig="instance struct ValidationType get_ValidationType()" />
        <Method Sig="instance void set_ValidationType(struct ValidationType )" />
        <Method Sig="instance struct XmlSchemaValidationFlags get_ValidationFlags()" />
        <Method Sig="instance void set_ValidationFlags(struct XmlSchemaValidationFlags )" />
        <Method Sig="instance class XmlSchemaSet get_Schemas()" />
        <Method Sig="instance void set_Schemas(class XmlSchemaSet )" />
        <Method Sig="instance void add_ValidationEventHandler(class ValidationEventHandler )" />
        <Method Sig="instance void remove_ValidationEventHandler(class ValidationEventHandler )" />
        <Method Sig="instance bool get_IgnoreWhitespace()" />
        <Method Sig="instance void set_IgnoreWhitespace(bool )" />
        <Method Sig="instance bool get_IgnoreProcessingInstructions()" />
        <Method Sig="instance void set_IgnoreProcessingInstructions(bool )" />
        <Method Sig="instance bool get_IgnoreComments()" />
        <Method Sig="instance void set_IgnoreComments(bool )" />
        <Method Sig="instance bool get_ProhibitDtd()" />
        <Method Sig="instance void set_ProhibitDtd(bool )" />
        <Method Sig="instance bool get_CloseInput()" />
        <Method Sig="instance void set_CloseInput(bool )" />
        <Method Sig="instance void Reset()" />
        <Method Sig="instance class XmlReaderSettings Clone()" />
      </Type>
      <Type Name="XmlTextReader">
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(string , class Stream )" />
        <Method Sig="instance void .ctor(class Stream , class XmlNameTable )" />
        <Method Sig="instance void .ctor(string , class Stream , class XmlNameTable )" />
        <Method Sig="instance void .ctor(class TextReader )" />
        <Method Sig="instance void .ctor(string , class TextReader )" />
        <Method Sig="instance void .ctor(class TextReader , class XmlNameTable )" />
        <Method Sig="instance void .ctor(string , class TextReader , class XmlNameTable )" />
        <Method Sig="instance void .ctor(class Stream , struct XmlNodeType , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , struct XmlNodeType , class XmlParserContext )" />
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , class XmlNameTable )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlReaderSettings get_Settings()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance bool get_HasValue()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance int get_Depth()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance bool get_IsEmptyElement()" />
        <Method Sig="instance bool get_IsDefault()" />
        <Method Sig="instance char get_QuoteChar()" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance int get_AttributeCount()" />
        <Method Sig="instance string GetAttribute(string )" />
        <Method Sig="instance string GetAttribute(string , string )" />
        <Method Sig="instance string GetAttribute(int )" />
        <Method Sig="instance bool MoveToAttribute(string )" />
        <Method Sig="instance bool MoveToAttribute(string , string )" />
        <Method Sig="instance void MoveToAttribute(int )" />
        <Method Sig="instance bool MoveToFirstAttribute()" />
        <Method Sig="instance bool MoveToNextAttribute()" />
        <Method Sig="instance bool MoveToElement()" />
        <Method Sig="instance bool ReadAttributeValue()" />
        <Method Sig="instance bool Read()" />
        <Method Sig="instance bool get_EOF()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance struct ReadState get_ReadState()" />
        <Method Sig="instance void Skip()" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance string LookupNamespace(string )" />
        <Method Sig="instance bool get_CanResolveEntity()" />
        <Method Sig="instance void ResolveEntity()" />
        <Method Sig="instance bool get_CanReadBinaryContent()" />
        <Method Sig="instance int ReadContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance bool get_CanReadValueChunk()" />
        <Method Sig="instance string ReadString()" />
        <Method Sig="instance bool HasLineInfo()" />
        <Method Sig="instance int get_LineNumber()" />
        <Method Sig="instance int get_LinePosition()" />
        <Method Sig="instance GetNamespacesInScope(class IDictionary`2 )" />
        <Method Sig="instance bool get_Namespaces()" />
        <Method Sig="instance void set_Namespaces(bool )" />
        <Method Sig="instance bool get_Normalization()" />
        <Method Sig="instance void set_Normalization(bool )" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance struct WhitespaceHandling get_WhitespaceHandling()" />
        <Method Sig="instance void set_WhitespaceHandling(struct WhitespaceHandling )" />
        <Method Sig="instance bool get_ProhibitDtd()" />
        <Method Sig="instance void set_ProhibitDtd(bool )" />
        <Method Sig="instance struct EntityHandling get_EntityHandling()" />
        <Method Sig="instance void set_EntityHandling(struct EntityHandling )" />
        <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
        <Method Sig="instance void ResetState()" />
        <Method Sig="instance class TextReader GetRemainder()">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance int ReadChars([] char , int , int )" />
        <Method Sig="instance int ReadBase64([] byte , int , int )" />
        <Method Sig="instance int ReadBinHex([] byte , int , int )" />
      </Type>
      <Type Name="XmlTextWriter">
        <Method Sig="instance void .ctor(class Stream , class Encoding )" />
        <Method Sig="instance void .ctor(string , class Encoding )" />
        <Method Sig="instance void .ctor(class TextWriter )" />
        <Method Sig="instance class Stream get_BaseStream()" />
        <Method Sig="instance bool get_Namespaces()" />
        <Method Sig="instance void set_Namespaces(bool )" />
        <Method Sig="instance struct Formatting get_Formatting()" />
        <Method Sig="instance void set_Formatting(struct Formatting )" />
        <Method Sig="instance int get_Indentation()" />
        <Method Sig="instance void set_Indentation(int )" />
        <Method Sig="instance char get_IndentChar()" />
        <Method Sig="instance void set_IndentChar(char )" />
        <Method Sig="instance char get_QuoteChar()" />
        <Method Sig="instance void set_QuoteChar(char )" />
        <Method Sig="instance void WriteStartDocument()" />
        <Method Sig="instance void WriteStartDocument(bool )" />
        <Method Sig="instance void WriteEndDocument()" />
        <Method Sig="instance void WriteDocType(string , string , string , string )" />
        <Method Sig="instance void WriteStartElement(string , string , string )" />
        <Method Sig="instance void WriteEndElement()" />
        <Method Sig="instance void WriteFullEndElement()" />
        <Method Sig="instance void WriteStartAttribute(string , string , string )" />
        <Method Sig="instance void WriteEndAttribute()" />
        <Method Sig="instance void WriteCData(string )" />
        <Method Sig="instance void WriteComment(string )" />
        <Method Sig="instance void WriteProcessingInstruction(string , string )" />
        <Method Sig="instance void WriteEntityRef(string )" />
        <Method Sig="instance void WriteCharEntity(char )" />
        <Method Sig="instance void WriteWhitespace(string )" />
        <Method Sig="instance void WriteString(string )" />
        <Method Sig="instance void WriteSurrogateCharEntity(char , char )" />
        <Method Sig="instance void WriteChars([] char , int , int )" />
        <Method Sig="instance void WriteRaw([] char , int , int )" />
        <Method Sig="instance void WriteRaw(string )" />
        <Method Sig="instance void WriteBase64([] byte , int , int )" />
        <Method Sig="instance void WriteBinHex([] byte , int , int )" />
        <Method Sig="instance struct WriteState get_WriteState()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance void WriteName(string )" />
        <Method Sig="instance void WriteQualifiedName(string , string )" />
        <Method Sig="instance string LookupPrefix(string )" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance void WriteNmToken(string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlValidatingReader">
        <Method Sig="instance void .ctor(class XmlReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , struct XmlNodeType , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Stream , struct XmlNodeType , class XmlParserContext )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlReaderSettings get_Settings()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance bool get_HasValue()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance int get_Depth()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance bool get_IsEmptyElement()" />
        <Method Sig="instance bool get_IsDefault()" />
        <Method Sig="instance char get_QuoteChar()" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance int get_AttributeCount()" />
        <Method Sig="instance string GetAttribute(string )" />
        <Method Sig="instance string GetAttribute(string , string )" />
        <Method Sig="instance string GetAttribute(int )" />
        <Method Sig="instance bool MoveToAttribute(string )" />
        <Method Sig="instance bool MoveToAttribute(string , string )" />
        <Method Sig="instance void MoveToAttribute(int )" />
        <Method Sig="instance bool MoveToFirstAttribute()" />
        <Method Sig="instance bool MoveToNextAttribute()" />
        <Method Sig="instance bool MoveToElement()" />
        <Method Sig="instance bool ReadAttributeValue()" />
        <Method Sig="instance bool Read()" />
        <Method Sig="instance bool get_EOF()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance struct ReadState get_ReadState()" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance string LookupNamespace(string )" />
        <Method Sig="instance bool get_CanResolveEntity()" />
        <Method Sig="instance void ResolveEntity()" />
        <Method Sig="instance bool get_CanReadBinaryContent()" />
        <Method Sig="instance int ReadContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance string ReadString()" />
        <Method Sig="instance bool HasLineInfo()" />
        <Method Sig="instance int get_LineNumber()" />
        <Method Sig="instance int get_LinePosition()" />
        <Method Sig="instance void add_ValidationEventHandler(class ValidationEventHandler )" />
        <Method Sig="instance void remove_ValidationEventHandler(class ValidationEventHandler )" />
        <Method Sig="instance object get_SchemaType()" />
        <Method Sig="instance class XmlReader get_Reader()" />
        <Method Sig="instance struct ValidationType get_ValidationType()" />
        <Method Sig="instance void set_ValidationType(struct ValidationType )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlSchemaCollection get_Schemas()" />
        <Method Sig="instance struct EntityHandling get_EntityHandling()" />
        <Method Sig="instance void set_EntityHandling(struct EntityHandling )" />
        <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
        <Method Sig="instance bool get_Namespaces()" />
        <Method Sig="instance void set_Namespaces(bool )" />
        <Method Sig="instance object ReadTypedValue()" />
        <Method Sig="instance class Encoding get_Encoding()" />
      </Type>
      <Type Name="XmlWriterSettings">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance class Encoding get_Encoding()" />
        <Method Sig="instance void set_Encoding(class Encoding )" />
        <Method Sig="instance bool get_OmitXmlDeclaration()" />
        <Method Sig="instance void set_OmitXmlDeclaration(bool )" />
        <Method Sig="instance struct NewLineHandling get_NewLineHandling()" />
        <Method Sig="instance void set_NewLineHandling(struct NewLineHandling )" />
        <Method Sig="instance string get_NewLineChars()" />
        <Method Sig="instance void set_NewLineChars(string )" />
        <Method Sig="instance bool get_Indent()" />
        <Method Sig="instance void set_Indent(bool )" />
        <Method Sig="instance string get_IndentChars()" />
        <Method Sig="instance void set_IndentChars(string )" />
        <Method Sig="instance bool get_NewLineOnAttributes()" />
        <Method Sig="instance void set_NewLineOnAttributes(bool )" />
        <Method Sig="instance bool get_CloseOutput()" />
        <Method Sig="instance void set_CloseOutput(bool )" />
        <Method Sig="instance struct ConformanceLevel get_ConformanceLevel()" />
        <Method Sig="instance void set_ConformanceLevel(struct ConformanceLevel )" />
        <Method Sig="instance bool get_CheckCharacters()" />
        <Method Sig="instance void set_CheckCharacters(bool )" />
        <Method Sig="instance void Reset()" />
        <Method Sig="instance class XmlWriterSettings Clone()" />
        <Method Sig="instance struct XmlOutputMethod get_OutputMethod()" />
      </Type>
      <Namespace Name="XPath">
        <Type Name="XPathItem">
          <Method Sig="instance bool get_IsNode()" />
          <Method Sig="instance class XmlSchemaType get_XmlType()" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance object get_TypedValue()" />
          <Method Sig="instance class Type get_ValueType()" />
          <Method Sig="instance bool get_ValueAsBoolean()" />
          <Method Sig="instance struct DateTime get_ValueAsDateTime()" />
          <Method Sig="instance double get_ValueAsDouble()" />
          <Method Sig="instance int get_ValueAsInt()" />
          <Method Sig="instance in64 get_ValueAsLong()" />
          <Method Sig="instance object ValueAs(class Type )" />
          <Method Sig="instance object ValueAs(class Type , class IXmlNamespaceResolver )" />
        </Type>
        <Type Name="XPathNavigator">
          <Method Sig="instance string ToString()" />
          <Method Sig="instance bool get_IsNode()" />
          <Method Sig="instance class XmlSchemaType get_XmlType()" />
          <Method Sig="instance void SetValue(string )" />
          <Method Sig="instance object get_TypedValue()" />
          <Method Sig="instance void SetTypedValue(object )" />
          <Method Sig="instance class Type get_ValueType()" />
          <Method Sig="instance bool get_ValueAsBoolean()" />
          <Method Sig="instance struct DateTime get_ValueAsDateTime()" />
          <Method Sig="instance double get_ValueAsDouble()" />
          <Method Sig="instance int get_ValueAsInt()" />
          <Method Sig="instance in64 get_ValueAsLong()" />
          <Method Sig="instance object ValueAs(class Type , class IXmlNamespaceResolver )" />
          <Method Sig="instance class XPathNavigator CreateNavigator()" />
          <Method Sig="instance class XmlNameTable get_NameTable()" />
          <Method Sig="instance string LookupNamespace(string )" />
          <Method Sig="instance string LookupPrefix(string )" />
          <Method Sig="instance GetNamespacesInScope(class IDictionary`2 )" />
          <Method Sig="class IEqualityComparer get_NavigatorComparer()" />
          <Method Sig="instance class XPathNavigator Clone()" />
          <Method Sig="instance struct XPathNodeType get_NodeType()" />
          <Method Sig="instance string get_LocalName()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance string get_NamespaceURI()" />
          <Method Sig="instance string get_Prefix()" />
          <Method Sig="instance string get_BaseURI()" />
          <Method Sig="instance bool get_IsEmptyElement()" />
          <Method Sig="instance string get_XmlLang()" />
          <Method Sig="instance class XmlReader ReadSubtree()" />
          <Method Sig="instance void WriteSubtree(class XmlWriter )" />
          <Method Sig="instance object get_UnderlyingObject()" />
          <Method Sig="instance bool get_HasAttributes()" />
          <Method Sig="instance string GetAttribute(string , string )" />
          <Method Sig="instance bool MoveToAttribute(string , string )" />
          <Method Sig="instance bool MoveToFirstAttribute()" />
          <Method Sig="instance bool MoveToNextAttribute()" />
          <Method Sig="instance string GetNamespace(string )" />
          <Method Sig="instance bool MoveToNamespace(string )" />
          <Method Sig="instance bool MoveToFirstNamespace(struct XPathNamespaceScope )" />
          <Method Sig="instance bool MoveToNextNamespace(struct XPathNamespaceScope )" />
          <Method Sig="instance bool MoveToFirstNamespace()" />
          <Method Sig="instance bool MoveToNextNamespace()" />
          <Method Sig="instance bool MoveToNext()" />
          <Method Sig="instance bool MoveToPrevious()" />
          <Method Sig="instance bool MoveToFirst()" />
          <Method Sig="instance bool MoveToFirstChild()" />
          <Method Sig="instance bool MoveToParent()" />
          <Method Sig="instance void MoveToRoot()" />
          <Method Sig="instance bool MoveTo(class XPathNavigator )" />
          <Method Sig="instance bool MoveToId(string )" />
          <Method Sig="instance bool MoveToChild(string , string )" />
          <Method Sig="instance bool MoveToChild(struct XPathNodeType )" />
          <Method Sig="instance bool MoveToFollowing(string , string )" />
          <Method Sig="instance bool MoveToFollowing(string , string , class XPathNavigator )" />
          <Method Sig="instance bool MoveToFollowing(struct XPathNodeType )" />
          <Method Sig="instance bool MoveToFollowing(struct XPathNodeType , class XPathNavigator )" />
          <Method Sig="instance bool MoveToNext(string , string )" />
          <Method Sig="instance bool MoveToNext(struct XPathNodeType )" />
          <Method Sig="instance bool get_HasChildren()" />
          <Method Sig="instance bool IsSamePosition(class XPathNavigator )" />
          <Method Sig="instance bool IsDescendant(class XPathNavigator )" />
          <Method Sig="instance struct XmlNodeOrder ComparePosition(class XPathNavigator )" />
          <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
          <Method Sig="instance bool CheckValidity(class XmlSchemaSet , class ValidationEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XPathExpression Compile(string )" />
          <Method Sig="instance class XPathNavigator SelectSingleNode(string )" />
          <Method Sig="instance class XPathNavigator SelectSingleNode(string , class IXmlNamespaceResolver )" />
          <Method Sig="instance class XPathNavigator SelectSingleNode(class XPathExpression )" />
          <Method Sig="instance class XPathNodeIterator Select(string )" />
          <Method Sig="instance class XPathNodeIterator Select(string , class IXmlNamespaceResolver )" />
          <Method Sig="instance class XPathNodeIterator Select(class XPathExpression )" />
          <Method Sig="instance object Evaluate(string )" />
          <Method Sig="instance object Evaluate(string , class IXmlNamespaceResolver )" />
          <Method Sig="instance object Evaluate(class XPathExpression )" />
          <Method Sig="instance object Evaluate(class XPathExpression , class XPathNodeIterator )" />
          <Method Sig="instance bool Matches(class XPathExpression )" />
          <Method Sig="instance bool Matches(string )" />
          <Method Sig="instance class XPathNodeIterator SelectChildren(struct XPathNodeType )" />
          <Method Sig="instance class XPathNodeIterator SelectChildren(string , string )" />
          <Method Sig="instance class XPathNodeIterator SelectAncestors(struct XPathNodeType , bool )" />
          <Method Sig="instance class XPathNodeIterator SelectAncestors(string , string , bool )" />
          <Method Sig="instance class XPathNodeIterator SelectDescendants(struct XPathNodeType , bool )" />
          <Method Sig="instance class XPathNodeIterator SelectDescendants(string , string , bool )" />
          <Method Sig="instance bool get_CanEdit()" />
          <Method Sig="instance class XmlWriter PrependChild()" />
          <Method Sig="instance class XmlWriter AppendChild()" />
          <Method Sig="instance class XmlWriter InsertAfter()" />
          <Method Sig="instance class XmlWriter InsertBefore()" />
          <Method Sig="instance class XmlWriter CreateAttributes()" />
          <Method Sig="instance class XmlWriter ReplaceRange(class XPathNavigator )" />
          <Method Sig="instance void ReplaceSelf(string )" />
          <Method Sig="instance void ReplaceSelf(class XmlReader )" />
          <Method Sig="instance void ReplaceSelf(class XPathNavigator )" />
          <Method Sig="instance string get_OuterXml()" />
          <Method Sig="instance void set_OuterXml(string )" />
          <Method Sig="instance string get_InnerXml()" />
          <Method Sig="instance void set_InnerXml(string )" />
          <Method Sig="instance void AppendChild(string )" />
          <Method Sig="instance void AppendChild(class XmlReader )" />
          <Method Sig="instance void AppendChild(class XPathNavigator )" />
          <Method Sig="instance void PrependChild(string )" />
          <Method Sig="instance void PrependChild(class XmlReader )" />
          <Method Sig="instance void PrependChild(class XPathNavigator )" />
          <Method Sig="instance void InsertBefore(string )" />
          <Method Sig="instance void InsertBefore(class XmlReader )" />
          <Method Sig="instance void InsertBefore(class XPathNavigator )" />
          <Method Sig="instance void InsertAfter(string )" />
          <Method Sig="instance void InsertAfter(class XmlReader )" />
          <Method Sig="instance void InsertAfter(class XPathNavigator )" />
          <Method Sig="instance void DeleteRange(class XPathNavigator )" />
          <Method Sig="instance void DeleteSelf()" />
          <Method Sig="instance void PrependChildElement(string , string , string , string )" />
          <Method Sig="instance void AppendChildElement(string , string , string , string )" />
          <Method Sig="instance void InsertElementBefore(string , string , string , string )" />
          <Method Sig="instance void InsertElementAfter(string , string , string , string )" />
          <Method Sig="instance void CreateAttribute(string , string , string , string )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XPathNodeIterator">
          <Method Sig="instance class XPathNodeIterator Clone()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance class XPathNavigator get_Current()" />
          <Method Sig="instance int get_CurrentPosition()" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class IEnumerator GetEnumerator()" />
        </Type>
        <Type Name="XPathDocument">
          <Method Sig="instance void .ctor(class XmlReader )" />
          <Method Sig="instance void .ctor(class XmlReader , struct XmlSpace )" />
          <Method Sig="instance void .ctor(class TextReader )" />
          <Method Sig="instance void .ctor(class Stream )" />
          <Method Sig="instance void .ctor(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(string , struct XmlSpace )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XPathNavigator CreateNavigator()" />
        </Type>
        <Type Name="XPathException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance string get_Message()" />
        </Type>
        <Type Name="XPathExpression">
          <Method Sig="instance string get_Expression()" />
          <Method Sig="instance void AddSort(object , class IComparer )" />
          <Method Sig="instance void AddSort(object , struct XmlSortOrder , struct XmlCaseOrder , string , struct XmlDataType )" />
          <Method Sig="instance class XPathExpression Clone()" />
          <Method Sig="instance void SetContext(class XmlNamespaceManager )" />
          <Method Sig="instance void SetContext(class IXmlNamespaceResolver )" />
          <Method Sig="instance struct XPathResultType get_ReturnType()" />
          <Method Sig="class XPathExpression Compile(string )" />
          <Method Sig="class XPathExpression Compile(string , class IXmlNamespaceResolver )" />
        </Type>
      </Namespace>
      <Type Name="XmlNode">
        <Method Sig="instance class XPathNavigator CreateNavigator()" />
        <Method Sig="instance class XmlNode SelectSingleNode(string )" />
        <Method Sig="instance class XmlNode SelectSingleNode(string , class XmlNamespaceManager )" />
        <Method Sig="instance class XmlNodeList SelectNodes(string )" />
        <Method Sig="instance class XmlNodeList SelectNodes(string , class XmlNamespaceManager )" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlNodeList get_ChildNodes()" />
        <Method Sig="instance class XmlNode get_PreviousSibling()" />
        <Method Sig="instance class XmlNode get_NextSibling()" />
        <Method Sig="instance class XmlAttributeCollection get_Attributes()" />
        <Method Sig="instance class XmlDocument get_OwnerDocument()" />
        <Method Sig="instance class XmlNode get_FirstChild()" />
        <Method Sig="instance class XmlNode get_LastChild()" />
        <Method Sig="instance class XmlNode InsertBefore(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode InsertAfter(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode ReplaceChild(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode RemoveChild(class XmlNode )" />
        <Method Sig="instance class XmlNode PrependChild(class XmlNode )" />
        <Method Sig="instance class XmlNode AppendChild(class XmlNode )" />
        <Method Sig="instance bool get_HasChildNodes()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void Normalize()" />
        <Method Sig="instance bool Supports(string , string )" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance void set_Prefix(string )" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance class XmlNode Clone()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance string get_OuterXml()" />
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance void RemoveAll()" />
        <Method Sig="instance string GetNamespaceOfPrefix(string )" />
        <Method Sig="instance string GetPrefixOfNamespace(string )" />
        <Method Sig="instance class XmlElement get_Item(string )" />
        <Method Sig="instance class XmlElement get_Item(string , string )" />
      </Type>
      <Type Name="XmlAttribute">
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance void set_Prefix(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlDocument get_OwnerDocument()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance bool get_Specified()" />
        <Method Sig="instance class XmlNode InsertBefore(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode InsertAfter(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode ReplaceChild(class XmlNode , class XmlNode )" />
        <Method Sig="instance class XmlNode RemoveChild(class XmlNode )" />
        <Method Sig="instance class XmlNode PrependChild(class XmlNode )" />
        <Method Sig="instance class XmlNode AppendChild(class XmlNode )" />
        <Method Sig="instance class XmlElement get_OwnerElement()" />
        <Method Sig="instance void set_InnerXml(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance string get_BaseURI()" />
      </Type>
      <Type Name="XmlNamedNodeMap">
        <Method Sig="instance class XmlNode GetNamedItem(string )" />
        <Method Sig="instance class XmlNode SetNamedItem(class XmlNode )" />
        <Method Sig="instance class XmlNode RemoveNamedItem(string )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class XmlNode Item(int )" />
        <Method Sig="instance class XmlNode GetNamedItem(string , string )" />
        <Method Sig="instance class XmlNode RemoveNamedItem(string , string )" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
      </Type>
      <Type Name="XmlAttributeCollection">
        <Method Sig="instance class XmlAttribute get_ItemOf(int )" />
        <Method Sig="instance class XmlAttribute get_ItemOf(string )" />
        <Method Sig="instance class XmlAttribute get_ItemOf(string , string )" />
        <Method Sig="instance class XmlNode SetNamedItem(class XmlNode )" />
        <Method Sig="instance class XmlAttribute Prepend(class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute Append(class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute InsertBefore(class XmlAttribute , class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute InsertAfter(class XmlAttribute , class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute Remove(class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute RemoveAt(int )" />
        <Method Sig="instance void RemoveAll()" />
        <Method Sig="instance void CopyTo([] class XmlAttribute , int )" />
      </Type>
      <Type Name="XmlLinkedNode">
        <Method Sig="instance class XmlNode get_PreviousSibling()" />
        <Method Sig="instance class XmlNode get_NextSibling()" />
      </Type>
      <Type Name="XmlCharacterData">
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance string get_Data()" />
        <Method Sig="instance void set_Data(string )" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance string Substring(int , int )" />
        <Method Sig="instance void AppendData(string )" />
        <Method Sig="instance void InsertData(int , string )" />
        <Method Sig="instance void DeleteData(int , int )" />
        <Method Sig="instance void ReplaceData(int , int , string )" />
      </Type>
      <Type Name="XmlCDataSection">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlNodeList">
        <Method Sig="instance class XmlNode Item(int )" />
        <Method Sig="instance int get_Count()" />
        <Method Sig="instance class IEnumerator GetEnumerator()" />
        <Method Sig="instance class XmlNode get_ItemOf(int )" />
      </Type>
      <Type Name="XmlComment">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlDeclaration">
        <Method Sig="instance string get_Version()" />
        <Method Sig="instance string get_Encoding()" />
        <Method Sig="instance void set_Encoding(string )" />
        <Method Sig="instance string get_Standalone()" />
        <Method Sig="instance void set_Standalone(string )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlDocument">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class XmlNameTable )" />
        <Method Sig="instance class XmlNode CloneNode(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlDocumentType get_DocumentType()" />
        <Method Sig="instance class XmlImplementation get_Implementation()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance class XmlElement get_DocumentElement()" />
        <Method Sig="instance class XmlDocument get_OwnerDocument()" />
        <Method Sig="instance class XmlSchemaSet get_Schemas()" />
        <Method Sig="instance void set_Schemas(class XmlSchemaSet )" />
        <Method Sig="instance void set_XmlResolver(class XmlResolver )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
          </Demand>
        </Method>
        <Method Sig="instance class XmlAttribute CreateAttribute(string )" />
        <Method Sig="instance class XmlCDataSection CreateCDataSection(string )" />
        <Method Sig="instance class XmlComment CreateComment(string )" />
        <Method Sig="instance class XmlDocumentType CreateDocumentType(string , string , string , string )" />
        <Method Sig="instance class XmlDocumentFragment CreateDocumentFragment()" />
        <Method Sig="instance class XmlElement CreateElement(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlEntityReference CreateEntityReference(string )" />
        <Method Sig="instance class XmlProcessingInstruction CreateProcessingInstruction(string , string )" />
        <Method Sig="instance class XmlDeclaration CreateXmlDeclaration(string , string , string )" />
        <Method Sig="instance class XmlText CreateTextNode(string )" />
        <Method Sig="instance class XmlSignificantWhitespace CreateSignificantWhitespace(string )" />
        <Method Sig="instance class XPathNavigator CreateNavigator()" />
        <Method Sig="instance class XmlWhitespace CreateWhitespace(string )" />
        <Method Sig="instance class XmlNodeList GetElementsByTagName(string )" />
        <Method Sig="instance class XmlAttribute CreateAttribute(string , string )" />
        <Method Sig="instance class XmlElement CreateElement(string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNodeList GetElementsByTagName(string , string )" />
        <Method Sig="instance class XmlElement GetElementById(string )" />
        <Method Sig="instance class XmlNode ImportNode(class XmlNode , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance class XmlAttribute CreateAttribute(string , string , string )" />
        <Method Sig="instance class XmlElement CreateElement(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance bool get_PreserveWhitespace()" />
        <Method Sig="instance void set_PreserveWhitespace(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance class XmlNode CreateNode(struct XmlNodeType , string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNode CreateNode(string , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNode CreateNode(struct XmlNodeType , string , string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNode ReadNode(class XmlReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Load(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Load(class Stream )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Load(class TextReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Load(class XmlReader )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void LoadXml(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Save(string )" />
        <Method Sig="instance void Save(class Stream )" />
        <Method Sig="instance void Save(class TextWriter )" />
        <Method Sig="instance void Save(class XmlWriter )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance void Validate(class ValidationEventHandler )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void Validate(class ValidationEventHandler , class XmlNode )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void add_NodeInserting(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeInserting(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void add_NodeInserted(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeInserted(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void add_NodeRemoving(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeRemoving(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void add_NodeRemoved(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeRemoved(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void add_NodeChanging(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeChanging(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void add_NodeChanged(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance void remove_NodeChanged(class XmlNodeChangedEventHandler )" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="XmlDocumentFragment">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlDocument get_OwnerDocument()" />
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlDocumentType">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance class XmlNamedNodeMap get_Entities()" />
        <Method Sig="instance class XmlNamedNodeMap get_Notations()" />
        <Method Sig="instance string get_PublicId()" />
        <Method Sig="instance string get_SystemId()" />
        <Method Sig="instance string get_InternalSubset()" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlElement">
        <Method Sig="instance class XmlNode CloneNode(bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance void set_Prefix(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlDocument get_OwnerDocument()" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance void set_IsEmpty(bool )" />
        <Method Sig="instance class XmlAttributeCollection get_Attributes()" />
        <Method Sig="instance bool get_HasAttributes()" />
        <Method Sig="instance string GetAttribute(string )" />
        <Method Sig="instance void SetAttribute(string , string )" />
        <Method Sig="instance void RemoveAttribute(string )" />
        <Method Sig="instance class XmlAttribute GetAttributeNode(string )" />
        <Method Sig="instance class XmlAttribute SetAttributeNode(class XmlAttribute )" />
        <Method Sig="instance class XmlAttribute RemoveAttributeNode(class XmlAttribute )" />
        <Method Sig="instance class XmlNodeList GetElementsByTagName(string )" />
        <Method Sig="instance string GetAttribute(string , string )" />
        <Method Sig="instance string SetAttribute(string , string , string )" />
        <Method Sig="instance void RemoveAttribute(string , string )" />
        <Method Sig="instance class XmlAttribute GetAttributeNode(string , string )" />
        <Method Sig="instance class XmlAttribute SetAttributeNode(string , string )" />
        <Method Sig="instance class XmlAttribute RemoveAttributeNode(string , string )" />
        <Method Sig="instance class XmlNodeList GetElementsByTagName(string , string )" />
        <Method Sig="instance bool HasAttribute(string )" />
        <Method Sig="instance bool HasAttribute(string , string )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance class XmlNode RemoveAttributeAt(int )" />
        <Method Sig="instance void RemoveAllAttributes()" />
        <Method Sig="instance void RemoveAll()" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance class XmlNode get_NextSibling()" />
      </Type>
      <Type Name="XmlEntity">
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance string get_PublicId()" />
        <Method Sig="instance string get_SystemId()" />
        <Method Sig="instance string get_NotationName()" />
        <Method Sig="instance string get_OuterXml()" />
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance string get_BaseURI()" />
      </Type>
      <Type Name="XmlEntityReference">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
        <Method Sig="instance string get_BaseURI()" />
      </Type>
      <Type Name="XmlImplementation">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(class XmlNameTable )" />
        <Method Sig="instance bool HasFeature(string , string )" />
        <Method Sig="instance class XmlDocument CreateDocument()" />
      </Type>
      <Type Name="XmlNodeChangedEventArgs">
        <Method Sig="instance void .ctor(class XmlNode , class XmlNode , class XmlNode , string , string , struct XmlNodeChangedAction )" />
        <Method Sig="instance struct XmlNodeChangedAction get_Action()" />
        <Method Sig="instance class XmlNode get_Node()" />
        <Method Sig="instance class XmlNode get_OldParent()" />
        <Method Sig="instance class XmlNode get_NewParent()" />
        <Method Sig="instance string get_OldValue()" />
        <Method Sig="instance string get_NewValue()" />
      </Type>
      <Type Name="XmlNodeChangedEventHandler">
        <Method Sig="instance void .ctor(object , intptr )" />
        <Method Sig="instance void Invoke(object , class XmlNodeChangedEventArgs )" />
        <Method Sig="instance class IAsyncResult BeginInvoke(object , class XmlNodeChangedEventArgs , class AsyncCallback , object )" />
        <Method Sig="instance void EndInvoke(class IAsyncResult )" />
      </Type>
      <Type Name="XmlNodeReader">
        <Method Sig="instance void .ctor(class XmlNode )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_NamespaceURI()" />
        <Method Sig="instance string get_Prefix()" />
        <Method Sig="instance bool get_HasValue()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance int get_Depth()" />
        <Method Sig="instance string get_BaseURI()" />
        <Method Sig="instance bool get_CanResolveEntity()" />
        <Method Sig="instance bool get_IsEmptyElement()" />
        <Method Sig="instance bool get_IsDefault()" />
        <Method Sig="instance struct XmlSpace get_XmlSpace()" />
        <Method Sig="instance string get_XmlLang()" />
        <Method Sig="instance class IXmlSchemaInfo get_SchemaInfo()" />
        <Method Sig="instance int get_AttributeCount()" />
        <Method Sig="instance string GetAttribute(string )" />
        <Method Sig="instance string GetAttribute(string , string )" />
        <Method Sig="instance string GetAttribute(int )" />
        <Method Sig="instance bool MoveToAttribute(string )" />
        <Method Sig="instance bool MoveToAttribute(string , string )" />
        <Method Sig="instance void MoveToAttribute(int )" />
        <Method Sig="instance bool MoveToFirstAttribute()" />
        <Method Sig="instance bool MoveToNextAttribute()" />
        <Method Sig="instance bool MoveToElement()" />
        <Method Sig="instance bool Read()" />
        <Method Sig="instance bool get_EOF()" />
        <Method Sig="instance void Close()" />
        <Method Sig="instance struct ReadState get_ReadState()" />
        <Method Sig="instance void Skip()" />
        <Method Sig="instance string ReadString()" />
        <Method Sig="instance bool get_HasAttributes()" />
        <Method Sig="instance class XmlNameTable get_NameTable()" />
        <Method Sig="instance string LookupNamespace(string )" />
        <Method Sig="instance void ResolveEntity()" />
        <Method Sig="instance bool ReadAttributeValue()" />
        <Method Sig="instance bool get_CanReadBinaryContent()" />
        <Method Sig="instance int ReadContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadContentAsBinHex([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBase64([] byte , int , int )" />
        <Method Sig="instance int ReadElementContentAsBinHex([] byte , int , int )" />
      </Type>
      <Type Name="XmlNotation">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance bool get_IsReadOnly()" />
        <Method Sig="instance string get_PublicId()" />
        <Method Sig="instance string get_SystemId()" />
        <Method Sig="instance string get_OuterXml()" />
        <Method Sig="instance string get_InnerXml()" />
        <Method Sig="instance void set_InnerXml(string )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlProcessingInstruction">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance string get_Target()" />
        <Method Sig="instance string get_Data()" />
        <Method Sig="instance void set_Data(string )" />
        <Method Sig="instance string get_InnerText()" />
        <Method Sig="instance void set_InnerText(string )" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlSignificantWhitespace">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlText">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance class XmlText SplitText(int )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Type Name="XmlWhitespace">
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string get_LocalName()" />
        <Method Sig="instance struct XmlNodeType get_NodeType()" />
        <Method Sig="instance class XmlNode get_ParentNode()" />
        <Method Sig="instance string get_Value()" />
        <Method Sig="instance void set_Value(string )" />
        <Method Sig="instance class XmlNode CloneNode(bool )" />
        <Method Sig="instance void WriteTo(class XmlWriter )" />
        <Method Sig="instance void WriteContentTo(class XmlWriter )" />
      </Type>
      <Namespace Name="Xsl">
        <Type Name="XsltContext">
          <Method Sig="instance class IXsltContextVariable ResolveVariable(string , string )" />
          <Method Sig="instance class IXsltContextFunction ResolveFunction(string , string , [] struct XPathResultType )" />
          <Method Sig="instance bool get_Whitespace()" />
          <Method Sig="instance bool PreserveWhitespace(class XPathNavigator )" />
          <Method Sig="instance int CompareDocument(string , string )" />
        </Type>
        <Type Name="XslCompiledTransform">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance class XmlWriterSettings get_OutputSettings()" />
          <Method Sig="instance class TempFileCollection get_TemporaryFiles()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Load(class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XmlReader , class XsltSettings , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class IXPathNavigable )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class IXPathNavigable , class XsltSettings , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(string , class XsltSettings , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XmlWriter )" />
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class XmlWriter )" />
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class TextWriter )" />
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class Stream )" />
          <Method Sig="instance void Transform(class XmlReader , class XmlWriter )" />
          <Method Sig="instance void Transform(class XmlReader , class XsltArgumentList , class XmlWriter )" />
          <Method Sig="instance void Transform(class XmlReader , class XsltArgumentList , class TextWriter )" />
          <Method Sig="instance void Transform(class XmlReader , class XsltArgumentList , class Stream )" />
          <Method Sig="instance void Transform(class XmlReader , class XsltArgumentList , class XmlWriter , class XmlResolver )" />
          <Method Sig="instance void Transform(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , class XmlWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , class XsltArgumentList , class XmlWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , class XsltArgumentList , class TextWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , class XsltArgumentList , class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XsltMessageEncounteredEventArgs">
          <Method Sig="instance string get_Message()" />
        </Type>
        <Type Name="XsltMessageEncounteredEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class XsltMessageEncounteredEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class XsltMessageEncounteredEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XsltArgumentList">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance object GetParam(string , string )" />
          <Method Sig="instance object GetExtensionObject(string )" />
          <Method Sig="instance void AddParam(string , string , object )" />
          <Method Sig="instance void AddExtensionObject(string , object )" />
          <Method Sig="instance object RemoveParam(string , string )" />
          <Method Sig="instance object RemoveExtensionObject(string )" />
          <Method Sig="instance void add_XsltMessageEncountered(class XsltMessageEncounteredEventHandler )" />
          <Method Sig="instance void remove_XsltMessageEncountered(class XsltMessageEncounteredEventHandler )" />
          <Method Sig="instance void Clear()" />
        </Type>
        <Type Name="XsltException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance string get_SourceUri()" />
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance int get_LinePosition()" />
          <Method Sig="instance string get_Message()" />
        </Type>
        <Type Name="XsltCompileException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(class Exception , string , int , int )" />
        </Type>
        <Type Name="XslTransform">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
          <Method Sig="instance void Load(class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XmlReader , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class IXPathNavigable )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class IXPathNavigable , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XPathNavigator )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XPathNavigator , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(string , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class IXPathNavigable , class XmlResolver , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XmlReader , class XmlResolver , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance void Load(class XPathNavigator , class XmlResolver , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </Demand>
          </Method>
          <Method Sig="instance class XmlReader Transform(class XPathNavigator , class XsltArgumentList , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlReader Transform(class XPathNavigator , class XsltArgumentList )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class XmlWriter , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class XmlWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class Stream , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class TextWriter , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class XPathNavigator , class XsltArgumentList , class TextWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlReader Transform(class IXPathNavigable , class XsltArgumentList , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlReader Transform(class IXPathNavigable , class XsltArgumentList )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class TextWriter , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class TextWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class Stream , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class XmlWriter , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(class IXPathNavigable , class XsltArgumentList , class XmlWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , string , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Transform(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XsltSettings">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(bool , bool )" />
          <Method Sig="class XsltSettings get_Default()" />
          <Method Sig="class XsltSettings get_TrustedXslt()" />
          <Method Sig="instance bool get_EnableDocumentFunction()" />
          <Method Sig="instance void set_EnableDocumentFunction(bool )" />
          <Method Sig="instance bool get_EnableScript()" />
          <Method Sig="instance void set_EnableScript(bool )" />
        </Type>
      </Namespace>
      <Namespace Name="Schema">
        <Type Name="XmlSchemaDatatype">
          <Method Sig="instance class Type get_ValueType()" />
          <Method Sig="instance struct XmlTokenizedType get_TokenizedType()" />
          <Method Sig="instance object ParseValue(string , class XmlNameTable , class IXmlNamespaceResolver )" />
          <Method Sig="instance struct XmlSchemaDatatypeVariety get_Variety()" />
          <Method Sig="instance object ChangeType(object , class Type )" />
          <Method Sig="instance object ChangeType(object , class Type , class IXmlNamespaceResolver )" />
          <Method Sig="instance struct XmlTypeCode get_TypeCode()" />
          <Method Sig="instance bool IsDerivedFrom(class XmlSchemaDatatype )" />
        </Type>
        <Type Name="ValidationEventArgs">
          <Method Sig="instance struct XmlSeverityType get_Severity()" />
          <Method Sig="instance class XmlSchemaException get_Exception()" />
          <Method Sig="instance string get_Message()" />
        </Type>
        <Type Name="ValidationEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ValidationEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ValidationEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlAtomicValue">
          <Method Sig="instance class XmlAtomicValue Clone()" />
          <Method Sig="instance bool get_IsNode()" />
          <Method Sig="instance class XmlSchemaType get_XmlType()" />
          <Method Sig="instance class Type get_ValueType()" />
          <Method Sig="instance object get_TypedValue()" />
          <Method Sig="instance bool get_ValueAsBoolean()" />
          <Method Sig="instance struct DateTime get_ValueAsDateTime()" />
          <Method Sig="instance double get_ValueAsDouble()" />
          <Method Sig="instance int get_ValueAsInt()" />
          <Method Sig="instance in64 get_ValueAsLong()" />
          <Method Sig="instance object ValueAs(class Type , class IXmlNamespaceResolver )" />
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="XmlSchemaObject">
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance void set_LineNumber(int )" />
          <Method Sig="instance int get_LinePosition()" />
          <Method Sig="instance void set_LinePosition(int )" />
          <Method Sig="instance string get_SourceUri()" />
          <Method Sig="instance void set_SourceUri(string )" />
          <Method Sig="instance class XmlSchemaObject get_Parent()" />
          <Method Sig="instance void set_Parent(class XmlSchemaObject )" />
          <Method Sig="instance class XmlSerializerNamespaces get_Namespaces()" />
          <Method Sig="instance void set_Namespaces(class XmlSerializerNamespaces )" />
        </Type>
        <Type Name="XmlSchema">
          <Method Sig="instance void .ctor()" />
          <Method Sig="class XmlSchema Read(class TextReader , class ValidationEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class XmlSchema Read(class Stream , class ValidationEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="class XmlSchema Read(class XmlReader , class ValidationEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class Stream , class XmlNamespaceManager )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class TextWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class TextWriter , class XmlNamespaceManager )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class XmlWriter )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Write(class XmlWriter , class XmlNamespaceManager )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Compile(class ValidationEventHandler )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Compile(class ValidationEventHandler , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance struct XmlSchemaForm get_AttributeFormDefault()" />
          <Method Sig="instance void set_AttributeFormDefault(struct XmlSchemaForm )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_BlockDefault()" />
          <Method Sig="instance void set_BlockDefault(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_FinalDefault()" />
          <Method Sig="instance void set_FinalDefault(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance struct XmlSchemaForm get_ElementFormDefault()" />
          <Method Sig="instance void set_ElementFormDefault(struct XmlSchemaForm )" />
          <Method Sig="instance string get_TargetNamespace()" />
          <Method Sig="instance void set_TargetNamespace(string )" />
          <Method Sig="instance string get_Version()" />
          <Method Sig="instance void set_Version(string )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Includes()" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance bool get_IsCompiled()" />
          <Method Sig="instance class XmlSchemaObjectTable get_Attributes()" />
          <Method Sig="instance class XmlSchemaObjectTable get_AttributeGroups()" />
          <Method Sig="instance class XmlSchemaObjectTable get_SchemaTypes()" />
          <Method Sig="instance class XmlSchemaObjectTable get_Elements()" />
          <Method Sig="instance string get_Id()" />
          <Method Sig="instance void set_Id(string )" />
          <Method Sig="instance [] class XmlAttribute get_UnhandledAttributes()" />
          <Method Sig="instance void set_UnhandledAttributes([] class XmlAttribute )" />
          <Method Sig="instance class XmlSchemaObjectTable get_Groups()" />
          <Method Sig="instance class XmlSchemaObjectTable get_Notations()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSchemaAnnotated">
          <Method Sig="instance string get_Id()" />
          <Method Sig="instance void set_Id(string )" />
          <Method Sig="instance class XmlSchemaAnnotation get_Annotation()" />
          <Method Sig="instance void set_Annotation(class XmlSchemaAnnotation )" />
          <Method Sig="instance [] class XmlAttribute get_UnhandledAttributes()" />
          <Method Sig="instance void set_UnhandledAttributes([] class XmlAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaParticle">
          <Method Sig="instance string get_MinOccursString()" />
          <Method Sig="instance void set_MinOccursString(string )" />
          <Method Sig="instance string get_MaxOccursString()" />
          <Method Sig="instance void set_MaxOccursString(string )" />
          <Method Sig="instance struct Decimal get_MinOccurs()" />
          <Method Sig="instance void set_MinOccurs(struct Decimal )" />
          <Method Sig="instance struct Decimal get_MaxOccurs()" />
          <Method Sig="instance void set_MaxOccurs(struct Decimal )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSchemaGroupBase">
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
        </Type>
        <Type Name="XmlSchemaAll">
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAnnotation">
          <Method Sig="instance string get_Id()" />
          <Method Sig="instance void set_Id(string )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance [] class XmlAttribute get_UnhandledAttributes()" />
          <Method Sig="instance void set_UnhandledAttributes([] class XmlAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAny">
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance struct XmlSchemaContentProcessing get_ProcessContents()" />
          <Method Sig="instance void set_ProcessContents(struct XmlSchemaContentProcessing )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAnyAttribute">
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance struct XmlSchemaContentProcessing get_ProcessContents()" />
          <Method Sig="instance void set_ProcessContents(struct XmlSchemaContentProcessing )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAppInfo">
          <Method Sig="instance string get_Source()" />
          <Method Sig="instance void set_Source(string )" />
          <Method Sig="instance [] class XmlNode get_Markup()" />
          <Method Sig="instance void set_Markup([] class XmlNode )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAttribute">
          <Method Sig="instance string get_DefaultValue()" />
          <Method Sig="instance void set_DefaultValue(string )" />
          <Method Sig="instance string get_FixedValue()" />
          <Method Sig="instance void set_FixedValue(string )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class XmlQualifiedName get_RefName()" />
          <Method Sig="instance void set_RefName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlQualifiedName get_SchemaTypeName()" />
          <Method Sig="instance void set_SchemaTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaSimpleType get_SchemaType()" />
          <Method Sig="instance void set_SchemaType(class XmlSchemaSimpleType )" />
          <Method Sig="instance struct XmlSchemaUse get_Use()" />
          <Method Sig="instance void set_Use(struct XmlSchemaUse )" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance object get_AttributeType()" />
          <Method Sig="instance class XmlSchemaSimpleType get_AttributeSchemaType()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAttributeGroup">
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance class XmlSchemaAttributeGroup get_RedefinedAttributeGroup()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaAttributeGroupRef">
          <Method Sig="instance class XmlQualifiedName get_RefName()" />
          <Method Sig="instance void set_RefName(class XmlQualifiedName )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaChoice">
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class XmlNameTable )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class XmlNameTable get_NameTable()" />
          <Method Sig="instance void add_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance void remove_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance class XmlSchema Add(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(string , class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(string , class XmlReader , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(class XmlSchema )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(class XmlSchema , class XmlResolver )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Add(class XmlSchemaCollection )" />
          <Method Sig="instance class XmlSchema get_Item(string )" />
          <Method Sig="instance bool Contains(class XmlSchema )" />
          <Method Sig="instance bool Contains(string )" />
          <Method Sig="instance class XmlSchemaCollectionEnumerator GetEnumerator()" />
          <Method Sig="instance void CopyTo([] class XmlSchema , int )" />
        </Type>
        <Type Name="XmlSchemaCollectionEnumerator">
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance class XmlSchema get_Current()" />
        </Type>
        <Type Name="XmlSchemaContentModel">
          <Method Sig="instance class XmlSchemaContent get_Content()" />
          <Method Sig="instance void set_Content(class XmlSchemaContent )" />
        </Type>
        <Type Name="XmlSchemaComplexContent">
          <Method Sig="instance bool get_IsMixed()" />
          <Method Sig="instance void set_IsMixed(bool )" />
          <Method Sig="instance class XmlSchemaContent get_Content()" />
          <Method Sig="instance void set_Content(class XmlSchemaContent )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaComplexContentExtension">
          <Method Sig="instance class XmlQualifiedName get_BaseTypeName()" />
          <Method Sig="instance void set_BaseTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaParticle get_Particle()" />
          <Method Sig="instance void set_Particle(class XmlSchemaParticle )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaComplexContentRestriction">
          <Method Sig="instance class XmlQualifiedName get_BaseTypeName()" />
          <Method Sig="instance void set_BaseTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaParticle get_Particle()" />
          <Method Sig="instance void set_Particle(class XmlSchemaParticle )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaType">
          <Method Sig="class XmlSchemaSimpleType GetBuiltInSimpleType(class XmlQualifiedName )" />
          <Method Sig="class XmlSchemaSimpleType GetBuiltInSimpleType(struct XmlTypeCode )" />
          <Method Sig="class XmlSchemaComplexType GetBuiltInComplexType(struct XmlTypeCode )" />
          <Method Sig="class XmlSchemaComplexType GetBuiltInComplexType(class XmlQualifiedName )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_Final()" />
          <Method Sig="instance void set_Final(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_FinalResolved()" />
          <Method Sig="instance object get_BaseSchemaType()" />
          <Method Sig="instance class XmlSchemaType get_BaseXmlSchemaType()" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_DerivedBy()" />
          <Method Sig="instance class XmlSchemaDatatype get_Datatype()" />
          <Method Sig="instance bool get_IsMixed()" />
          <Method Sig="instance void set_IsMixed(bool )" />
          <Method Sig="instance struct XmlTypeCode get_TypeCode()" />
          <Method Sig="bool IsDerivedFrom(class XmlSchemaType , class XmlSchemaType , struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaComplexType">
          <Method Sig="void .cctor()" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_IsAbstract()" />
          <Method Sig="instance void set_IsAbstract(bool )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_Block()" />
          <Method Sig="instance void set_Block(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance bool get_IsMixed()" />
          <Method Sig="instance void set_IsMixed(bool )" />
          <Method Sig="instance class XmlSchemaContentModel get_ContentModel()" />
          <Method Sig="instance void set_ContentModel(class XmlSchemaContentModel )" />
          <Method Sig="instance class XmlSchemaParticle get_Particle()" />
          <Method Sig="instance void set_Particle(class XmlSchemaParticle )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance struct XmlSchemaContentType get_ContentType()" />
          <Method Sig="instance class XmlSchemaParticle get_ContentTypeParticle()" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_BlockResolved()" />
          <Method Sig="instance class XmlSchemaObjectTable get_AttributeUses()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AttributeWildcard()" />
        </Type>
        <Type Name="XmlSchemaDocumentation">
          <Method Sig="instance string get_Source()" />
          <Method Sig="instance void set_Source(string )" />
          <Method Sig="instance string get_Language()" />
          <Method Sig="instance void set_Language(string )" />
          <Method Sig="instance [] class XmlNode get_Markup()" />
          <Method Sig="instance void set_Markup([] class XmlNode )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSchemaElement">
          <Method Sig="instance bool get_IsAbstract()" />
          <Method Sig="instance void set_IsAbstract(bool )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_Block()" />
          <Method Sig="instance void set_Block(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance string get_DefaultValue()" />
          <Method Sig="instance void set_DefaultValue(string )" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_Final()" />
          <Method Sig="instance void set_Final(struct XmlSchemaDerivationMethod )" />
          <Method Sig="instance string get_FixedValue()" />
          <Method Sig="instance void set_FixedValue(string )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance bool get_IsNillable()" />
          <Method Sig="instance void set_IsNillable(bool )" />
          <Method Sig="instance class XmlQualifiedName get_RefName()" />
          <Method Sig="instance void set_RefName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlQualifiedName get_SubstitutionGroup()" />
          <Method Sig="instance void set_SubstitutionGroup(class XmlQualifiedName )" />
          <Method Sig="instance class XmlQualifiedName get_SchemaTypeName()" />
          <Method Sig="instance void set_SchemaTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaType get_SchemaType()" />
          <Method Sig="instance void set_SchemaType(class XmlSchemaType )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Constraints()" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance object get_ElementType()" />
          <Method Sig="instance class XmlSchemaType get_ElementSchemaType()" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_BlockResolved()" />
          <Method Sig="instance struct XmlSchemaDerivationMethod get_FinalResolved()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , class Exception , int , int )" />
          <Method Sig="instance string get_SourceUri()" />
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance int get_LinePosition()" />
          <Method Sig="instance class XmlSchemaObject get_SourceSchemaObject()" />
          <Method Sig="instance string get_Message()" />
        </Type>
        <Type Name="XmlSchemaExternal">
          <Method Sig="instance string get_SchemaLocation()" />
          <Method Sig="instance void set_SchemaLocation(string )" />
          <Method Sig="instance class XmlSchema get_Schema()" />
          <Method Sig="instance void set_Schema(class XmlSchema )" />
          <Method Sig="instance string get_Id()" />
          <Method Sig="instance void set_Id(string )" />
          <Method Sig="instance [] class XmlAttribute get_UnhandledAttributes()" />
          <Method Sig="instance void set_UnhandledAttributes([] class XmlAttribute )" />
        </Type>
        <Type Name="XmlSchemaFacet">
          <Method Sig="instance string get_Value()" />
          <Method Sig="instance void set_Value(string )" />
          <Method Sig="instance bool get_IsFixed()" />
          <Method Sig="instance void set_IsFixed(bool )" />
        </Type>
        <Type Name="XmlSchemaLengthFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMinLengthFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMaxLengthFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaPatternFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaEnumerationFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMinExclusiveFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMinInclusiveFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMaxExclusiveFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaMaxInclusiveFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaTotalDigitsFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaFractionDigitsFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaWhiteSpaceFacet">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaGroup">
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class XmlSchemaGroupBase get_Particle()" />
          <Method Sig="instance void set_Particle(class XmlSchemaGroupBase )" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaGroupRef">
          <Method Sig="instance class XmlQualifiedName get_RefName()" />
          <Method Sig="instance void set_RefName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaGroupBase get_Particle()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaIdentityConstraint">
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance class XmlSchemaXPath get_Selector()" />
          <Method Sig="instance void set_Selector(class XmlSchemaXPath )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Fields()" />
          <Method Sig="instance class XmlQualifiedName get_QualifiedName()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaXPath">
          <Method Sig="instance string get_XPath()" />
          <Method Sig="instance void set_XPath(string )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaUnique">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaKey">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaKeyref">
          <Method Sig="instance class XmlQualifiedName get_Refer()" />
          <Method Sig="instance void set_Refer(class XmlQualifiedName )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaImport">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance class XmlSchemaAnnotation get_Annotation()" />
          <Method Sig="instance void set_Annotation(class XmlSchemaAnnotation )" />
        </Type>
        <Type Name="XmlSchemaInclude">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class XmlSchemaAnnotation get_Annotation()" />
          <Method Sig="instance void set_Annotation(class XmlSchemaAnnotation )" />
        </Type>
        <Type Name="XmlSchemaInfo">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct XmlSchemaValidity get_Validity()" />
          <Method Sig="instance void set_Validity(struct XmlSchemaValidity )" />
          <Method Sig="instance bool get_IsDefault()" />
          <Method Sig="instance void set_IsDefault(bool )" />
          <Method Sig="instance bool get_IsNil()" />
          <Method Sig="instance void set_IsNil(bool )" />
          <Method Sig="instance class XmlSchemaSimpleType get_MemberType()" />
          <Method Sig="instance void set_MemberType(class XmlSchemaSimpleType )" />
          <Method Sig="instance class XmlSchemaType get_SchemaType()" />
          <Method Sig="instance void set_SchemaType(class XmlSchemaType )" />
          <Method Sig="instance class XmlSchemaElement get_SchemaElement()" />
          <Method Sig="instance void set_SchemaElement(class XmlSchemaElement )" />
          <Method Sig="instance class XmlSchemaAttribute get_SchemaAttribute()" />
          <Method Sig="instance void set_SchemaAttribute(class XmlSchemaAttribute )" />
          <Method Sig="instance struct XmlSchemaContentType get_ContentType()" />
          <Method Sig="instance void set_ContentType(struct XmlSchemaContentType )" />
        </Type>
        <Type Name="XmlSchemaNotation">
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Public()" />
          <Method Sig="instance void set_Public(string )" />
          <Method Sig="instance string get_System()" />
          <Method Sig="instance void set_System(string )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaObjectCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class XmlSchemaObject )" />
          <Method Sig="instance class XmlSchemaObject get_Item(int )" />
          <Method Sig="instance void set_Item(int , class XmlSchemaObject )" />
          <Method Sig="instance class XmlSchemaObjectEnumerator GetEnumerator()" />
          <Method Sig="instance int Add(class XmlSchemaObject )" />
          <Method Sig="instance void Insert(int , class XmlSchemaObject )" />
          <Method Sig="instance int IndexOf(class XmlSchemaObject )" />
          <Method Sig="instance bool Contains(class XmlSchemaObject )" />
          <Method Sig="instance void Remove(class XmlSchemaObject )" />
          <Method Sig="instance void CopyTo([] class XmlSchemaObject , int )" />
        </Type>
        <Type Name="XmlSchemaObjectEnumerator">
          <Method Sig="instance void Reset()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance class XmlSchemaObject get_Current()" />
        </Type>
        <Type Name="XmlSchemaObjectTable">
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance bool Contains(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaObject get_Item(class XmlQualifiedName )" />
          <Method Sig="instance class ICollection get_Names()" />
          <Method Sig="instance class ICollection get_Values()" />
          <Method Sig="instance class IDictionaryEnumerator GetEnumerator()" />
        </Type>
        <Type Name="XmlSchemaRedefine">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance class XmlSchemaObjectTable get_AttributeGroups()" />
          <Method Sig="instance class XmlSchemaObjectTable get_SchemaTypes()" />
          <Method Sig="instance class XmlSchemaObjectTable get_Groups()" />
        </Type>
        <Type Name="XmlSchemaSequence">
          <Method Sig="instance class XmlSchemaObjectCollection get_Items()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSet">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class XmlNameTable )" />
          <Method Sig="instance class XmlNameTable get_NameTable()" />
          <Method Sig="instance void add_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance void remove_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance bool get_IsCompiled()" />
          <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
          <Method Sig="instance class XmlSchemaCompilationSettings get_CompilationSettings()" />
          <Method Sig="instance void set_CompilationSettings(class XmlSchemaCompilationSettings )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance class XmlSchemaObjectTable get_GlobalElements()" />
          <Method Sig="instance class XmlSchemaObjectTable get_GlobalAttributes()" />
          <Method Sig="instance class XmlSchemaObjectTable get_GlobalTypes()" />
          <Method Sig="instance class XmlSchema Add(string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence, ControlPrincipal" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(string , class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Add(class XmlSchemaSet )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Add(class XmlSchema )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchema Remove(class XmlSchema )" />
          <Method Sig="instance bool RemoveRecursive(class XmlSchema )" />
          <Method Sig="instance bool Contains(string )" />
          <Method Sig="instance bool Contains(class XmlSchema )" />
          <Method Sig="instance void Compile()" />
          <Method Sig="instance class XmlSchema Reprocess(class XmlSchema )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void CopyTo([] class XmlSchema , int )" />
          <Method Sig="instance class ICollection Schemas()" />
          <Method Sig="instance class ICollection Schemas(string )" />
        </Type>
        <Type Name="XmlSchemaCompilationSettings">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_EnableUpaCheck()" />
          <Method Sig="instance void set_EnableUpaCheck(bool )" />
        </Type>
        <Type Name="XmlSchemaSimpleContent">
          <Method Sig="instance class XmlSchemaContent get_Content()" />
          <Method Sig="instance void set_Content(class XmlSchemaContent )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSimpleContentExtension">
          <Method Sig="instance class XmlQualifiedName get_BaseTypeName()" />
          <Method Sig="instance void set_BaseTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSimpleContentRestriction">
          <Method Sig="instance class XmlQualifiedName get_BaseTypeName()" />
          <Method Sig="instance void set_BaseTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaSimpleType get_BaseType()" />
          <Method Sig="instance void set_BaseType(class XmlSchemaSimpleType )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Facets()" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Attributes()" />
          <Method Sig="instance class XmlSchemaAnyAttribute get_AnyAttribute()" />
          <Method Sig="instance void set_AnyAttribute(class XmlSchemaAnyAttribute )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSimpleType">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class XmlSchemaSimpleTypeContent get_Content()" />
          <Method Sig="instance void set_Content(class XmlSchemaSimpleTypeContent )" />
        </Type>
        <Type Name="XmlSchemaSimpleTypeList">
          <Method Sig="instance class XmlQualifiedName get_ItemTypeName()" />
          <Method Sig="instance void set_ItemTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaSimpleType get_ItemType()" />
          <Method Sig="instance void set_ItemType(class XmlSchemaSimpleType )" />
          <Method Sig="instance class XmlSchemaSimpleType get_BaseItemType()" />
          <Method Sig="instance void set_BaseItemType(class XmlSchemaSimpleType )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSimpleTypeRestriction">
          <Method Sig="instance class XmlQualifiedName get_BaseTypeName()" />
          <Method Sig="instance void set_BaseTypeName(class XmlQualifiedName )" />
          <Method Sig="instance class XmlSchemaSimpleType get_BaseType()" />
          <Method Sig="instance void set_BaseType(class XmlSchemaSimpleType )" />
          <Method Sig="instance class XmlSchemaObjectCollection get_Facets()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaSimpleTypeUnion">
          <Method Sig="instance class XmlSchemaObjectCollection get_BaseTypes()" />
          <Method Sig="instance [] class XmlQualifiedName get_MemberTypes()" />
          <Method Sig="instance void set_MemberTypes([] class XmlQualifiedName )" />
          <Method Sig="instance [] class XmlSchemaSimpleType get_BaseMemberTypes()" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaValidationException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , class Exception , int , int )" />
          <Method Sig="instance object get_SourceObject()" />
        </Type>
        <Type Name="XmlValueGetter">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance object Invoke()" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
          <Method Sig="instance object EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlSchemaValidator">
          <Method Sig="instance void .ctor(class XmlNameTable , class XmlSchemaSet , class IXmlNamespaceResolver , struct XmlSchemaValidationFlags )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void set_XmlResolver(class XmlResolver )" />
          <Method Sig="instance class IXmlLineInfo get_LineInfoProvider()" />
          <Method Sig="instance void set_LineInfoProvider(class IXmlLineInfo )" />
          <Method Sig="instance class Uri get_SourceUri()" />
          <Method Sig="instance void set_SourceUri(class Uri )" />
          <Method Sig="instance object get_ValidationEventSender()" />
          <Method Sig="instance void set_ValidationEventSender(object )" />
          <Method Sig="instance void add_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance void remove_ValidationEventHandler(class ValidationEventHandler )" />
          <Method Sig="instance void AddSchema(class XmlSchema )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Initialize()" />
          <Method Sig="instance void Initialize(class XmlSchemaObject )" />
          <Method Sig="instance void ValidateElement(string , string , class XmlSchemaInfo )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ValidateElement(string , string , class XmlSchemaInfo , string , string , string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object ValidateAttribute(string , string , string , class XmlSchemaInfo )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object ValidateAttribute(string , string , class XmlValueGetter , class XmlSchemaInfo )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void GetUnspecifiedDefaultAttributes(class ArrayList )" />
          <Method Sig="instance void ValidateEndOfAttributes(class XmlSchemaInfo )" />
          <Method Sig="instance void ValidateText(string )" />
          <Method Sig="instance void ValidateText(class XmlValueGetter )" />
          <Method Sig="instance void ValidateWhitespace(string )" />
          <Method Sig="instance void ValidateWhitespace(class XmlValueGetter )" />
          <Method Sig="instance object ValidateEndElement(class XmlSchemaInfo )" />
          <Method Sig="instance object ValidateEndElement(class XmlSchemaInfo , object )" />
          <Method Sig="instance void SkipToEndElement(class XmlSchemaInfo )" />
          <Method Sig="instance void EndValidation()" />
          <Method Sig="instance [] class XmlSchemaParticle GetExpectedParticles()" />
          <Method Sig="instance [] class XmlSchemaAttribute GetExpectedAttributes()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSchemaInference">
          <Method Sig="instance void set_Occurrence(struct InferenceOption )" />
          <Method Sig="instance struct InferenceOption get_Occurrence()" />
          <Method Sig="instance void set_TypeInference(struct InferenceOption )" />
          <Method Sig="instance struct InferenceOption get_TypeInference()" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class XmlSchemaSet InferSchema(class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSchemaSet InferSchema(class XmlReader , class XmlSchemaSet )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSchemaInferenceException">
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , class Exception )" />
          <Method Sig="instance void .ctor(string , class Exception , int , int )" />
        </Type>
      </Namespace>
      <Namespace Name="Serialization">
        <Type Name="CodeExporter">
          <Method Sig="instance class CodeAttributeDeclarationCollection get_IncludeMetadata()" />
        </Type>
        <Type Name="CodeIdentifier">
          <Method Sig="instance void .ctor()" />
          <Method Sig="string MakePascal(string )" />
          <Method Sig="string MakeCamel(string )" />
          <Method Sig="string MakeValid(string )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="CodeIdentifiers">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(bool )" />
          <Method Sig="instance void Clear()" />
          <Method Sig="instance bool get_UseCamelCasing()" />
          <Method Sig="instance void set_UseCamelCasing(bool )" />
          <Method Sig="instance string MakeRightCase(string )" />
          <Method Sig="instance string MakeUnique(string )" />
          <Method Sig="instance void AddReserved(string )" />
          <Method Sig="instance void RemoveReserved(string )" />
          <Method Sig="instance string AddUnique(string , object )" />
          <Method Sig="instance bool IsInUse(string )" />
          <Method Sig="instance void Add(string , object )" />
          <Method Sig="instance void Remove(string )" />
          <Method Sig="instance object ToArray(class Type )" />
        </Type>
        <Type Name="ImportContext">
          <Method Sig="instance void .ctor(class CodeIdentifiers , bool )" />
          <Method Sig="instance class CodeIdentifiers get_TypeIdentifiers()" />
          <Method Sig="instance bool get_ShareTypes()" />
          <Method Sig="instance class StringCollection get_Warnings()" />
        </Type>
        <Type Name="SchemaImporter">
          <Method Sig="instance class SchemaImporterExtensionCollection get_Extensions()" />
        </Type>
        <Type Name="SoapAttributeAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_AttributeName()" />
          <Method Sig="instance void set_AttributeName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
        </Type>
        <Type Name="SoapAttributeOverrides">
          <Method Sig="instance void Add(class Type , class SoapAttributes )" />
          <Method Sig="instance void Add(class Type , string , class SoapAttributes )" />
          <Method Sig="instance class SoapAttributes get_Item(class Type )" />
          <Method Sig="instance class SoapAttributes get_Item(class Type , string )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SoapAttributes">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class ICustomAttributeProvider )" />
          <Method Sig="instance class SoapTypeAttribute get_SoapType()" />
          <Method Sig="instance void set_SoapType(class SoapTypeAttribute )" />
          <Method Sig="instance class SoapEnumAttribute get_SoapEnum()" />
          <Method Sig="instance void set_SoapEnum(class SoapEnumAttribute )" />
          <Method Sig="instance bool get_SoapIgnore()" />
          <Method Sig="instance void set_SoapIgnore(bool )" />
          <Method Sig="instance class SoapElementAttribute get_SoapElement()" />
          <Method Sig="instance void set_SoapElement(class SoapElementAttribute )" />
          <Method Sig="instance class SoapAttributeAttribute get_SoapAttribute()" />
          <Method Sig="instance void set_SoapAttribute(class SoapAttributeAttribute )" />
          <Method Sig="instance object get_SoapDefaultValue()" />
          <Method Sig="instance void set_SoapDefaultValue(object )" />
        </Type>
        <Type Name="SoapCodeExporter">
          <Method Sig="instance void .ctor(class CodeNamespace )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , struct CodeGenerationOptions )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , struct CodeGenerationOptions , class Hashtable )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , class CodeDomProvider , struct CodeGenerationOptions , class Hashtable )" />
          <Method Sig="instance void ExportTypeMapping(class XmlTypeMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddMappingMetadata(class CodeAttributeDeclarationCollection , class XmlMemberMapping , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddMappingMetadata(class CodeAttributeDeclarationCollection , class XmlMemberMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="SoapElementAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_ElementName()" />
          <Method Sig="instance void set_ElementName(string )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
          <Method Sig="instance bool get_IsNullable()" />
          <Method Sig="instance void set_IsNullable(bool )" />
        </Type>
        <Type Name="SoapEnumAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
        </Type>
        <Type Name="SoapIgnoreAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SoapIncludeAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
        </Type>
        <Type Name="SoapReflectionImporter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class SoapAttributeOverrides )" />
          <Method Sig="instance void .ctor(class SoapAttributeOverrides , string )" />
          <Method Sig="instance void IncludeTypes(class ICustomAttributeProvider )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void IncludeType(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool , bool , struct XmlMappingAccess )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="SoapSchemaExporter">
          <Method Sig="instance void .ctor(class XmlSchemas )" />
          <Method Sig="instance void ExportTypeMapping(class XmlTypeMapping )" />
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping )" />
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping , bool )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="SoapSchemaImporter">
          <Method Sig="instance void .ctor(class XmlSchemas )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , class CodeIdentifiers )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , class CodeIdentifiers , struct CodeGenerationOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , struct CodeGenerationOptions , class ImportContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , struct CodeGenerationOptions , class CodeDomProvider , class ImportContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportDerivedTypeMapping(class XmlQualifiedName , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , class SoapSchemaMember )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class SoapSchemaMember )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class SoapSchemaMember , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class SoapSchemaMember , bool , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="SoapSchemaMember">
          <Method Sig="instance class XmlQualifiedName get_MemberType()" />
          <Method Sig="instance void set_MemberType(class XmlQualifiedName )" />
          <Method Sig="instance string get_MemberName()" />
          <Method Sig="instance void set_MemberName(string )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="SoapTypeAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance bool get_IncludeInSchema()" />
          <Method Sig="instance void set_IncludeInSchema(bool )" />
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance void set_TypeName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
        </Type>
        <Type Name="XmlAnyAttributeAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlAnyElementAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance int get_Order()" />
          <Method Sig="instance void set_Order(int )" />
        </Type>
        <Type Name="XmlAnyElementAttributes">
          <Method Sig="instance class XmlAnyElementAttribute get_Item(int )" />
          <Method Sig="instance void set_Item(int , class XmlAnyElementAttribute )" />
          <Method Sig="instance int Add(class XmlAnyElementAttribute )" />
          <Method Sig="instance void Insert(int , class XmlAnyElementAttribute )" />
          <Method Sig="instance int IndexOf(class XmlAnyElementAttribute )" />
          <Method Sig="instance bool Contains(class XmlAnyElementAttribute )" />
          <Method Sig="instance void Remove(class XmlAnyElementAttribute )" />
          <Method Sig="instance void CopyTo([] class XmlAnyElementAttribute , int )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlArrayAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_ElementName()" />
          <Method Sig="instance void set_ElementName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance bool get_IsNullable()" />
          <Method Sig="instance void set_IsNullable(bool )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
          <Method Sig="instance int get_Order()" />
          <Method Sig="instance void set_Order(int )" />
        </Type>
        <Type Name="XmlArrayItemAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance void .ctor(string , class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
          <Method Sig="instance string get_ElementName()" />
          <Method Sig="instance void set_ElementName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance int get_NestingLevel()" />
          <Method Sig="instance void set_NestingLevel(int )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
          <Method Sig="instance bool get_IsNullable()" />
          <Method Sig="instance void set_IsNullable(bool )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
        </Type>
        <Type Name="XmlArrayItemAttributes">
          <Method Sig="instance class XmlArrayItemAttribute get_Item(int )" />
          <Method Sig="instance void set_Item(int , class XmlArrayItemAttribute )" />
          <Method Sig="instance int Add(class XmlArrayItemAttribute )" />
          <Method Sig="instance void Insert(int , class XmlArrayItemAttribute )" />
          <Method Sig="instance int IndexOf(class XmlArrayItemAttribute )" />
          <Method Sig="instance bool Contains(class XmlArrayItemAttribute )" />
          <Method Sig="instance void Remove(class XmlArrayItemAttribute )" />
          <Method Sig="instance void CopyTo([] class XmlArrayItemAttribute , int )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlAttributeAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance void .ctor(string , class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
          <Method Sig="instance string get_AttributeName()" />
          <Method Sig="instance void set_AttributeName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
        </Type>
        <Type Name="XmlAttributeOverrides">
          <Method Sig="instance void Add(class Type , class XmlAttributes )" />
          <Method Sig="instance void Add(class Type , string , class XmlAttributes )" />
          <Method Sig="instance class XmlAttributes get_Item(class Type )" />
          <Method Sig="instance class XmlAttributes get_Item(class Type , string )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlAttributes">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class ICustomAttributeProvider )" />
          <Method Sig="instance class XmlElementAttributes get_XmlElements()" />
          <Method Sig="instance class XmlAttributeAttribute get_XmlAttribute()" />
          <Method Sig="instance void set_XmlAttribute(class XmlAttributeAttribute )" />
          <Method Sig="instance class XmlEnumAttribute get_XmlEnum()" />
          <Method Sig="instance void set_XmlEnum(class XmlEnumAttribute )" />
          <Method Sig="instance class XmlTextAttribute get_XmlText()" />
          <Method Sig="instance void set_XmlText(class XmlTextAttribute )" />
          <Method Sig="instance class XmlArrayAttribute get_XmlArray()" />
          <Method Sig="instance void set_XmlArray(class XmlArrayAttribute )" />
          <Method Sig="instance class XmlArrayItemAttributes get_XmlArrayItems()" />
          <Method Sig="instance object get_XmlDefaultValue()" />
          <Method Sig="instance void set_XmlDefaultValue(object )" />
          <Method Sig="instance bool get_XmlIgnore()" />
          <Method Sig="instance void set_XmlIgnore(bool )" />
          <Method Sig="instance class XmlTypeAttribute get_XmlType()" />
          <Method Sig="instance void set_XmlType(class XmlTypeAttribute )" />
          <Method Sig="instance class XmlRootAttribute get_XmlRoot()" />
          <Method Sig="instance void set_XmlRoot(class XmlRootAttribute )" />
          <Method Sig="instance class XmlAnyElementAttributes get_XmlAnyElements()" />
          <Method Sig="instance class XmlAnyAttributeAttribute get_XmlAnyAttribute()" />
          <Method Sig="instance void set_XmlAnyAttribute(class XmlAnyAttributeAttribute )" />
          <Method Sig="instance class XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier()" />
          <Method Sig="instance bool get_Xmlns()" />
          <Method Sig="instance void set_Xmlns(bool )" />
        </Type>
        <Type Name="XmlChoiceIdentifierAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_MemberName()" />
          <Method Sig="instance void set_MemberName(string )" />
        </Type>
        <Type Name="XmlCodeExporter">
          <Method Sig="instance void .ctor(class CodeNamespace )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , struct CodeGenerationOptions )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , struct CodeGenerationOptions , class Hashtable )" />
          <Method Sig="instance void .ctor(class CodeNamespace , class CodeCompileUnit , class CodeDomProvider , struct CodeGenerationOptions , class Hashtable )" />
          <Method Sig="instance void ExportTypeMapping(class XmlTypeMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddMappingMetadata(class CodeAttributeDeclarationCollection , class XmlTypeMapping , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddMappingMetadata(class CodeAttributeDeclarationCollection , class XmlMemberMapping , string , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void AddMappingMetadata(class CodeAttributeDeclarationCollection , class XmlMemberMapping , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XmlElementAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance void .ctor(string , class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
          <Method Sig="instance string get_ElementName()" />
          <Method Sig="instance void set_ElementName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
          <Method Sig="instance bool get_IsNullable()" />
          <Method Sig="instance void set_IsNullable(bool )" />
          <Method Sig="instance struct XmlSchemaForm get_Form()" />
          <Method Sig="instance void set_Form(struct XmlSchemaForm )" />
          <Method Sig="instance int get_Order()" />
          <Method Sig="instance void set_Order(int )" />
        </Type>
        <Type Name="XmlElementAttributes">
          <Method Sig="instance class XmlElementAttribute get_Item(int )" />
          <Method Sig="instance void set_Item(int , class XmlElementAttribute )" />
          <Method Sig="instance int Add(class XmlElementAttribute )" />
          <Method Sig="instance void Insert(int , class XmlElementAttribute )" />
          <Method Sig="instance int IndexOf(class XmlElementAttribute )" />
          <Method Sig="instance bool Contains(class XmlElementAttribute )" />
          <Method Sig="instance void Remove(class XmlElementAttribute )" />
          <Method Sig="instance void CopyTo([] class XmlElementAttribute , int )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlEnumAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance void set_Name(string )" />
        </Type>
        <Type Name="XmlIgnoreAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlIncludeAttribute">
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
        </Type>
        <Type Name="XmlMapping">
          <Method Sig="instance string get_ElementName()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_XsdElementName()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void SetKey(string )" />
        </Type>
        <Type Name="XmlMemberMapping">
          <Method Sig="instance bool get_Any()" />
          <Method Sig="instance string get_ElementName()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string get_XsdElementName()" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance string get_MemberName()" />
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance string get_TypeNamespace()" />
          <Method Sig="instance string get_TypeFullName()" />
          <Method Sig="instance bool get_CheckSpecified()" />
          <Method Sig="instance string GenerateTypeName(class CodeDomProvider )" />
        </Type>
        <Type Name="XmlMembersMapping">
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance string get_TypeNamespace()" />
          <Method Sig="instance class XmlMemberMapping get_Item(int )" />
          <Method Sig="instance int get_Count()" />
        </Type>
        <Type Name="XmlNamespaceDeclarationsAttribute">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlReflectionImporter">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class XmlAttributeOverrides )" />
          <Method Sig="instance void .ctor(class XmlAttributeOverrides , string )" />
          <Method Sig="instance void IncludeTypes(class ICustomAttributeProvider )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void IncludeType(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type , class XmlRootAttribute )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class Type , class XmlRootAttribute , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class XmlReflectionMember , bool , bool , bool , struct XmlMappingAccess )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XmlReflectionMember">
          <Method Sig="instance class Type get_MemberType()" />
          <Method Sig="instance void set_MemberType(class Type )" />
          <Method Sig="instance class XmlAttributes get_XmlAttributes()" />
          <Method Sig="instance void set_XmlAttributes(class XmlAttributes )" />
          <Method Sig="instance class SoapAttributes get_SoapAttributes()" />
          <Method Sig="instance void set_SoapAttributes(class SoapAttributes )" />
          <Method Sig="instance string get_MemberName()" />
          <Method Sig="instance void set_MemberName(string )" />
          <Method Sig="instance bool get_IsReturnValue()" />
          <Method Sig="instance void set_IsReturnValue(bool )" />
          <Method Sig="instance bool get_OverrideIsNullable()" />
          <Method Sig="instance void set_OverrideIsNullable(bool )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlRootAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_ElementName()" />
          <Method Sig="instance void set_ElementName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
          <Method Sig="instance bool get_IsNullable()" />
          <Method Sig="instance void set_IsNullable(bool )" />
        </Type>
        <Type Name="XmlSchemaExporter">
          <Method Sig="instance void .ctor(class XmlSchemas )" />
          <Method Sig="instance void ExportTypeMapping(class XmlTypeMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlQualifiedName ExportTypeMapping(class XmlMembersMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void ExportMembersMapping(class XmlMembersMapping , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance string ExportAnyType(string )" />
          <Method Sig="instance string ExportAnyType(class XmlMembersMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XmlSchemaImporter">
          <Method Sig="instance void .ctor(class XmlSchemas )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , class CodeIdentifiers )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , class CodeIdentifiers , struct CodeGenerationOptions )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , struct CodeGenerationOptions , class ImportContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlSchemas , struct CodeGenerationOptions , class CodeDomProvider , class ImportContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportDerivedTypeMapping(class XmlQualifiedName , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportDerivedTypeMapping(class XmlQualifiedName , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportSchemaType(class XmlQualifiedName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportSchemaType(class XmlQualifiedName , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportSchemaType(class XmlQualifiedName , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlTypeMapping ImportTypeMapping(class XmlQualifiedName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(class XmlQualifiedName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportAnyType(class XmlQualifiedName , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping([] class XmlQualifiedName )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping([] class XmlQualifiedName , class Type , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlMembersMapping ImportMembersMapping(string , string , [] class SoapSchemaMember )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XmlSchemaProviderAttribute">
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance string get_MethodName()" />
          <Method Sig="instance bool get_IsAny()" />
          <Method Sig="instance void set_IsAny(bool )" />
        </Type>
        <Type Name="XmlSchemas">
          <Method Sig="instance class XmlSchema get_Item(int )" />
          <Method Sig="instance void set_Item(int , class XmlSchema )" />
          <Method Sig="instance class XmlSchema get_Item(string )" />
          <Method Sig="instance class IList GetSchemas(string )" />
          <Method Sig="instance int Add(class XmlSchema )" />
          <Method Sig="instance int Add(class XmlSchema , class Uri )" />
          <Method Sig="instance void Add(class XmlSchemas )" />
          <Method Sig="instance void AddReference(class XmlSchema )" />
          <Method Sig="instance void Insert(int , class XmlSchema )" />
          <Method Sig="instance int IndexOf(class XmlSchema )" />
          <Method Sig="instance bool Contains(class XmlSchema )" />
          <Method Sig="instance bool Contains(string )" />
          <Method Sig="instance void Remove(class XmlSchema )" />
          <Method Sig="instance void CopyTo([] class XmlSchema , int )" />
          <Method Sig="instance object Find(class XmlQualifiedName , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="bool IsDataSet(class XmlSchema )" />
          <Method Sig="instance bool get_IsCompiled()" />
          <Method Sig="instance void Compile(class ValidationEventHandler , bool )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="XmlSchemaEnumerator">
          <Method Sig="instance void .ctor(class XmlSchemas )" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance bool MoveNext()" />
          <Method Sig="instance class XmlSchema get_Current()" />
        </Type>
        <Type Name="XmlSerializationReader">
          <Method Sig="void .cctor()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="XmlSerializationFixupCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlSerializationCollectionFixupCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , object )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , object , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlSerializationReadCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance object Invoke()" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
          <Method Sig="instance object EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlSerializationWriteCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlSerializerAssemblyAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(string , string )" />
          <Method Sig="instance string get_CodeBase()" />
          <Method Sig="instance void set_CodeBase(string )" />
          <Method Sig="instance string get_AssemblyName()" />
          <Method Sig="instance void set_AssemblyName(string )" />
        </Type>
        <Type Name="XmlDeserializationEvents">
          <Method Sig="instance class XmlNodeEventHandler get_OnUnknownNode()" />
          <Method Sig="instance void set_OnUnknownNode(class XmlNodeEventHandler )" />
          <Method Sig="instance class XmlAttributeEventHandler get_OnUnknownAttribute()" />
          <Method Sig="instance void set_OnUnknownAttribute(class XmlAttributeEventHandler )" />
          <Method Sig="instance class XmlElementEventHandler get_OnUnknownElement()" />
          <Method Sig="instance void set_OnUnknownElement(class XmlElementEventHandler )" />
          <Method Sig="instance class UnreferencedObjectEventHandler get_OnUnreferencedObject()" />
          <Method Sig="instance void set_OnUnreferencedObject(class UnreferencedObjectEventHandler )" />
        </Type>
        <Type Name="XmlSerializerImplementation">
          <Method Sig="instance class XmlSerializationReader get_Reader()" />
          <Method Sig="instance class XmlSerializationWriter get_Writer()" />
          <Method Sig="instance class Hashtable get_ReadMethods()" />
          <Method Sig="instance class Hashtable get_WriteMethods()" />
          <Method Sig="instance class Hashtable get_TypedSerializers()" />
          <Method Sig="instance bool CanSerialize(class Type )" />
          <Method Sig="instance class XmlSerializer GetSerializer(class Type )" />
        </Type>
        <Type Name="XmlSerializer">
          <Method Sig="instance void .ctor(class Type , class XmlAttributeOverrides , [] class Type , class XmlRootAttribute , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type , class XmlRootAttribute )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type , [] class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type , class XmlAttributeOverrides )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class XmlTypeMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor(class Type , class XmlAttributeOverrides , [] class Type , class XmlRootAttribute , string , string , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Serialize(class TextWriter , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class TextWriter , object , class XmlSerializerNamespaces )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class Stream , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class Stream , object , class XmlSerializerNamespaces )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class XmlWriter , object )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class XmlWriter , object , class XmlSerializerNamespaces )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class XmlWriter , object , class XmlSerializerNamespaces , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void Serialize(class XmlWriter , object , class XmlSerializerNamespaces , string , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class Stream )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class TextReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class XmlReader )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class XmlReader , struct XmlDeserializationEvents )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class XmlReader , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance object Deserialize(class XmlReader , string , struct XmlDeserializationEvents )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance bool CanDeserialize(class XmlReader )" />
          <Method Sig="[] class XmlSerializer FromMappings([] class XmlMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="[] class XmlSerializer FromMappings([] class XmlMapping , class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="[] class XmlSerializer FromMappings([] class XmlMapping , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="class Assembly GenerateSerializer([] class Type , [] class XmlMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="class Assembly GenerateSerializer([] class Type , [] class XmlMapping , class CompilerParameters )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="[] class XmlSerializer FromTypes([] class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="string GetXmlSerializerAssemblyName(class Type )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="string GetXmlSerializerAssemblyName(class Type , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void add_UnknownNode(class XmlNodeEventHandler )" />
          <Method Sig="instance void remove_UnknownNode(class XmlNodeEventHandler )" />
          <Method Sig="instance void add_UnknownAttribute(class XmlAttributeEventHandler )" />
          <Method Sig="instance void remove_UnknownAttribute(class XmlAttributeEventHandler )" />
          <Method Sig="instance void add_UnknownElement(class XmlElementEventHandler )" />
          <Method Sig="instance void remove_UnknownElement(class XmlElementEventHandler )" />
          <Method Sig="instance void add_UnreferencedObject(class UnreferencedObjectEventHandler )" />
          <Method Sig="instance void remove_UnreferencedObject(class UnreferencedObjectEventHandler )" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSerializerFactory">
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , class XmlAttributeOverrides , [] class Type , class XmlRootAttribute , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , class XmlRootAttribute )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , [] class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , class XmlAttributeOverrides )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class XmlTypeMapping )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , string )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode, ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance class XmlSerializer CreateSerializer(class Type , class XmlAttributeOverrides , [] class Type , class XmlRootAttribute , string , string , class Evidence )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="ControlEvidence" />
                <IPermission version="1" class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
          </Method>
          <Method Sig="instance void .ctor()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="XmlSerializerNamespaces">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class XmlSerializerNamespaces )" />
          <Method Sig="instance void .ctor([] class XmlQualifiedName )" />
          <Method Sig="instance void Add(string , string )" />
          <Method Sig="instance [] class XmlQualifiedName ToArray()" />
          <Method Sig="instance int get_Count()" />
        </Type>
        <Type Name="XmlSerializerVersionAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance string get_ParentAssemblyId()" />
          <Method Sig="instance void set_ParentAssemblyId(string )" />
          <Method Sig="instance string get_Version()" />
          <Method Sig="instance void set_Version(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
        </Type>
        <Type Name="XmlTextAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class Type )" />
          <Method Sig="instance class Type get_Type()" />
          <Method Sig="instance void set_Type(class Type )" />
          <Method Sig="instance string get_DataType()" />
          <Method Sig="instance void set_DataType(string )" />
        </Type>
        <Type Name="XmlTypeAttribute">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance bool get_AnonymousType()" />
          <Method Sig="instance void set_AnonymousType(bool )" />
          <Method Sig="instance bool get_IncludeInSchema()" />
          <Method Sig="instance void set_IncludeInSchema(bool )" />
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance void set_TypeName(string )" />
          <Method Sig="instance string get_Namespace()" />
          <Method Sig="instance void set_Namespace(string )" />
        </Type>
        <Type Name="XmlTypeMapping">
          <Method Sig="instance string get_TypeName()" />
          <Method Sig="instance string get_TypeFullName()" />
          <Method Sig="instance string get_XsdTypeName()" />
          <Method Sig="instance string get_XsdTypeNamespace()" />
        </Type>
        <Type Name="XmlAttributeEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class XmlAttributeEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class XmlAttributeEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlAttributeEventArgs">
          <Method Sig="instance object get_ObjectBeingDeserialized()" />
          <Method Sig="instance class XmlAttribute get_Attr()" />
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance int get_LinePosition()" />
          <Method Sig="instance string get_ExpectedAttributes()" />
        </Type>
        <Type Name="XmlElementEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class XmlElementEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class XmlElementEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlElementEventArgs">
          <Method Sig="instance object get_ObjectBeingDeserialized()" />
          <Method Sig="instance class XmlElement get_Element()" />
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance int get_LinePosition()" />
          <Method Sig="instance string get_ExpectedElements()" />
        </Type>
        <Type Name="XmlNodeEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class XmlNodeEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class XmlNodeEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="XmlNodeEventArgs">
          <Method Sig="instance object get_ObjectBeingDeserialized()" />
          <Method Sig="instance struct XmlNodeType get_NodeType()" />
          <Method Sig="instance string get_Name()" />
          <Method Sig="instance string get_LocalName()" />
          <Method Sig="instance string get_NamespaceURI()" />
          <Method Sig="instance string get_Text()" />
          <Method Sig="instance int get_LineNumber()" />
          <Method Sig="instance int get_LinePosition()" />
        </Type>
        <Type Name="UnreferencedObjectEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class UnreferencedObjectEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class UnreferencedObjectEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="UnreferencedObjectEventArgs">
          <Method Sig="instance void .ctor(object , string )" />
          <Method Sig="instance object get_UnreferencedObject()" />
          <Method Sig="instance string get_UnreferencedId()" />
        </Type>
        <Namespace Name="Advanced">
          <Type Name="SchemaImporterExtension">
            <Method Sig="instance string ImportSchemaType(string , string , class XmlSchemaObject , class XmlSchemas , class XmlSchemaImporter , class CodeCompileUnit , class CodeNamespace , struct CodeGenerationOptions , class CodeDomProvider )" />
            <Method Sig="instance string ImportSchemaType(class XmlSchemaType , class XmlSchemaObject , class XmlSchemas , class XmlSchemaImporter , class CodeCompileUnit , class CodeNamespace , struct CodeGenerationOptions , class CodeDomProvider )" />
            <Method Sig="instance string ImportAnyElement(class XmlSchemaAny , bool , class XmlSchemas , class XmlSchemaImporter , class CodeCompileUnit , class CodeNamespace , struct CodeGenerationOptions , class CodeDomProvider )" />
            <Method Sig="instance class CodeExpression ImportDefaultValue(string , string )" />
          </Type>
          <Type Name="SchemaImporterExtensionCollection">
            <Method Sig="instance int Add(class SchemaImporterExtension )" />
            <Method Sig="instance int Add(string , class Type )">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet">
                  <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="MemberAccess" />
                </PermissionSet>
              </Demand>
            </Method>
            <Method Sig="instance void Remove(string )" />
            <Method Sig="instance void Clear()" />
            <Method Sig="instance class SchemaImporterExtension get_Item(int )" />
            <Method Sig="instance void set_Item(int , class SchemaImporterExtension )" />
            <Method Sig="instance void Insert(int , class SchemaImporterExtension )" />
            <Method Sig="instance int IndexOf(class SchemaImporterExtension )" />
            <Method Sig="instance bool Contains(class SchemaImporterExtension )" />
            <Method Sig="instance void Remove(class SchemaImporterExtension )" />
            <Method Sig="instance void CopyTo([] class SchemaImporterExtension , int )" />
            <Method Sig="instance void .ctor()" />
          </Type>
        </Namespace>
        <Namespace Name="Configuration">
          <Type Name="DateTimeSerializationSection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance struct DateTimeSerializationMode get_Mode()" />
            <Method Sig="instance void set_Mode(struct DateTimeSerializationMode )" />
          </Type>
          <Type Name="SchemaImporterExtensionElement">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance void .ctor(string , string )" />
            <Method Sig="instance void .ctor(string , class Type )" />
            <Method Sig="instance string get_Name()" />
            <Method Sig="instance void set_Name(string )" />
            <Method Sig="instance class Type get_Type()" />
            <Method Sig="instance void set_Type(class Type )" />
          </Type>
          <Type Name="SchemaImporterExtensionElementCollection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance class SchemaImporterExtensionElement get_Item(int )" />
            <Method Sig="instance void set_Item(int , class SchemaImporterExtensionElement )" />
            <Method Sig="instance class SchemaImporterExtensionElement get_Item(string )" />
            <Method Sig="instance void set_Item(string , class SchemaImporterExtensionElement )" />
            <Method Sig="instance void Add(class SchemaImporterExtensionElement )" />
            <Method Sig="instance void Clear()" />
            <Method Sig="instance int IndexOf(class SchemaImporterExtensionElement )" />
            <Method Sig="instance void Remove(class SchemaImporterExtensionElement )" />
            <Method Sig="instance void Remove(string )" />
            <Method Sig="instance void RemoveAt(int )" />
          </Type>
          <Type Name="SchemaImporterExtensionsSection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance class SchemaImporterExtensionElementCollection get_SchemaImporterExtensions()" />
          </Type>
          <Type Name="SerializationSectionGroup">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance class SchemaImporterExtensionsSection get_SchemaImporterExtensions()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
              </Demand>
            </Method>
            <Method Sig="instance class DateTimeSerializationSection get_DateTimeSerialization()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
              </Demand>
            </Method>
            <Method Sig="instance class XmlSerializerSection get_XmlSerializer()">
              <Demand>
                <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
              </Demand>
            </Method>
          </Type>
          <Type Name="XmlSerializerSection">
            <Method Sig="instance void .ctor()" />
            <Method Sig="instance bool get_CheckDeserializeAdvances()" />
            <Method Sig="instance void set_CheckDeserializeAdvances(bool )" />
          </Type>
        </Namespace>
      </Namespace>
    </Namespace>
  </Namespace>
</Assembly>
