<?xml version="1.0"?>
<Assembly>
  <Type Name="RECT">
    <Method Sig="instance void .ctor(int , int , int , int )" />
    <Method Sig="instance void .ctor(struct Rectangle )" />
    <Method Sig="struct RECT FromXYWH(int , int , int , int )" />
    <Method Sig="instance struct Size get_Size()" />
    <Method Sig="instance struct Rectangle ToRectangle()" />
  </Type>
  <Type Name="POINT">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance void .ctor(int , int )" />
    <Method Sig="instance struct Point ToPoint()" />
  </Type>
  <Type Name="DRAWTEXTPARAMS">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance void .ctor(class DRAWTEXTPARAMS )" />
    <Method Sig="instance void .ctor(int , int )" />
  </Type>
  <Type Name="LOGBRUSH">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="LOGFONT">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance void .ctor(class LOGFONT )" />
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance void .ctor(class LOGFONT )" />
    <Method Sig="instance string ToString()" />
  </Type>
  <Type Name="SIZE">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance void .ctor(int , int )" />
    <Method Sig="instance struct Size ToSize()" />
  </Type>
  <Type Name="CommonHandles">
    <Method Sig="void .cctor()" />
    <Method Sig="instance void .ctor()" />
    <Method Sig="void .cctor()" />
    <Method Sig="instance void .ctor()" />
  </Type>
  <Namespace Name="System">
    <Namespace Name="Drawing">
      <Type Name="Image">
        <Method Sig="instance object get_Tag()" />
        <Method Sig="instance void set_Tag(object )" />
        <Method Sig="class Image FromFile(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Image FromFile(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="class Image FromStream(class Stream )" />
        <Method Sig="class Image FromStream(class Stream , bool )" />
        <Method Sig="class Image FromStream(class Stream , bool , bool )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class EncoderParameters GetEncoderParameterList(struct Guid )" />
        <Method Sig="instance void Save(string )" />
        <Method Sig="instance void Save(string , class ImageFormat )" />
        <Method Sig="instance void Save(string , class ImageCodecInfo , class EncoderParameters )" />
        <Method Sig="instance void Save(class Stream , class ImageFormat )" />
        <Method Sig="instance void Save(class Stream , class ImageCodecInfo , class EncoderParameters )" />
        <Method Sig="instance void SaveAdd(class EncoderParameters )" />
        <Method Sig="instance void SaveAdd(class Image , class EncoderParameters )" />
        <Method Sig="instance struct SizeF get_PhysicalDimension()" />
        <Method Sig="instance struct Size get_Size()" />
        <Method Sig="instance int get_Width()" />
        <Method Sig="instance int get_Height()" />
        <Method Sig="instance float get_HorizontalResolution()" />
        <Method Sig="instance float get_VerticalResolution()" />
        <Method Sig="instance int get_Flags()" />
        <Method Sig="instance class ImageFormat get_RawFormat()" />
        <Method Sig="instance struct PixelFormat get_PixelFormat()" />
        <Method Sig="instance struct RectangleF GetBounds(&amp; struct GraphicsUnit )" />
        <Method Sig="instance class ColorPalette get_Palette()" />
        <Method Sig="instance void set_Palette(class ColorPalette )" />
        <Method Sig="instance class Image GetThumbnailImage(int , int , class GetThumbnailImageAbort , intptr )" />
        <Method Sig="instance [] struct Guid get_FrameDimensionsList()" />
        <Method Sig="instance int GetFrameCount(class FrameDimension )" />
        <Method Sig="instance int SelectActiveFrame(class FrameDimension , int )" />
        <Method Sig="instance void RotateFlip(struct RotateFlipType )" />
        <Method Sig="instance [] int get_PropertyIdList()" />
        <Method Sig="instance class PropertyItem GetPropertyItem(int )" />
        <Method Sig="instance void RemovePropertyItem(int )" />
        <Method Sig="instance void SetPropertyItem(class PropertyItem )" />
        <Method Sig="instance [] class PropertyItem get_PropertyItems()" />
        <Method Sig="class Bitmap FromHbitmap(intptr )" />
        <Method Sig="class Bitmap FromHbitmap(intptr , intptr )" />
        <Method Sig="int GetPixelFormatSize(struct PixelFormat )" />
        <Method Sig="bool IsAlphaPixelFormat(struct PixelFormat )" />
        <Method Sig="bool IsExtendedPixelFormat(struct PixelFormat )" />
        <Method Sig="bool IsCanonicalPixelFormat(struct PixelFormat )" />
      </Type>
      <Type Name="Bitmap">
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(string , bool )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , bool )" />
        <Method Sig="instance void .ctor(int , int , int , struct PixelFormat , intptr )" />
        <Method Sig="instance void .ctor(int , int , struct PixelFormat )" />
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="instance void .ctor(int , int , class Graphics )" />
        <Method Sig="instance void .ctor(class Image )" />
        <Method Sig="instance void .ctor(class Image , int , int )" />
        <Method Sig="class Bitmap FromHicon(intptr )" />
        <Method Sig="class Bitmap FromResource(intptr , string )" />
        <Method Sig="instance intptr GetHbitmap()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr GetHbitmap(struct Color )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr GetHicon()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void .ctor(class Image , struct Size )" />
        <Method Sig="instance class Bitmap Clone(struct Rectangle , struct PixelFormat )" />
        <Method Sig="instance class Bitmap Clone(struct RectangleF , struct PixelFormat )" />
        <Method Sig="instance void MakeTransparent()" />
        <Method Sig="instance void MakeTransparent(struct Color )" />
        <Method Sig="instance class BitmapData LockBits(struct Rectangle , struct ImageLockMode , struct PixelFormat )" />
        <Method Sig="instance class BitmapData LockBits(struct Rectangle , struct ImageLockMode , struct PixelFormat , class BitmapData )" />
        <Method Sig="instance void UnlockBits(class BitmapData )" />
        <Method Sig="instance struct Color GetPixel(int , int )" />
        <Method Sig="instance void SetPixel(int , int , struct Color )" />
        <Method Sig="instance void SetResolution(float , float )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Brush">
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void Dispose()" />
      </Type>
      <Type Name="Brushes">
        <Method Sig="class Brush get_Transparent()" />
        <Method Sig="class Brush get_AliceBlue()" />
        <Method Sig="class Brush get_AntiqueWhite()" />
        <Method Sig="class Brush get_Aqua()" />
        <Method Sig="class Brush get_Aquamarine()" />
        <Method Sig="class Brush get_Azure()" />
        <Method Sig="class Brush get_Beige()" />
        <Method Sig="class Brush get_Bisque()" />
        <Method Sig="class Brush get_Black()" />
        <Method Sig="class Brush get_BlanchedAlmond()" />
        <Method Sig="class Brush get_Blue()" />
        <Method Sig="class Brush get_BlueViolet()" />
        <Method Sig="class Brush get_Brown()" />
        <Method Sig="class Brush get_BurlyWood()" />
        <Method Sig="class Brush get_CadetBlue()" />
        <Method Sig="class Brush get_Chartreuse()" />
        <Method Sig="class Brush get_Chocolate()" />
        <Method Sig="class Brush get_Coral()" />
        <Method Sig="class Brush get_CornflowerBlue()" />
        <Method Sig="class Brush get_Cornsilk()" />
        <Method Sig="class Brush get_Crimson()" />
        <Method Sig="class Brush get_Cyan()" />
        <Method Sig="class Brush get_DarkBlue()" />
        <Method Sig="class Brush get_DarkCyan()" />
        <Method Sig="class Brush get_DarkGoldenrod()" />
        <Method Sig="class Brush get_DarkGray()" />
        <Method Sig="class Brush get_DarkGreen()" />
        <Method Sig="class Brush get_DarkKhaki()" />
        <Method Sig="class Brush get_DarkMagenta()" />
        <Method Sig="class Brush get_DarkOliveGreen()" />
        <Method Sig="class Brush get_DarkOrange()" />
        <Method Sig="class Brush get_DarkOrchid()" />
        <Method Sig="class Brush get_DarkRed()" />
        <Method Sig="class Brush get_DarkSalmon()" />
        <Method Sig="class Brush get_DarkSeaGreen()" />
        <Method Sig="class Brush get_DarkSlateBlue()" />
        <Method Sig="class Brush get_DarkSlateGray()" />
        <Method Sig="class Brush get_DarkTurquoise()" />
        <Method Sig="class Brush get_DarkViolet()" />
        <Method Sig="class Brush get_DeepPink()" />
        <Method Sig="class Brush get_DeepSkyBlue()" />
        <Method Sig="class Brush get_DimGray()" />
        <Method Sig="class Brush get_DodgerBlue()" />
        <Method Sig="class Brush get_Firebrick()" />
        <Method Sig="class Brush get_FloralWhite()" />
        <Method Sig="class Brush get_ForestGreen()" />
        <Method Sig="class Brush get_Fuchsia()" />
        <Method Sig="class Brush get_Gainsboro()" />
        <Method Sig="class Brush get_GhostWhite()" />
        <Method Sig="class Brush get_Gold()" />
        <Method Sig="class Brush get_Goldenrod()" />
        <Method Sig="class Brush get_Gray()" />
        <Method Sig="class Brush get_Green()" />
        <Method Sig="class Brush get_GreenYellow()" />
        <Method Sig="class Brush get_Honeydew()" />
        <Method Sig="class Brush get_HotPink()" />
        <Method Sig="class Brush get_IndianRed()" />
        <Method Sig="class Brush get_Indigo()" />
        <Method Sig="class Brush get_Ivory()" />
        <Method Sig="class Brush get_Khaki()" />
        <Method Sig="class Brush get_Lavender()" />
        <Method Sig="class Brush get_LavenderBlush()" />
        <Method Sig="class Brush get_LawnGreen()" />
        <Method Sig="class Brush get_LemonChiffon()" />
        <Method Sig="class Brush get_LightBlue()" />
        <Method Sig="class Brush get_LightCoral()" />
        <Method Sig="class Brush get_LightCyan()" />
        <Method Sig="class Brush get_LightGoldenrodYellow()" />
        <Method Sig="class Brush get_LightGreen()" />
        <Method Sig="class Brush get_LightGray()" />
        <Method Sig="class Brush get_LightPink()" />
        <Method Sig="class Brush get_LightSalmon()" />
        <Method Sig="class Brush get_LightSeaGreen()" />
        <Method Sig="class Brush get_LightSkyBlue()" />
        <Method Sig="class Brush get_LightSlateGray()" />
        <Method Sig="class Brush get_LightSteelBlue()" />
        <Method Sig="class Brush get_LightYellow()" />
        <Method Sig="class Brush get_Lime()" />
        <Method Sig="class Brush get_LimeGreen()" />
        <Method Sig="class Brush get_Linen()" />
        <Method Sig="class Brush get_Magenta()" />
        <Method Sig="class Brush get_Maroon()" />
        <Method Sig="class Brush get_MediumAquamarine()" />
        <Method Sig="class Brush get_MediumBlue()" />
        <Method Sig="class Brush get_MediumOrchid()" />
        <Method Sig="class Brush get_MediumPurple()" />
        <Method Sig="class Brush get_MediumSeaGreen()" />
        <Method Sig="class Brush get_MediumSlateBlue()" />
        <Method Sig="class Brush get_MediumSpringGreen()" />
        <Method Sig="class Brush get_MediumTurquoise()" />
        <Method Sig="class Brush get_MediumVioletRed()" />
        <Method Sig="class Brush get_MidnightBlue()" />
        <Method Sig="class Brush get_MintCream()" />
        <Method Sig="class Brush get_MistyRose()" />
        <Method Sig="class Brush get_Moccasin()" />
        <Method Sig="class Brush get_NavajoWhite()" />
        <Method Sig="class Brush get_Navy()" />
        <Method Sig="class Brush get_OldLace()" />
        <Method Sig="class Brush get_Olive()" />
        <Method Sig="class Brush get_OliveDrab()" />
        <Method Sig="class Brush get_Orange()" />
        <Method Sig="class Brush get_OrangeRed()" />
        <Method Sig="class Brush get_Orchid()" />
        <Method Sig="class Brush get_PaleGoldenrod()" />
        <Method Sig="class Brush get_PaleGreen()" />
        <Method Sig="class Brush get_PaleTurquoise()" />
        <Method Sig="class Brush get_PaleVioletRed()" />
        <Method Sig="class Brush get_PapayaWhip()" />
        <Method Sig="class Brush get_PeachPuff()" />
        <Method Sig="class Brush get_Peru()" />
        <Method Sig="class Brush get_Pink()" />
        <Method Sig="class Brush get_Plum()" />
        <Method Sig="class Brush get_PowderBlue()" />
        <Method Sig="class Brush get_Purple()" />
        <Method Sig="class Brush get_Red()" />
        <Method Sig="class Brush get_RosyBrown()" />
        <Method Sig="class Brush get_RoyalBlue()" />
        <Method Sig="class Brush get_SaddleBrown()" />
        <Method Sig="class Brush get_Salmon()" />
        <Method Sig="class Brush get_SandyBrown()" />
        <Method Sig="class Brush get_SeaGreen()" />
        <Method Sig="class Brush get_SeaShell()" />
        <Method Sig="class Brush get_Sienna()" />
        <Method Sig="class Brush get_Silver()" />
        <Method Sig="class Brush get_SkyBlue()" />
        <Method Sig="class Brush get_SlateBlue()" />
        <Method Sig="class Brush get_SlateGray()" />
        <Method Sig="class Brush get_Snow()" />
        <Method Sig="class Brush get_SpringGreen()" />
        <Method Sig="class Brush get_SteelBlue()" />
        <Method Sig="class Brush get_Tan()" />
        <Method Sig="class Brush get_Teal()" />
        <Method Sig="class Brush get_Thistle()" />
        <Method Sig="class Brush get_Tomato()" />
        <Method Sig="class Brush get_Turquoise()" />
        <Method Sig="class Brush get_Violet()" />
        <Method Sig="class Brush get_Wheat()" />
        <Method Sig="class Brush get_White()" />
        <Method Sig="class Brush get_WhiteSmoke()" />
        <Method Sig="class Brush get_Yellow()" />
        <Method Sig="class Brush get_YellowGreen()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BufferedGraphics">
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance class Graphics get_Graphics()" />
        <Method Sig="instance void Render()" />
        <Method Sig="instance void Render(class Graphics )" />
        <Method Sig="instance void Render(intptr )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="BufferedGraphicsContext">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance struct Size get_MaximumBuffer()" />
        <Method Sig="instance void set_MaximumBuffer(struct Size )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Window="AllWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance class BufferedGraphics Allocate(class Graphics , struct Rectangle )" />
        <Method Sig="instance class BufferedGraphics Allocate(intptr , struct Rectangle )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Invalidate()" />
      </Type>
      <Type Name="BufferedGraphicsManager">
        <Method Sig="void .cctor()" />
        <Method Sig="class BufferedGraphicsContext get_Current()" />
      </Type>
      <Type Name="Color">
        <Method Sig="struct Color get_Transparent()" />
        <Method Sig="struct Color get_AliceBlue()" />
        <Method Sig="struct Color get_AntiqueWhite()" />
        <Method Sig="struct Color get_Aqua()" />
        <Method Sig="struct Color get_Aquamarine()" />
        <Method Sig="struct Color get_Azure()" />
        <Method Sig="struct Color get_Beige()" />
        <Method Sig="struct Color get_Bisque()" />
        <Method Sig="struct Color get_Black()" />
        <Method Sig="struct Color get_BlanchedAlmond()" />
        <Method Sig="struct Color get_Blue()" />
        <Method Sig="struct Color get_BlueViolet()" />
        <Method Sig="struct Color get_Brown()" />
        <Method Sig="struct Color get_BurlyWood()" />
        <Method Sig="struct Color get_CadetBlue()" />
        <Method Sig="struct Color get_Chartreuse()" />
        <Method Sig="struct Color get_Chocolate()" />
        <Method Sig="struct Color get_Coral()" />
        <Method Sig="struct Color get_CornflowerBlue()" />
        <Method Sig="struct Color get_Cornsilk()" />
        <Method Sig="struct Color get_Crimson()" />
        <Method Sig="struct Color get_Cyan()" />
        <Method Sig="struct Color get_DarkBlue()" />
        <Method Sig="struct Color get_DarkCyan()" />
        <Method Sig="struct Color get_DarkGoldenrod()" />
        <Method Sig="struct Color get_DarkGray()" />
        <Method Sig="struct Color get_DarkGreen()" />
        <Method Sig="struct Color get_DarkKhaki()" />
        <Method Sig="struct Color get_DarkMagenta()" />
        <Method Sig="struct Color get_DarkOliveGreen()" />
        <Method Sig="struct Color get_DarkOrange()" />
        <Method Sig="struct Color get_DarkOrchid()" />
        <Method Sig="struct Color get_DarkRed()" />
        <Method Sig="struct Color get_DarkSalmon()" />
        <Method Sig="struct Color get_DarkSeaGreen()" />
        <Method Sig="struct Color get_DarkSlateBlue()" />
        <Method Sig="struct Color get_DarkSlateGray()" />
        <Method Sig="struct Color get_DarkTurquoise()" />
        <Method Sig="struct Color get_DarkViolet()" />
        <Method Sig="struct Color get_DeepPink()" />
        <Method Sig="struct Color get_DeepSkyBlue()" />
        <Method Sig="struct Color get_DimGray()" />
        <Method Sig="struct Color get_DodgerBlue()" />
        <Method Sig="struct Color get_Firebrick()" />
        <Method Sig="struct Color get_FloralWhite()" />
        <Method Sig="struct Color get_ForestGreen()" />
        <Method Sig="struct Color get_Fuchsia()" />
        <Method Sig="struct Color get_Gainsboro()" />
        <Method Sig="struct Color get_GhostWhite()" />
        <Method Sig="struct Color get_Gold()" />
        <Method Sig="struct Color get_Goldenrod()" />
        <Method Sig="struct Color get_Gray()" />
        <Method Sig="struct Color get_Green()" />
        <Method Sig="struct Color get_GreenYellow()" />
        <Method Sig="struct Color get_Honeydew()" />
        <Method Sig="struct Color get_HotPink()" />
        <Method Sig="struct Color get_IndianRed()" />
        <Method Sig="struct Color get_Indigo()" />
        <Method Sig="struct Color get_Ivory()" />
        <Method Sig="struct Color get_Khaki()" />
        <Method Sig="struct Color get_Lavender()" />
        <Method Sig="struct Color get_LavenderBlush()" />
        <Method Sig="struct Color get_LawnGreen()" />
        <Method Sig="struct Color get_LemonChiffon()" />
        <Method Sig="struct Color get_LightBlue()" />
        <Method Sig="struct Color get_LightCoral()" />
        <Method Sig="struct Color get_LightCyan()" />
        <Method Sig="struct Color get_LightGoldenrodYellow()" />
        <Method Sig="struct Color get_LightGreen()" />
        <Method Sig="struct Color get_LightGray()" />
        <Method Sig="struct Color get_LightPink()" />
        <Method Sig="struct Color get_LightSalmon()" />
        <Method Sig="struct Color get_LightSeaGreen()" />
        <Method Sig="struct Color get_LightSkyBlue()" />
        <Method Sig="struct Color get_LightSlateGray()" />
        <Method Sig="struct Color get_LightSteelBlue()" />
        <Method Sig="struct Color get_LightYellow()" />
        <Method Sig="struct Color get_Lime()" />
        <Method Sig="struct Color get_LimeGreen()" />
        <Method Sig="struct Color get_Linen()" />
        <Method Sig="struct Color get_Magenta()" />
        <Method Sig="struct Color get_Maroon()" />
        <Method Sig="struct Color get_MediumAquamarine()" />
        <Method Sig="struct Color get_MediumBlue()" />
        <Method Sig="struct Color get_MediumOrchid()" />
        <Method Sig="struct Color get_MediumPurple()" />
        <Method Sig="struct Color get_MediumSeaGreen()" />
        <Method Sig="struct Color get_MediumSlateBlue()" />
        <Method Sig="struct Color get_MediumSpringGreen()" />
        <Method Sig="struct Color get_MediumTurquoise()" />
        <Method Sig="struct Color get_MediumVioletRed()" />
        <Method Sig="struct Color get_MidnightBlue()" />
        <Method Sig="struct Color get_MintCream()" />
        <Method Sig="struct Color get_MistyRose()" />
        <Method Sig="struct Color get_Moccasin()" />
        <Method Sig="struct Color get_NavajoWhite()" />
        <Method Sig="struct Color get_Navy()" />
        <Method Sig="struct Color get_OldLace()" />
        <Method Sig="struct Color get_Olive()" />
        <Method Sig="struct Color get_OliveDrab()" />
        <Method Sig="struct Color get_Orange()" />
        <Method Sig="struct Color get_OrangeRed()" />
        <Method Sig="struct Color get_Orchid()" />
        <Method Sig="struct Color get_PaleGoldenrod()" />
        <Method Sig="struct Color get_PaleGreen()" />
        <Method Sig="struct Color get_PaleTurquoise()" />
        <Method Sig="struct Color get_PaleVioletRed()" />
        <Method Sig="struct Color get_PapayaWhip()" />
        <Method Sig="struct Color get_PeachPuff()" />
        <Method Sig="struct Color get_Peru()" />
        <Method Sig="struct Color get_Pink()" />
        <Method Sig="struct Color get_Plum()" />
        <Method Sig="struct Color get_PowderBlue()" />
        <Method Sig="struct Color get_Purple()" />
        <Method Sig="struct Color get_Red()" />
        <Method Sig="struct Color get_RosyBrown()" />
        <Method Sig="struct Color get_RoyalBlue()" />
        <Method Sig="struct Color get_SaddleBrown()" />
        <Method Sig="struct Color get_Salmon()" />
        <Method Sig="struct Color get_SandyBrown()" />
        <Method Sig="struct Color get_SeaGreen()" />
        <Method Sig="struct Color get_SeaShell()" />
        <Method Sig="struct Color get_Sienna()" />
        <Method Sig="struct Color get_Silver()" />
        <Method Sig="struct Color get_SkyBlue()" />
        <Method Sig="struct Color get_SlateBlue()" />
        <Method Sig="struct Color get_SlateGray()" />
        <Method Sig="struct Color get_Snow()" />
        <Method Sig="struct Color get_SpringGreen()" />
        <Method Sig="struct Color get_SteelBlue()" />
        <Method Sig="struct Color get_Tan()" />
        <Method Sig="struct Color get_Teal()" />
        <Method Sig="struct Color get_Thistle()" />
        <Method Sig="struct Color get_Tomato()" />
        <Method Sig="struct Color get_Turquoise()" />
        <Method Sig="struct Color get_Violet()" />
        <Method Sig="struct Color get_Wheat()" />
        <Method Sig="struct Color get_White()" />
        <Method Sig="struct Color get_WhiteSmoke()" />
        <Method Sig="struct Color get_Yellow()" />
        <Method Sig="struct Color get_YellowGreen()" />
        <Method Sig="instance byte get_R()" />
        <Method Sig="instance byte get_G()" />
        <Method Sig="instance byte get_B()" />
        <Method Sig="instance byte get_A()" />
        <Method Sig="instance bool get_IsKnownColor()" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance bool get_IsNamedColor()" />
        <Method Sig="instance bool get_IsSystemColor()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="struct Color FromArgb(int )" />
        <Method Sig="struct Color FromArgb(int , int , int , int )" />
        <Method Sig="struct Color FromArgb(int , struct Color )" />
        <Method Sig="struct Color FromArgb(int , int , int )" />
        <Method Sig="struct Color FromKnownColor(struct KnownColor )" />
        <Method Sig="struct Color FromName(string )" />
        <Method Sig="instance float GetBrightness()" />
        <Method Sig="instance float GetHue()" />
        <Method Sig="instance float GetSaturation()" />
        <Method Sig="instance int ToArgb()" />
        <Method Sig="instance struct KnownColor ToKnownColor()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="bool op_Equality(struct Color , struct Color )" />
        <Method Sig="bool op_Inequality(struct Color , struct Color )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ColorConverter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="FontConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Graphics">
        <Method Sig="class Graphics FromHdc(intptr )" />
        <Method Sig="class Graphics FromHdcInternal(intptr )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Graphics FromHdc(intptr , intptr )" />
        <Method Sig="class Graphics FromHwnd(intptr )" />
        <Method Sig="class Graphics FromHwndInternal(intptr )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="class Graphics FromImage(class Image )" />
        <Method Sig="instance intptr GetHdc()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance intptr GetHdc(bool )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void ReleaseHdc(intptr )" />
        <Method Sig="instance void ReleaseHdc()">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void ReleaseHdcInternal(intptr )">
          <LinkDemand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="UnmanagedCode" />
            </PermissionSet>
          </LinkDemand>
        </Method>
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void Flush()" />
        <Method Sig="instance void Flush(struct FlushIntention )" />
        <Method Sig="instance struct CompositingMode get_CompositingMode()" />
        <Method Sig="instance void set_CompositingMode(struct CompositingMode )" />
        <Method Sig="instance struct Point get_RenderingOrigin()" />
        <Method Sig="instance void set_RenderingOrigin(struct Point )" />
        <Method Sig="instance struct CompositingQuality get_CompositingQuality()" />
        <Method Sig="instance void set_CompositingQuality(struct CompositingQuality )" />
        <Method Sig="instance struct TextRenderingHint get_TextRenderingHint()" />
        <Method Sig="instance void set_TextRenderingHint(struct TextRenderingHint )" />
        <Method Sig="instance int get_TextContrast()" />
        <Method Sig="instance void set_TextContrast(int )" />
        <Method Sig="instance struct SmoothingMode get_SmoothingMode()" />
        <Method Sig="instance void set_SmoothingMode(struct SmoothingMode )" />
        <Method Sig="instance struct PixelOffsetMode get_PixelOffsetMode()" />
        <Method Sig="instance void set_PixelOffsetMode(struct PixelOffsetMode )" />
        <Method Sig="instance struct InterpolationMode get_InterpolationMode()" />
        <Method Sig="instance void set_InterpolationMode(struct InterpolationMode )" />
        <Method Sig="instance class Matrix get_Transform()" />
        <Method Sig="instance void set_Transform(class Matrix )" />
        <Method Sig="instance struct GraphicsUnit get_PageUnit()" />
        <Method Sig="instance void set_PageUnit(struct GraphicsUnit )" />
        <Method Sig="instance float get_PageScale()" />
        <Method Sig="instance void set_PageScale(float )" />
        <Method Sig="instance float get_DpiX()" />
        <Method Sig="instance float get_DpiY()" />
        <Method Sig="instance void CopyFromScreen(struct Point , struct Point , struct Size )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Window="AllWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void CopyFromScreen(int , int , int , int , struct Size )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Window="AllWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void CopyFromScreen(struct Point , struct Point , struct Size , struct CopyPixelOperation )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Window="AllWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void CopyFromScreen(int , int , int , int , struct Size , struct CopyPixelOperation )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission Window="AllWindows" version="1" class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void ResetTransform()" />
        <Method Sig="instance void MultiplyTransform(class Matrix )" />
        <Method Sig="instance void MultiplyTransform(class Matrix , struct MatrixOrder )" />
        <Method Sig="instance void TranslateTransform(float , float )" />
        <Method Sig="instance void TranslateTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void ScaleTransform(float , float )" />
        <Method Sig="instance void ScaleTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void RotateTransform(float )" />
        <Method Sig="instance void RotateTransform(float , struct MatrixOrder )" />
        <Method Sig="instance void TransformPoints(struct CoordinateSpace , struct CoordinateSpace , [] struct PointF )" />
        <Method Sig="instance void TransformPoints(struct CoordinateSpace , struct CoordinateSpace , [] struct Point )" />
        <Method Sig="instance struct Color GetNearestColor(struct Color )" />
        <Method Sig="instance void DrawLine(class Pen , float , float , float , float )" />
        <Method Sig="instance void DrawLine(class Pen , struct PointF , struct PointF )" />
        <Method Sig="instance void DrawLines(class Pen , [] struct PointF )" />
        <Method Sig="instance void DrawLine(class Pen , int , int , int , int )" />
        <Method Sig="instance void DrawLine(class Pen , struct Point , struct Point )" />
        <Method Sig="instance void DrawLines(class Pen , [] struct Point )" />
        <Method Sig="instance void DrawArc(class Pen , float , float , float , float , float , float )" />
        <Method Sig="instance void DrawArc(class Pen , struct RectangleF , float , float )" />
        <Method Sig="instance void DrawArc(class Pen , int , int , int , int , int , int )" />
        <Method Sig="instance void DrawArc(class Pen , struct Rectangle , float , float )" />
        <Method Sig="instance void DrawBezier(class Pen , float , float , float , float , float , float , float , float )" />
        <Method Sig="instance void DrawBezier(class Pen , struct PointF , struct PointF , struct PointF , struct PointF )" />
        <Method Sig="instance void DrawBeziers(class Pen , [] struct PointF )" />
        <Method Sig="instance void DrawBezier(class Pen , struct Point , struct Point , struct Point , struct Point )" />
        <Method Sig="instance void DrawBeziers(class Pen , [] struct Point )" />
        <Method Sig="instance void DrawRectangle(class Pen , struct Rectangle )" />
        <Method Sig="instance void DrawRectangle(class Pen , float , float , float , float )" />
        <Method Sig="instance void DrawRectangle(class Pen , int , int , int , int )" />
        <Method Sig="instance void DrawRectangles(class Pen , [] struct RectangleF )" />
        <Method Sig="instance void DrawRectangles(class Pen , [] struct Rectangle )" />
        <Method Sig="instance void DrawEllipse(class Pen , struct RectangleF )" />
        <Method Sig="instance void DrawEllipse(class Pen , float , float , float , float )" />
        <Method Sig="instance void DrawEllipse(class Pen , struct Rectangle )" />
        <Method Sig="instance void DrawEllipse(class Pen , int , int , int , int )" />
        <Method Sig="instance void DrawPie(class Pen , struct RectangleF , float , float )" />
        <Method Sig="instance void DrawPie(class Pen , float , float , float , float , float , float )" />
        <Method Sig="instance void DrawPie(class Pen , struct Rectangle , float , float )" />
        <Method Sig="instance void DrawPie(class Pen , int , int , int , int , int , int )" />
        <Method Sig="instance void DrawPolygon(class Pen , [] struct PointF )" />
        <Method Sig="instance void DrawPolygon(class Pen , [] struct Point )" />
        <Method Sig="instance void DrawPath(class Pen , class GraphicsPath )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct PointF )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct PointF , float )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct PointF , int , int )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct PointF , int , int , float )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct Point )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct Point , float )" />
        <Method Sig="instance void DrawCurve(class Pen , [] struct Point , int , int , float )" />
        <Method Sig="instance void DrawClosedCurve(class Pen , [] struct PointF )" />
        <Method Sig="instance void DrawClosedCurve(class Pen , [] struct PointF , float , struct FillMode )" />
        <Method Sig="instance void DrawClosedCurve(class Pen , [] struct Point )" />
        <Method Sig="instance void DrawClosedCurve(class Pen , [] struct Point , float , struct FillMode )" />
        <Method Sig="instance void Clear(struct Color )" />
        <Method Sig="instance void FillRectangle(class Brush , struct RectangleF )" />
        <Method Sig="instance void FillRectangle(class Brush , float , float , float , float )" />
        <Method Sig="instance void FillRectangle(class Brush , struct Rectangle )" />
        <Method Sig="instance void FillRectangle(class Brush , int , int , int , int )" />
        <Method Sig="instance void FillRectangles(class Brush , [] struct RectangleF )" />
        <Method Sig="instance void FillRectangles(class Brush , [] struct Rectangle )" />
        <Method Sig="instance void FillPolygon(class Brush , [] struct PointF )" />
        <Method Sig="instance void FillPolygon(class Brush , [] struct PointF , struct FillMode )" />
        <Method Sig="instance void FillPolygon(class Brush , [] struct Point )" />
        <Method Sig="instance void FillPolygon(class Brush , [] struct Point , struct FillMode )" />
        <Method Sig="instance void FillEllipse(class Brush , struct RectangleF )" />
        <Method Sig="instance void FillEllipse(class Brush , float , float , float , float )" />
        <Method Sig="instance void FillEllipse(class Brush , struct Rectangle )" />
        <Method Sig="instance void FillEllipse(class Brush , int , int , int , int )" />
        <Method Sig="instance void FillPie(class Brush , struct Rectangle , float , float )" />
        <Method Sig="instance void FillPie(class Brush , float , float , float , float , float , float )" />
        <Method Sig="instance void FillPie(class Brush , int , int , int , int , int , int )" />
        <Method Sig="instance void FillPath(class Brush , class GraphicsPath )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct PointF )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct PointF , struct FillMode )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct PointF , struct FillMode , float )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct Point )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct Point , struct FillMode )" />
        <Method Sig="instance void FillClosedCurve(class Brush , [] struct Point , struct FillMode , float )" />
        <Method Sig="instance void FillRegion(class Brush , class Region )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , float , float )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , struct PointF )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , float , float , class StringFormat )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , struct PointF , class StringFormat )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , struct RectangleF )" />
        <Method Sig="instance void DrawString(string , class Font , class Brush , struct RectangleF , class StringFormat )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , struct SizeF , class StringFormat , &amp; int , &amp; int )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , struct PointF , class StringFormat )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , struct SizeF )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , struct SizeF , class StringFormat )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , int )" />
        <Method Sig="instance struct SizeF MeasureString(string , class Font , int , class StringFormat )" />
        <Method Sig="instance [] class Region MeasureCharacterRanges(string , class Font , struct RectangleF , class StringFormat )" />
        <Method Sig="instance void DrawIcon(class Icon , int , int )" />
        <Method Sig="instance void DrawIcon(class Icon , struct Rectangle )" />
        <Method Sig="instance void DrawIconUnstretched(class Icon , struct Rectangle )" />
        <Method Sig="instance void DrawImage(class Image , struct PointF )" />
        <Method Sig="instance void DrawImage(class Image , float , float )" />
        <Method Sig="instance void DrawImage(class Image , struct RectangleF )" />
        <Method Sig="instance void DrawImage(class Image , float , float , float , float )" />
        <Method Sig="instance void DrawImage(class Image , struct Point )" />
        <Method Sig="instance void DrawImage(class Image , int , int )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle )" />
        <Method Sig="instance void DrawImage(class Image , int , int , int , int )" />
        <Method Sig="instance void DrawImageUnscaled(class Image , struct Point )" />
        <Method Sig="instance void DrawImageUnscaled(class Image , int , int )" />
        <Method Sig="instance void DrawImageUnscaled(class Image , struct Rectangle )" />
        <Method Sig="instance void DrawImageUnscaled(class Image , int , int , int , int )" />
        <Method Sig="instance void DrawImageUnscaledAndClipped(class Image , struct Rectangle )" />
        <Method Sig="instance void DrawImage(class Image , [] struct PointF )" />
        <Method Sig="instance void DrawImage(class Image , [] struct Point )" />
        <Method Sig="instance void DrawImage(class Image , float , float , struct RectangleF , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , int , int , struct Rectangle , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , struct RectangleF , struct RectangleF , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , struct Rectangle , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , [] struct PointF , struct RectangleF , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , [] struct PointF , struct RectangleF , struct GraphicsUnit , class ImageAttributes )" />
        <Method Sig="instance void DrawImage(class Image , [] struct PointF , struct RectangleF , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort )" />
        <Method Sig="instance void DrawImage(class Image , [] struct PointF , struct RectangleF , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort , int )" />
        <Method Sig="instance void DrawImage(class Image , [] struct Point , struct Rectangle , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , [] struct Point , struct Rectangle , struct GraphicsUnit , class ImageAttributes )" />
        <Method Sig="instance void DrawImage(class Image , [] struct Point , struct Rectangle , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort )" />
        <Method Sig="instance void DrawImage(class Image , [] struct Point , struct Rectangle , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort , int )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , float , float , float , float , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , float , float , float , float , struct GraphicsUnit , class ImageAttributes )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , float , float , float , float , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , float , float , float , float , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort , intptr )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , int , int , int , int , struct GraphicsUnit )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , int , int , int , int , struct GraphicsUnit , class ImageAttributes )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , int , int , int , int , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort )" />
        <Method Sig="instance void DrawImage(class Image , struct Rectangle , int , int , int , int , struct GraphicsUnit , class ImageAttributes , class DrawImageAbort , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct RectangleF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , struct Rectangle , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct PointF , struct RectangleF , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr )" />
        <Method Sig="instance void EnumerateMetafile(class Metafile , [] struct Point , struct Rectangle , struct GraphicsUnit , class EnumerateMetafileProc , intptr , class ImageAttributes )" />
        <Method Sig="instance void SetClip(class Graphics )" />
        <Method Sig="instance void SetClip(class Graphics , struct CombineMode )" />
        <Method Sig="instance void SetClip(struct Rectangle )" />
        <Method Sig="instance void SetClip(struct Rectangle , struct CombineMode )" />
        <Method Sig="instance void SetClip(struct RectangleF )" />
        <Method Sig="instance void SetClip(struct RectangleF , struct CombineMode )" />
        <Method Sig="instance void SetClip(class GraphicsPath )" />
        <Method Sig="instance void SetClip(class GraphicsPath , struct CombineMode )" />
        <Method Sig="instance void SetClip(class Region , struct CombineMode )" />
        <Method Sig="instance void IntersectClip(struct Rectangle )" />
        <Method Sig="instance void IntersectClip(struct RectangleF )" />
        <Method Sig="instance void IntersectClip(class Region )" />
        <Method Sig="instance void ExcludeClip(struct Rectangle )" />
        <Method Sig="instance void ExcludeClip(class Region )" />
        <Method Sig="instance void ResetClip()" />
        <Method Sig="instance void TranslateClip(float , float )" />
        <Method Sig="instance void TranslateClip(int , int )" />
        <Method Sig="instance class Region get_Clip()" />
        <Method Sig="instance void set_Clip(class Region )" />
        <Method Sig="instance struct RectangleF get_ClipBounds()" />
        <Method Sig="instance bool get_IsClipEmpty()" />
        <Method Sig="instance struct RectangleF get_VisibleClipBounds()" />
        <Method Sig="instance bool get_IsVisibleClipEmpty()" />
        <Method Sig="instance bool IsVisible(int , int )" />
        <Method Sig="instance bool IsVisible(struct Point )" />
        <Method Sig="instance bool IsVisible(float , float )" />
        <Method Sig="instance bool IsVisible(struct PointF )" />
        <Method Sig="instance bool IsVisible(int , int , int , int )" />
        <Method Sig="instance bool IsVisible(struct Rectangle )" />
        <Method Sig="instance bool IsVisible(float , float , float , float )" />
        <Method Sig="instance bool IsVisible(struct RectangleF )" />
        <Method Sig="instance class GraphicsState Save()" />
        <Method Sig="instance void Restore(class GraphicsState )" />
        <Method Sig="instance class GraphicsContainer BeginContainer(struct RectangleF , struct RectangleF , struct GraphicsUnit )" />
        <Method Sig="instance class GraphicsContainer BeginContainer()" />
        <Method Sig="instance void EndContainer(class GraphicsContainer )" />
        <Method Sig="instance class GraphicsContainer BeginContainer(struct Rectangle , struct Rectangle , struct GraphicsUnit )" />
        <Method Sig="instance void AddMetafileComment([] byte )" />
        <Method Sig="intptr GetHalftonePalette()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Icon">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , struct Size )" />
        <Method Sig="instance void .ctor(string , int , int )" />
        <Method Sig="instance void .ctor(class Icon , struct Size )" />
        <Method Sig="instance void .ctor(class Icon , int , int )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance void .ctor(class Stream )" />
        <Method Sig="instance void .ctor(class Stream , struct Size )" />
        <Method Sig="instance void .ctor(class Stream , int , int )" />
        <Method Sig="class Icon ExtractAssociatedIcon(string )" />
        <Method Sig="instance intptr get_Handle()" />
        <Method Sig="instance int get_Height()" />
        <Method Sig="instance struct Size get_Size()" />
        <Method Sig="instance int get_Width()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="class Icon FromHandle(intptr )" />
        <Method Sig="instance void Save(class Stream )" />
        <Method Sig="instance class Bitmap ToBitmap()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="IconConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="ImageAnimator">
        <Method Sig="void UpdateFrames(class Image )" />
        <Method Sig="void UpdateFrames()" />
        <Method Sig="void Animate(class Image , class EventHandler )" />
        <Method Sig="bool CanAnimate(class Image )" />
        <Method Sig="void StopAnimate(class Image , class EventHandler )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ImageConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Pen">
        <Method Sig="instance void .ctor(struct Color )" />
        <Method Sig="instance void .ctor(struct Color , float )" />
        <Method Sig="instance void .ctor(class Brush )" />
        <Method Sig="instance void .ctor(class Brush , float )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance float get_Width()" />
        <Method Sig="instance void set_Width(float )" />
        <Method Sig="instance void SetLineCap(struct LineCap , struct LineCap , struct DashCap )" />
        <Method Sig="instance struct LineCap get_StartCap()" />
        <Method Sig="instance void set_StartCap(struct LineCap )" />
        <Method Sig="instance struct LineCap get_EndCap()" />
        <Method Sig="instance void set_EndCap(struct LineCap )" />
        <Method Sig="instance struct DashCap get_DashCap()" />
        <Method Sig="instance void set_DashCap(struct DashCap )" />
        <Method Sig="instance struct LineJoin get_LineJoin()" />
        <Method Sig="instance void set_LineJoin(struct LineJoin )" />
        <Method Sig="instance class CustomLineCap get_CustomStartCap()" />
        <Method Sig="instance void set_CustomStartCap(class CustomLineCap )" />
        <Method Sig="instance class CustomLineCap get_CustomEndCap()" />
        <Method Sig="instance void set_CustomEndCap(class CustomLineCap )" />
        <Method Sig="instance float get_MiterLimit()" />
        <Method Sig="instance void set_MiterLimit(float )" />
        <Method Sig="instance struct PenAlignment get_Alignment()" />
        <Method Sig="instance void set_Alignment(struct PenAlignment )" />
        <Method Sig="instance class Matrix get_Transform()" />
        <Method Sig="instance void set_Transform(class Matrix )" />
        <Method Sig="instance void ResetTransform()" />
        <Method Sig="instance void MultiplyTransform(class Matrix )" />
        <Method Sig="instance void MultiplyTransform(class Matrix , struct MatrixOrder )" />
        <Method Sig="instance void TranslateTransform(float , float )" />
        <Method Sig="instance void TranslateTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void ScaleTransform(float , float )" />
        <Method Sig="instance void ScaleTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void RotateTransform(float )" />
        <Method Sig="instance void RotateTransform(float , struct MatrixOrder )" />
        <Method Sig="instance struct PenType get_PenType()" />
        <Method Sig="instance struct Color get_Color()" />
        <Method Sig="instance void set_Color(struct Color )" />
        <Method Sig="instance class Brush get_Brush()" />
        <Method Sig="instance void set_Brush(class Brush )" />
        <Method Sig="instance struct DashStyle get_DashStyle()" />
        <Method Sig="instance void set_DashStyle(struct DashStyle )" />
        <Method Sig="instance float get_DashOffset()" />
        <Method Sig="instance void set_DashOffset(float )" />
        <Method Sig="instance [] float get_DashPattern()" />
        <Method Sig="instance void set_DashPattern([] float )" />
        <Method Sig="instance [] float get_CompoundArray()" />
        <Method Sig="instance void set_CompoundArray([] float )" />
      </Type>
      <Type Name="Pens">
        <Method Sig="class Pen get_Transparent()" />
        <Method Sig="class Pen get_AliceBlue()" />
        <Method Sig="class Pen get_AntiqueWhite()" />
        <Method Sig="class Pen get_Aqua()" />
        <Method Sig="class Pen get_Aquamarine()" />
        <Method Sig="class Pen get_Azure()" />
        <Method Sig="class Pen get_Beige()" />
        <Method Sig="class Pen get_Bisque()" />
        <Method Sig="class Pen get_Black()" />
        <Method Sig="class Pen get_BlanchedAlmond()" />
        <Method Sig="class Pen get_Blue()" />
        <Method Sig="class Pen get_BlueViolet()" />
        <Method Sig="class Pen get_Brown()" />
        <Method Sig="class Pen get_BurlyWood()" />
        <Method Sig="class Pen get_CadetBlue()" />
        <Method Sig="class Pen get_Chartreuse()" />
        <Method Sig="class Pen get_Chocolate()" />
        <Method Sig="class Pen get_Coral()" />
        <Method Sig="class Pen get_CornflowerBlue()" />
        <Method Sig="class Pen get_Cornsilk()" />
        <Method Sig="class Pen get_Crimson()" />
        <Method Sig="class Pen get_Cyan()" />
        <Method Sig="class Pen get_DarkBlue()" />
        <Method Sig="class Pen get_DarkCyan()" />
        <Method Sig="class Pen get_DarkGoldenrod()" />
        <Method Sig="class Pen get_DarkGray()" />
        <Method Sig="class Pen get_DarkGreen()" />
        <Method Sig="class Pen get_DarkKhaki()" />
        <Method Sig="class Pen get_DarkMagenta()" />
        <Method Sig="class Pen get_DarkOliveGreen()" />
        <Method Sig="class Pen get_DarkOrange()" />
        <Method Sig="class Pen get_DarkOrchid()" />
        <Method Sig="class Pen get_DarkRed()" />
        <Method Sig="class Pen get_DarkSalmon()" />
        <Method Sig="class Pen get_DarkSeaGreen()" />
        <Method Sig="class Pen get_DarkSlateBlue()" />
        <Method Sig="class Pen get_DarkSlateGray()" />
        <Method Sig="class Pen get_DarkTurquoise()" />
        <Method Sig="class Pen get_DarkViolet()" />
        <Method Sig="class Pen get_DeepPink()" />
        <Method Sig="class Pen get_DeepSkyBlue()" />
        <Method Sig="class Pen get_DimGray()" />
        <Method Sig="class Pen get_DodgerBlue()" />
        <Method Sig="class Pen get_Firebrick()" />
        <Method Sig="class Pen get_FloralWhite()" />
        <Method Sig="class Pen get_ForestGreen()" />
        <Method Sig="class Pen get_Fuchsia()" />
        <Method Sig="class Pen get_Gainsboro()" />
        <Method Sig="class Pen get_GhostWhite()" />
        <Method Sig="class Pen get_Gold()" />
        <Method Sig="class Pen get_Goldenrod()" />
        <Method Sig="class Pen get_Gray()" />
        <Method Sig="class Pen get_Green()" />
        <Method Sig="class Pen get_GreenYellow()" />
        <Method Sig="class Pen get_Honeydew()" />
        <Method Sig="class Pen get_HotPink()" />
        <Method Sig="class Pen get_IndianRed()" />
        <Method Sig="class Pen get_Indigo()" />
        <Method Sig="class Pen get_Ivory()" />
        <Method Sig="class Pen get_Khaki()" />
        <Method Sig="class Pen get_Lavender()" />
        <Method Sig="class Pen get_LavenderBlush()" />
        <Method Sig="class Pen get_LawnGreen()" />
        <Method Sig="class Pen get_LemonChiffon()" />
        <Method Sig="class Pen get_LightBlue()" />
        <Method Sig="class Pen get_LightCoral()" />
        <Method Sig="class Pen get_LightCyan()" />
        <Method Sig="class Pen get_LightGoldenrodYellow()" />
        <Method Sig="class Pen get_LightGreen()" />
        <Method Sig="class Pen get_LightGray()" />
        <Method Sig="class Pen get_LightPink()" />
        <Method Sig="class Pen get_LightSalmon()" />
        <Method Sig="class Pen get_LightSeaGreen()" />
        <Method Sig="class Pen get_LightSkyBlue()" />
        <Method Sig="class Pen get_LightSlateGray()" />
        <Method Sig="class Pen get_LightSteelBlue()" />
        <Method Sig="class Pen get_LightYellow()" />
        <Method Sig="class Pen get_Lime()" />
        <Method Sig="class Pen get_LimeGreen()" />
        <Method Sig="class Pen get_Linen()" />
        <Method Sig="class Pen get_Magenta()" />
        <Method Sig="class Pen get_Maroon()" />
        <Method Sig="class Pen get_MediumAquamarine()" />
        <Method Sig="class Pen get_MediumBlue()" />
        <Method Sig="class Pen get_MediumOrchid()" />
        <Method Sig="class Pen get_MediumPurple()" />
        <Method Sig="class Pen get_MediumSeaGreen()" />
        <Method Sig="class Pen get_MediumSlateBlue()" />
        <Method Sig="class Pen get_MediumSpringGreen()" />
        <Method Sig="class Pen get_MediumTurquoise()" />
        <Method Sig="class Pen get_MediumVioletRed()" />
        <Method Sig="class Pen get_MidnightBlue()" />
        <Method Sig="class Pen get_MintCream()" />
        <Method Sig="class Pen get_MistyRose()" />
        <Method Sig="class Pen get_Moccasin()" />
        <Method Sig="class Pen get_NavajoWhite()" />
        <Method Sig="class Pen get_Navy()" />
        <Method Sig="class Pen get_OldLace()" />
        <Method Sig="class Pen get_Olive()" />
        <Method Sig="class Pen get_OliveDrab()" />
        <Method Sig="class Pen get_Orange()" />
        <Method Sig="class Pen get_OrangeRed()" />
        <Method Sig="class Pen get_Orchid()" />
        <Method Sig="class Pen get_PaleGoldenrod()" />
        <Method Sig="class Pen get_PaleGreen()" />
        <Method Sig="class Pen get_PaleTurquoise()" />
        <Method Sig="class Pen get_PaleVioletRed()" />
        <Method Sig="class Pen get_PapayaWhip()" />
        <Method Sig="class Pen get_PeachPuff()" />
        <Method Sig="class Pen get_Peru()" />
        <Method Sig="class Pen get_Pink()" />
        <Method Sig="class Pen get_Plum()" />
        <Method Sig="class Pen get_PowderBlue()" />
        <Method Sig="class Pen get_Purple()" />
        <Method Sig="class Pen get_Red()" />
        <Method Sig="class Pen get_RosyBrown()" />
        <Method Sig="class Pen get_RoyalBlue()" />
        <Method Sig="class Pen get_SaddleBrown()" />
        <Method Sig="class Pen get_Salmon()" />
        <Method Sig="class Pen get_SandyBrown()" />
        <Method Sig="class Pen get_SeaGreen()" />
        <Method Sig="class Pen get_SeaShell()" />
        <Method Sig="class Pen get_Sienna()" />
        <Method Sig="class Pen get_Silver()" />
        <Method Sig="class Pen get_SkyBlue()" />
        <Method Sig="class Pen get_SlateBlue()" />
        <Method Sig="class Pen get_SlateGray()" />
        <Method Sig="class Pen get_Snow()" />
        <Method Sig="class Pen get_SpringGreen()" />
        <Method Sig="class Pen get_SteelBlue()" />
        <Method Sig="class Pen get_Tan()" />
        <Method Sig="class Pen get_Teal()" />
        <Method Sig="class Pen get_Thistle()" />
        <Method Sig="class Pen get_Tomato()" />
        <Method Sig="class Pen get_Turquoise()" />
        <Method Sig="class Pen get_Violet()" />
        <Method Sig="class Pen get_Wheat()" />
        <Method Sig="class Pen get_White()" />
        <Method Sig="class Pen get_WhiteSmoke()" />
        <Method Sig="class Pen get_Yellow()" />
        <Method Sig="class Pen get_YellowGreen()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="Point">
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="instance void .ctor(struct Size )" />
        <Method Sig="instance void .ctor(int )" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance int get_X()" />
        <Method Sig="instance void set_X(int )" />
        <Method Sig="instance int get_Y()" />
        <Method Sig="instance void set_Y(int )" />
        <Method Sig="struct PointF op_Implicit(struct Point )" />
        <Method Sig="struct Size op_Explicit(struct Point )" />
        <Method Sig="struct Point op_Addition(struct Point , struct Size )" />
        <Method Sig="struct Point op_Subtraction(struct Point , struct Size )" />
        <Method Sig="bool op_Equality(struct Point , struct Point )" />
        <Method Sig="bool op_Inequality(struct Point , struct Point )" />
        <Method Sig="struct Point Add(struct Point , struct Size )" />
        <Method Sig="struct Point Subtract(struct Point , struct Size )" />
        <Method Sig="struct Point Ceiling(struct PointF )" />
        <Method Sig="struct Point Truncate(struct PointF )" />
        <Method Sig="struct Point Round(struct PointF )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void Offset(int , int )" />
        <Method Sig="instance void Offset(struct Point )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="PointConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Rectangle">
        <Method Sig="instance void .ctor(int , int , int , int )" />
        <Method Sig="instance void .ctor(struct Point , struct Size )" />
        <Method Sig="struct Rectangle FromLTRB(int , int , int , int )" />
        <Method Sig="instance struct Point get_Location()" />
        <Method Sig="instance void set_Location(struct Point )" />
        <Method Sig="instance struct Size get_Size()" />
        <Method Sig="instance void set_Size(struct Size )" />
        <Method Sig="instance int get_X()" />
        <Method Sig="instance void set_X(int )" />
        <Method Sig="instance int get_Y()" />
        <Method Sig="instance void set_Y(int )" />
        <Method Sig="instance int get_Width()" />
        <Method Sig="instance void set_Width(int )" />
        <Method Sig="instance int get_Height()" />
        <Method Sig="instance void set_Height(int )" />
        <Method Sig="instance int get_Left()" />
        <Method Sig="instance int get_Top()" />
        <Method Sig="instance int get_Right()" />
        <Method Sig="instance int get_Bottom()" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="bool op_Equality(struct Rectangle , struct Rectangle )" />
        <Method Sig="bool op_Inequality(struct Rectangle , struct Rectangle )" />
        <Method Sig="struct Rectangle Ceiling(struct RectangleF )" />
        <Method Sig="struct Rectangle Truncate(struct RectangleF )" />
        <Method Sig="struct Rectangle Round(struct RectangleF )" />
        <Method Sig="instance bool Contains(int , int )" />
        <Method Sig="instance bool Contains(struct Point )" />
        <Method Sig="instance bool Contains(struct Rectangle )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void Inflate(int , int )" />
        <Method Sig="instance void Inflate(struct Size )" />
        <Method Sig="struct Rectangle Inflate(struct Rectangle , int , int )" />
        <Method Sig="instance void Intersect(struct Rectangle )" />
        <Method Sig="struct Rectangle Intersect(struct Rectangle , struct Rectangle )" />
        <Method Sig="instance bool IntersectsWith(struct Rectangle )" />
        <Method Sig="struct Rectangle Union(struct Rectangle , struct Rectangle )" />
        <Method Sig="instance void Offset(struct Point )" />
        <Method Sig="instance void Offset(int , int )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RectangleConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="Region">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct RectangleF )" />
        <Method Sig="instance void .ctor(struct Rectangle )" />
        <Method Sig="instance void .ctor(class GraphicsPath )" />
        <Method Sig="instance void .ctor(class RegionData )" />
        <Method Sig="class Region FromHrgn(intptr )" />
        <Method Sig="instance class Region Clone()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance void MakeInfinite()" />
        <Method Sig="instance void MakeEmpty()" />
        <Method Sig="instance void Intersect(struct RectangleF )" />
        <Method Sig="instance void Intersect(struct Rectangle )" />
        <Method Sig="instance void Intersect(class GraphicsPath )" />
        <Method Sig="instance void Intersect(class Region )" />
        <Method Sig="instance void ReleaseHrgn(intptr )" />
        <Method Sig="instance void Union(struct RectangleF )" />
        <Method Sig="instance void Union(struct Rectangle )" />
        <Method Sig="instance void Union(class GraphicsPath )" />
        <Method Sig="instance void Union(class Region )" />
        <Method Sig="instance void Xor(struct RectangleF )" />
        <Method Sig="instance void Xor(struct Rectangle )" />
        <Method Sig="instance void Xor(class GraphicsPath )" />
        <Method Sig="instance void Xor(class Region )" />
        <Method Sig="instance void Exclude(struct RectangleF )" />
        <Method Sig="instance void Exclude(struct Rectangle )" />
        <Method Sig="instance void Exclude(class GraphicsPath )" />
        <Method Sig="instance void Exclude(class Region )" />
        <Method Sig="instance void Complement(struct RectangleF )" />
        <Method Sig="instance void Complement(struct Rectangle )" />
        <Method Sig="instance void Complement(class GraphicsPath )" />
        <Method Sig="instance void Complement(class Region )" />
        <Method Sig="instance void Translate(float , float )" />
        <Method Sig="instance void Translate(int , int )" />
        <Method Sig="instance void Transform(class Matrix )" />
        <Method Sig="instance struct RectangleF GetBounds(class Graphics )" />
        <Method Sig="instance intptr GetHrgn(class Graphics )" />
        <Method Sig="instance bool IsEmpty(class Graphics )" />
        <Method Sig="instance bool IsInfinite(class Graphics )" />
        <Method Sig="instance bool Equals(class Region , class Graphics )" />
        <Method Sig="instance class RegionData GetRegionData()" />
        <Method Sig="instance bool IsVisible(float , float )" />
        <Method Sig="instance bool IsVisible(struct PointF )" />
        <Method Sig="instance bool IsVisible(float , float , class Graphics )" />
        <Method Sig="instance bool IsVisible(struct PointF , class Graphics )" />
        <Method Sig="instance bool IsVisible(float , float , float , float )" />
        <Method Sig="instance bool IsVisible(struct RectangleF )" />
        <Method Sig="instance bool IsVisible(float , float , float , float , class Graphics )" />
        <Method Sig="instance bool IsVisible(struct RectangleF , class Graphics )" />
        <Method Sig="instance bool IsVisible(int , int , class Graphics )" />
        <Method Sig="instance bool IsVisible(struct Point )" />
        <Method Sig="instance bool IsVisible(struct Point , class Graphics )" />
        <Method Sig="instance bool IsVisible(int , int , int , int )" />
        <Method Sig="instance bool IsVisible(struct Rectangle )" />
        <Method Sig="instance bool IsVisible(int , int , int , int , class Graphics )" />
        <Method Sig="instance bool IsVisible(struct Rectangle , class Graphics )" />
        <Method Sig="instance [] struct RectangleF GetRegionScans(class Matrix )" />
      </Type>
      <Type Name="Size">
        <Method Sig="instance void .ctor(struct Point )" />
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="struct SizeF op_Implicit(struct Size )" />
        <Method Sig="struct Size op_Addition(struct Size , struct Size )" />
        <Method Sig="struct Size op_Subtraction(struct Size , struct Size )" />
        <Method Sig="bool op_Equality(struct Size , struct Size )" />
        <Method Sig="bool op_Inequality(struct Size , struct Size )" />
        <Method Sig="struct Point op_Explicit(struct Size )" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance int get_Width()" />
        <Method Sig="instance void set_Width(int )" />
        <Method Sig="instance int get_Height()" />
        <Method Sig="instance void set_Height(int )" />
        <Method Sig="struct Size Add(struct Size , struct Size )" />
        <Method Sig="struct Size Ceiling(struct SizeF )" />
        <Method Sig="struct Size Subtract(struct Size , struct Size )" />
        <Method Sig="struct Size Truncate(struct SizeF )" />
        <Method Sig="struct Size Round(struct SizeF )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SizeConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="SolidBrush">
        <Method Sig="instance void .ctor(struct Color )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance struct Color get_Color()" />
        <Method Sig="instance void set_Color(struct Color )" />
      </Type>
      <Type Name="SystemBrushes">
        <Method Sig="class Brush get_ActiveBorder()" />
        <Method Sig="class Brush get_ActiveCaption()" />
        <Method Sig="class Brush get_ActiveCaptionText()" />
        <Method Sig="class Brush get_AppWorkspace()" />
        <Method Sig="class Brush get_ButtonFace()" />
        <Method Sig="class Brush get_ButtonHighlight()" />
        <Method Sig="class Brush get_ButtonShadow()" />
        <Method Sig="class Brush get_Control()" />
        <Method Sig="class Brush get_ControlLightLight()" />
        <Method Sig="class Brush get_ControlLight()" />
        <Method Sig="class Brush get_ControlDark()" />
        <Method Sig="class Brush get_ControlDarkDark()" />
        <Method Sig="class Brush get_ControlText()" />
        <Method Sig="class Brush get_Desktop()" />
        <Method Sig="class Brush get_GradientActiveCaption()" />
        <Method Sig="class Brush get_GradientInactiveCaption()" />
        <Method Sig="class Brush get_GrayText()" />
        <Method Sig="class Brush get_Highlight()" />
        <Method Sig="class Brush get_HighlightText()" />
        <Method Sig="class Brush get_HotTrack()" />
        <Method Sig="class Brush get_InactiveCaption()" />
        <Method Sig="class Brush get_InactiveBorder()" />
        <Method Sig="class Brush get_InactiveCaptionText()" />
        <Method Sig="class Brush get_Info()" />
        <Method Sig="class Brush get_InfoText()" />
        <Method Sig="class Brush get_Menu()" />
        <Method Sig="class Brush get_MenuBar()" />
        <Method Sig="class Brush get_MenuHighlight()" />
        <Method Sig="class Brush get_MenuText()" />
        <Method Sig="class Brush get_ScrollBar()" />
        <Method Sig="class Brush get_Window()" />
        <Method Sig="class Brush get_WindowFrame()" />
        <Method Sig="class Brush get_WindowText()" />
        <Method Sig="class Brush FromSystemColor(struct Color )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SystemColors">
        <Method Sig="struct Color get_ActiveBorder()" />
        <Method Sig="struct Color get_ActiveCaption()" />
        <Method Sig="struct Color get_ActiveCaptionText()" />
        <Method Sig="struct Color get_AppWorkspace()" />
        <Method Sig="struct Color get_ButtonFace()" />
        <Method Sig="struct Color get_ButtonHighlight()" />
        <Method Sig="struct Color get_ButtonShadow()" />
        <Method Sig="struct Color get_Control()" />
        <Method Sig="struct Color get_ControlDark()" />
        <Method Sig="struct Color get_ControlDarkDark()" />
        <Method Sig="struct Color get_ControlLight()" />
        <Method Sig="struct Color get_ControlLightLight()" />
        <Method Sig="struct Color get_ControlText()" />
        <Method Sig="struct Color get_Desktop()" />
        <Method Sig="struct Color get_GradientActiveCaption()" />
        <Method Sig="struct Color get_GradientInactiveCaption()" />
        <Method Sig="struct Color get_GrayText()" />
        <Method Sig="struct Color get_Highlight()" />
        <Method Sig="struct Color get_HighlightText()" />
        <Method Sig="struct Color get_HotTrack()" />
        <Method Sig="struct Color get_InactiveBorder()" />
        <Method Sig="struct Color get_InactiveCaption()" />
        <Method Sig="struct Color get_InactiveCaptionText()" />
        <Method Sig="struct Color get_Info()" />
        <Method Sig="struct Color get_InfoText()" />
        <Method Sig="struct Color get_Menu()" />
        <Method Sig="struct Color get_MenuBar()" />
        <Method Sig="struct Color get_MenuHighlight()" />
        <Method Sig="struct Color get_MenuText()" />
        <Method Sig="struct Color get_ScrollBar()" />
        <Method Sig="struct Color get_Window()" />
        <Method Sig="struct Color get_WindowFrame()" />
        <Method Sig="struct Color get_WindowText()" />
      </Type>
      <Type Name="SystemFonts">
        <Method Sig="class Font get_CaptionFont()" />
        <Method Sig="class Font get_SmallCaptionFont()" />
        <Method Sig="class Font get_MenuFont()" />
        <Method Sig="class Font get_StatusFont()" />
        <Method Sig="class Font get_MessageBoxFont()" />
        <Method Sig="class Font get_IconTitleFont()" />
        <Method Sig="class Font get_DefaultFont()" />
        <Method Sig="class Font get_DialogFont()" />
        <Method Sig="class Font GetFontByName(string )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SystemIcons">
        <Method Sig="class Icon get_Application()" />
        <Method Sig="class Icon get_Asterisk()" />
        <Method Sig="class Icon get_Error()" />
        <Method Sig="class Icon get_Exclamation()" />
        <Method Sig="class Icon get_Hand()" />
        <Method Sig="class Icon get_Information()" />
        <Method Sig="class Icon get_Question()" />
        <Method Sig="class Icon get_Warning()" />
        <Method Sig="class Icon get_WinLogo()" />
      </Type>
      <Type Name="SystemPens">
        <Method Sig="class Pen get_ActiveBorder()" />
        <Method Sig="class Pen get_ActiveCaption()" />
        <Method Sig="class Pen get_ActiveCaptionText()" />
        <Method Sig="class Pen get_AppWorkspace()" />
        <Method Sig="class Pen get_ButtonFace()" />
        <Method Sig="class Pen get_ButtonHighlight()" />
        <Method Sig="class Pen get_ButtonShadow()" />
        <Method Sig="class Pen get_Control()" />
        <Method Sig="class Pen get_ControlText()" />
        <Method Sig="class Pen get_ControlDark()" />
        <Method Sig="class Pen get_ControlDarkDark()" />
        <Method Sig="class Pen get_ControlLight()" />
        <Method Sig="class Pen get_ControlLightLight()" />
        <Method Sig="class Pen get_Desktop()" />
        <Method Sig="class Pen get_GradientActiveCaption()" />
        <Method Sig="class Pen get_GradientInactiveCaption()" />
        <Method Sig="class Pen get_GrayText()" />
        <Method Sig="class Pen get_Highlight()" />
        <Method Sig="class Pen get_HighlightText()" />
        <Method Sig="class Pen get_HotTrack()" />
        <Method Sig="class Pen get_InactiveBorder()" />
        <Method Sig="class Pen get_InactiveCaption()" />
        <Method Sig="class Pen get_InactiveCaptionText()" />
        <Method Sig="class Pen get_Info()" />
        <Method Sig="class Pen get_InfoText()" />
        <Method Sig="class Pen get_Menu()" />
        <Method Sig="class Pen get_MenuBar()" />
        <Method Sig="class Pen get_MenuHighlight()" />
        <Method Sig="class Pen get_MenuText()" />
        <Method Sig="class Pen get_ScrollBar()" />
        <Method Sig="class Pen get_Window()" />
        <Method Sig="class Pen get_WindowFrame()" />
        <Method Sig="class Pen get_WindowText()" />
        <Method Sig="class Pen FromSystemColor(struct Color )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="ToolboxBitmapAttribute">
        <Method Sig="instance void .ctor(string )">
          <Demand>
            <PermissionSet version="1" class="System.Security.PermissionSet">
              <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" PathDiscovery="*AllFiles*" />
            </PermissionSet>
          </Demand>
        </Method>
        <Method Sig="instance void .ctor(class Type )" />
        <Method Sig="instance void .ctor(class Type , string )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance class Image GetImage(object )" />
        <Method Sig="instance class Image GetImage(object , bool )" />
        <Method Sig="instance class Image GetImage(class Type )" />
        <Method Sig="instance class Image GetImage(class Type , bool )" />
        <Method Sig="instance class Image GetImage(class Type , string , bool )" />
        <Method Sig="class Image GetImageFromResource(class Type , string , bool )" />
        <Method Sig="void .cctor()" />
      </Type>
      <Namespace Name="Drawing2D">
        <Type Name="CustomLineCap">
          <Method Sig="instance void .ctor(class GraphicsPath , class GraphicsPath )" />
          <Method Sig="instance void .ctor(class GraphicsPath , class GraphicsPath , struct LineCap )" />
          <Method Sig="instance void .ctor(class GraphicsPath , class GraphicsPath , struct LineCap , float )" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance void SetStrokeCaps(struct LineCap , struct LineCap )" />
          <Method Sig="instance void GetStrokeCaps(&amp; struct LineCap , &amp; struct LineCap )" />
          <Method Sig="instance struct LineJoin get_StrokeJoin()" />
          <Method Sig="instance void set_StrokeJoin(struct LineJoin )" />
          <Method Sig="instance struct LineCap get_BaseCap()" />
          <Method Sig="instance void set_BaseCap(struct LineCap )" />
          <Method Sig="instance float get_BaseInset()" />
          <Method Sig="instance void set_BaseInset(float )" />
          <Method Sig="instance float get_WidthScale()" />
          <Method Sig="instance void set_WidthScale(float )" />
        </Type>
        <Type Name="AdjustableArrowCap">
          <Method Sig="instance void .ctor(float , float )" />
          <Method Sig="instance void .ctor(float , float , bool )" />
          <Method Sig="instance float get_Height()" />
          <Method Sig="instance void set_Height(float )" />
          <Method Sig="instance float get_Width()" />
          <Method Sig="instance void set_Width(float )" />
          <Method Sig="instance float get_MiddleInset()" />
          <Method Sig="instance void set_MiddleInset(float )" />
          <Method Sig="instance bool get_Filled()" />
          <Method Sig="instance void set_Filled(bool )" />
        </Type>
        <Type Name="Blend">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance [] float get_Factors()" />
          <Method Sig="instance void set_Factors([] float )" />
          <Method Sig="instance [] float get_Positions()" />
          <Method Sig="instance void set_Positions([] float )" />
        </Type>
        <Type Name="ColorBlend">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance [] struct Color get_Colors()" />
          <Method Sig="instance void set_Colors([] struct Color )" />
          <Method Sig="instance [] float get_Positions()" />
          <Method Sig="instance void set_Positions([] float )" />
        </Type>
        <Type Name="GraphicsPath">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(struct FillMode )" />
          <Method Sig="instance void .ctor([] struct PointF , [] byte )" />
          <Method Sig="instance void .ctor([] struct PointF , [] byte , struct FillMode )" />
          <Method Sig="instance void .ctor([] struct Point , [] byte )" />
          <Method Sig="instance void .ctor([] struct Point , [] byte , struct FillMode )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance void Reset()" />
          <Method Sig="instance struct FillMode get_FillMode()" />
          <Method Sig="instance void set_FillMode(struct FillMode )" />
          <Method Sig="instance class PathData get_PathData()" />
          <Method Sig="instance void StartFigure()" />
          <Method Sig="instance void CloseFigure()" />
          <Method Sig="instance void CloseAllFigures()" />
          <Method Sig="instance void SetMarkers()" />
          <Method Sig="instance void ClearMarkers()" />
          <Method Sig="instance void Reverse()" />
          <Method Sig="instance struct PointF GetLastPoint()" />
          <Method Sig="instance bool IsVisible(float , float )" />
          <Method Sig="instance bool IsVisible(struct PointF )" />
          <Method Sig="instance bool IsVisible(float , float , class Graphics )" />
          <Method Sig="instance bool IsVisible(struct PointF , class Graphics )" />
          <Method Sig="instance bool IsVisible(int , int )" />
          <Method Sig="instance bool IsVisible(struct Point )" />
          <Method Sig="instance bool IsVisible(int , int , class Graphics )" />
          <Method Sig="instance bool IsVisible(struct Point , class Graphics )" />
          <Method Sig="instance bool IsOutlineVisible(float , float , class Pen )" />
          <Method Sig="instance bool IsOutlineVisible(struct PointF , class Pen )" />
          <Method Sig="instance bool IsOutlineVisible(float , float , class Pen , class Graphics )" />
          <Method Sig="instance bool IsOutlineVisible(struct PointF , class Pen , class Graphics )" />
          <Method Sig="instance bool IsOutlineVisible(int , int , class Pen )" />
          <Method Sig="instance bool IsOutlineVisible(struct Point , class Pen )" />
          <Method Sig="instance bool IsOutlineVisible(int , int , class Pen , class Graphics )" />
          <Method Sig="instance bool IsOutlineVisible(struct Point , class Pen , class Graphics )" />
          <Method Sig="instance void AddLine(struct PointF , struct PointF )" />
          <Method Sig="instance void AddLine(float , float , float , float )" />
          <Method Sig="instance void AddLines([] struct PointF )" />
          <Method Sig="instance void AddLine(struct Point , struct Point )" />
          <Method Sig="instance void AddLine(int , int , int , int )" />
          <Method Sig="instance void AddLines([] struct Point )" />
          <Method Sig="instance void AddArc(struct RectangleF , float , float )" />
          <Method Sig="instance void AddArc(float , float , float , float , float , float )" />
          <Method Sig="instance void AddArc(struct Rectangle , float , float )" />
          <Method Sig="instance void AddArc(int , int , int , int , float , float )" />
          <Method Sig="instance void AddBezier(struct PointF , struct PointF , struct PointF , struct PointF )" />
          <Method Sig="instance void AddBezier(float , float , float , float , float , float , float , float )" />
          <Method Sig="instance void AddBeziers([] struct PointF )" />
          <Method Sig="instance void AddBezier(struct Point , struct Point , struct Point , struct Point )" />
          <Method Sig="instance void AddBezier(int , int , int , int , int , int , int , int )" />
          <Method Sig="instance void AddBeziers([] struct Point )" />
          <Method Sig="instance void AddCurve([] struct PointF )" />
          <Method Sig="instance void AddCurve([] struct PointF , float )" />
          <Method Sig="instance void AddCurve([] struct PointF , int , int , float )" />
          <Method Sig="instance void AddCurve([] struct Point )" />
          <Method Sig="instance void AddCurve([] struct Point , float )" />
          <Method Sig="instance void AddCurve([] struct Point , int , int , float )" />
          <Method Sig="instance void AddClosedCurve([] struct PointF )" />
          <Method Sig="instance void AddClosedCurve([] struct PointF , float )" />
          <Method Sig="instance void AddClosedCurve([] struct Point )" />
          <Method Sig="instance void AddClosedCurve([] struct Point , float )" />
          <Method Sig="instance void AddRectangle(struct RectangleF )" />
          <Method Sig="instance void AddRectangles([] struct RectangleF )" />
          <Method Sig="instance void AddRectangle(struct Rectangle )" />
          <Method Sig="instance void AddRectangles([] struct Rectangle )" />
          <Method Sig="instance void AddEllipse(struct RectangleF )" />
          <Method Sig="instance void AddEllipse(float , float , float , float )" />
          <Method Sig="instance void AddEllipse(struct Rectangle )" />
          <Method Sig="instance void AddEllipse(int , int , int , int )" />
          <Method Sig="instance void AddPie(struct Rectangle , float , float )" />
          <Method Sig="instance void AddPie(float , float , float , float , float , float )" />
          <Method Sig="instance void AddPie(int , int , int , int , float , float )" />
          <Method Sig="instance void AddPolygon([] struct PointF )" />
          <Method Sig="instance void AddPolygon([] struct Point )" />
          <Method Sig="instance void AddPath(class GraphicsPath , bool )" />
          <Method Sig="instance void AddString(string , class FontFamily , int , float , struct PointF , class StringFormat )" />
          <Method Sig="instance void AddString(string , class FontFamily , int , float , struct Point , class StringFormat )" />
          <Method Sig="instance void AddString(string , class FontFamily , int , float , struct RectangleF , class StringFormat )" />
          <Method Sig="instance void AddString(string , class FontFamily , int , float , struct Rectangle , class StringFormat )" />
          <Method Sig="instance void Transform(class Matrix )" />
          <Method Sig="instance struct RectangleF GetBounds()" />
          <Method Sig="instance struct RectangleF GetBounds(class Matrix )" />
          <Method Sig="instance struct RectangleF GetBounds(class Matrix , class Pen )" />
          <Method Sig="instance void Flatten()" />
          <Method Sig="instance void Flatten(class Matrix )" />
          <Method Sig="instance void Flatten(class Matrix , float )" />
          <Method Sig="instance void Widen(class Pen )" />
          <Method Sig="instance void Widen(class Pen , class Matrix )" />
          <Method Sig="instance void Widen(class Pen , class Matrix , float )" />
          <Method Sig="instance void Warp([] struct PointF , struct RectangleF )" />
          <Method Sig="instance void Warp([] struct PointF , struct RectangleF , class Matrix )" />
          <Method Sig="instance void Warp([] struct PointF , struct RectangleF , class Matrix , struct WarpMode )" />
          <Method Sig="instance void Warp([] struct PointF , struct RectangleF , class Matrix , struct WarpMode , float )" />
          <Method Sig="instance int get_PointCount()" />
          <Method Sig="instance [] byte get_PathTypes()" />
          <Method Sig="instance [] struct PointF get_PathPoints()" />
        </Type>
        <Type Name="GraphicsPathIterator">
          <Method Sig="instance void .ctor(class GraphicsPath )" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance int NextSubpath(&amp; int , &amp; int , &amp; bool )" />
          <Method Sig="instance int NextSubpath(class GraphicsPath , &amp; bool )" />
          <Method Sig="instance int NextPathType(&amp; byte , &amp; int , &amp; int )" />
          <Method Sig="instance int NextMarker(&amp; int , &amp; int )" />
          <Method Sig="instance int NextMarker(class GraphicsPath )" />
          <Method Sig="instance int get_Count()" />
          <Method Sig="instance int get_SubpathCount()" />
          <Method Sig="instance bool HasCurve()" />
          <Method Sig="instance void Rewind()" />
          <Method Sig="instance int Enumerate(&amp; [] struct PointF , &amp; [] byte )" />
          <Method Sig="instance int CopyData(&amp; [] struct PointF , &amp; [] byte , int , int )" />
        </Type>
        <Type Name="HatchBrush">
          <Method Sig="instance void .ctor(struct HatchStyle , struct Color )" />
          <Method Sig="instance void .ctor(struct HatchStyle , struct Color , struct Color )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance struct HatchStyle get_HatchStyle()" />
          <Method Sig="instance struct Color get_ForegroundColor()" />
          <Method Sig="instance struct Color get_BackgroundColor()" />
        </Type>
        <Type Name="LinearGradientBrush">
          <Method Sig="instance void .ctor(struct PointF , struct PointF , struct Color , struct Color )" />
          <Method Sig="instance void .ctor(struct Point , struct Point , struct Color , struct Color )" />
          <Method Sig="instance void .ctor(struct RectangleF , struct Color , struct Color , struct LinearGradientMode )" />
          <Method Sig="instance void .ctor(struct Rectangle , struct Color , struct Color , struct LinearGradientMode )" />
          <Method Sig="instance void .ctor(struct RectangleF , struct Color , struct Color , float )" />
          <Method Sig="instance void .ctor(struct RectangleF , struct Color , struct Color , float , bool )" />
          <Method Sig="instance void .ctor(struct Rectangle , struct Color , struct Color , float )" />
          <Method Sig="instance void .ctor(struct Rectangle , struct Color , struct Color , float , bool )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance [] struct Color get_LinearColors()" />
          <Method Sig="instance void set_LinearColors([] struct Color )" />
          <Method Sig="instance struct RectangleF get_Rectangle()" />
          <Method Sig="instance bool get_GammaCorrection()" />
          <Method Sig="instance void set_GammaCorrection(bool )" />
          <Method Sig="instance class Blend get_Blend()" />
          <Method Sig="instance void set_Blend(class Blend )" />
          <Method Sig="instance void SetSigmaBellShape(float )" />
          <Method Sig="instance void SetSigmaBellShape(float , float )" />
          <Method Sig="instance void SetBlendTriangularShape(float )" />
          <Method Sig="instance void SetBlendTriangularShape(float , float )" />
          <Method Sig="instance class ColorBlend get_InterpolationColors()" />
          <Method Sig="instance void set_InterpolationColors(class ColorBlend )" />
          <Method Sig="instance struct WrapMode get_WrapMode()" />
          <Method Sig="instance void set_WrapMode(struct WrapMode )" />
          <Method Sig="instance class Matrix get_Transform()" />
          <Method Sig="instance void set_Transform(class Matrix )" />
          <Method Sig="instance void ResetTransform()" />
          <Method Sig="instance void MultiplyTransform(class Matrix )" />
          <Method Sig="instance void MultiplyTransform(class Matrix , struct MatrixOrder )" />
          <Method Sig="instance void TranslateTransform(float , float )" />
          <Method Sig="instance void TranslateTransform(float , float , struct MatrixOrder )" />
          <Method Sig="instance void ScaleTransform(float , float )" />
          <Method Sig="instance void ScaleTransform(float , float , struct MatrixOrder )" />
          <Method Sig="instance void RotateTransform(float )" />
          <Method Sig="instance void RotateTransform(float , struct MatrixOrder )" />
        </Type>
        <Type Name="Matrix">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(float , float , float , float , float , float )" />
          <Method Sig="instance void .ctor(struct RectangleF , [] struct PointF )" />
          <Method Sig="instance void .ctor(struct Rectangle , [] struct Point )" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance class Matrix Clone()" />
          <Method Sig="instance [] float get_Elements()" />
          <Method Sig="instance float get_OffsetX()" />
          <Method Sig="instance float get_OffsetY()" />
          <Method Sig="instance void Reset()" />
          <Method Sig="instance void Multiply(class Matrix )" />
          <Method Sig="instance void Multiply(class Matrix , struct MatrixOrder )" />
          <Method Sig="instance void Translate(float , float )" />
          <Method Sig="instance void Translate(float , float , struct MatrixOrder )" />
          <Method Sig="instance void Scale(float , float )" />
          <Method Sig="instance void Scale(float , float , struct MatrixOrder )" />
          <Method Sig="instance void Rotate(float )" />
          <Method Sig="instance void Rotate(float , struct MatrixOrder )" />
          <Method Sig="instance void RotateAt(float , struct PointF )" />
          <Method Sig="instance void RotateAt(float , struct PointF , struct MatrixOrder )" />
          <Method Sig="instance void Shear(float , float )" />
          <Method Sig="instance void Shear(float , float , struct MatrixOrder )" />
          <Method Sig="instance void Invert()" />
          <Method Sig="instance void TransformPoints([] struct PointF )" />
          <Method Sig="instance void TransformPoints([] struct Point )" />
          <Method Sig="instance void TransformVectors([] struct PointF )" />
          <Method Sig="instance void VectorTransformPoints([] struct Point )" />
          <Method Sig="instance void TransformVectors([] struct Point )" />
          <Method Sig="instance bool get_IsInvertible()" />
          <Method Sig="instance bool get_IsIdentity()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
        </Type>
        <Type Name="PathData">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance [] struct PointF get_Points()" />
          <Method Sig="instance void set_Points([] struct PointF )" />
          <Method Sig="instance [] byte get_Types()" />
          <Method Sig="instance void set_Types([] byte )" />
        </Type>
        <Type Name="PathGradientBrush">
          <Method Sig="instance void .ctor([] struct PointF )" />
          <Method Sig="instance void .ctor([] struct PointF , struct WrapMode )" />
          <Method Sig="instance void .ctor([] struct Point )" />
          <Method Sig="instance void .ctor([] struct Point , struct WrapMode )" />
          <Method Sig="instance void .ctor(class GraphicsPath )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance struct Color get_CenterColor()" />
          <Method Sig="instance void set_CenterColor(struct Color )" />
          <Method Sig="instance [] struct Color get_SurroundColors()" />
          <Method Sig="instance void set_SurroundColors([] struct Color )" />
          <Method Sig="instance struct PointF get_CenterPoint()" />
          <Method Sig="instance void set_CenterPoint(struct PointF )" />
          <Method Sig="instance struct RectangleF get_Rectangle()" />
          <Method Sig="instance class Blend get_Blend()" />
          <Method Sig="instance void set_Blend(class Blend )" />
          <Method Sig="instance void SetSigmaBellShape(float )" />
          <Method Sig="instance void SetSigmaBellShape(float , float )" />
          <Method Sig="instance void SetBlendTriangularShape(float )" />
          <Method Sig="instance void SetBlendTriangularShape(float , float )" />
          <Method Sig="instance class ColorBlend get_InterpolationColors()" />
          <Method Sig="instance void set_InterpolationColors(class ColorBlend )" />
          <Method Sig="instance class Matrix get_Transform()" />
          <Method Sig="instance void set_Transform(class Matrix )" />
          <Method Sig="instance void ResetTransform()" />
          <Method Sig="instance void MultiplyTransform(class Matrix )" />
          <Method Sig="instance void MultiplyTransform(class Matrix , struct MatrixOrder )" />
          <Method Sig="instance void TranslateTransform(float , float )" />
          <Method Sig="instance void TranslateTransform(float , float , struct MatrixOrder )" />
          <Method Sig="instance void ScaleTransform(float , float )" />
          <Method Sig="instance void ScaleTransform(float , float , struct MatrixOrder )" />
          <Method Sig="instance void RotateTransform(float )" />
          <Method Sig="instance void RotateTransform(float , struct MatrixOrder )" />
          <Method Sig="instance struct PointF get_FocusScales()" />
          <Method Sig="instance void set_FocusScales(struct PointF )" />
          <Method Sig="instance struct WrapMode get_WrapMode()" />
          <Method Sig="instance void set_WrapMode(struct WrapMode )" />
        </Type>
        <Type Name="RegionData">
          <Method Sig="instance [] byte get_Data()" />
          <Method Sig="instance void set_Data([] byte )" />
        </Type>
      </Namespace>
      <Namespace Name="Imaging">
        <Type Name="BitmapData">
          <Method Sig="instance int get_Width()" />
          <Method Sig="instance void set_Width(int )" />
          <Method Sig="instance int get_Height()" />
          <Method Sig="instance void set_Height(int )" />
          <Method Sig="instance int get_Stride()" />
          <Method Sig="instance void set_Stride(int )" />
          <Method Sig="instance struct PixelFormat get_PixelFormat()" />
          <Method Sig="instance void set_PixelFormat(struct PixelFormat )" />
          <Method Sig="instance intptr get_Scan0()" />
          <Method Sig="instance void set_Scan0(intptr )" />
          <Method Sig="instance int get_Reserved()" />
          <Method Sig="instance void set_Reserved(int )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="ColorMap">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct Color get_OldColor()" />
          <Method Sig="instance void set_OldColor(struct Color )" />
          <Method Sig="instance struct Color get_NewColor()" />
          <Method Sig="instance void set_NewColor(struct Color )" />
        </Type>
        <Type Name="ColorMatrix">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance float get_Matrix00()" />
          <Method Sig="instance void set_Matrix00(float )" />
          <Method Sig="instance float get_Matrix01()" />
          <Method Sig="instance void set_Matrix01(float )" />
          <Method Sig="instance float get_Matrix02()" />
          <Method Sig="instance void set_Matrix02(float )" />
          <Method Sig="instance float get_Matrix03()" />
          <Method Sig="instance void set_Matrix03(float )" />
          <Method Sig="instance float get_Matrix04()" />
          <Method Sig="instance void set_Matrix04(float )" />
          <Method Sig="instance float get_Matrix10()" />
          <Method Sig="instance void set_Matrix10(float )" />
          <Method Sig="instance float get_Matrix11()" />
          <Method Sig="instance void set_Matrix11(float )" />
          <Method Sig="instance float get_Matrix12()" />
          <Method Sig="instance void set_Matrix12(float )" />
          <Method Sig="instance float get_Matrix13()" />
          <Method Sig="instance void set_Matrix13(float )" />
          <Method Sig="instance float get_Matrix14()" />
          <Method Sig="instance void set_Matrix14(float )" />
          <Method Sig="instance float get_Matrix20()" />
          <Method Sig="instance void set_Matrix20(float )" />
          <Method Sig="instance float get_Matrix21()" />
          <Method Sig="instance void set_Matrix21(float )" />
          <Method Sig="instance float get_Matrix22()" />
          <Method Sig="instance void set_Matrix22(float )" />
          <Method Sig="instance float get_Matrix23()" />
          <Method Sig="instance void set_Matrix23(float )" />
          <Method Sig="instance float get_Matrix24()" />
          <Method Sig="instance void set_Matrix24(float )" />
          <Method Sig="instance float get_Matrix30()" />
          <Method Sig="instance void set_Matrix30(float )" />
          <Method Sig="instance float get_Matrix31()" />
          <Method Sig="instance void set_Matrix31(float )" />
          <Method Sig="instance float get_Matrix32()" />
          <Method Sig="instance void set_Matrix32(float )" />
          <Method Sig="instance float get_Matrix33()" />
          <Method Sig="instance void set_Matrix33(float )" />
          <Method Sig="instance float get_Matrix34()" />
          <Method Sig="instance void set_Matrix34(float )" />
          <Method Sig="instance float get_Matrix40()" />
          <Method Sig="instance void set_Matrix40(float )" />
          <Method Sig="instance float get_Matrix41()" />
          <Method Sig="instance void set_Matrix41(float )" />
          <Method Sig="instance float get_Matrix42()" />
          <Method Sig="instance void set_Matrix42(float )" />
          <Method Sig="instance float get_Matrix43()" />
          <Method Sig="instance void set_Matrix43(float )" />
          <Method Sig="instance float get_Matrix44()" />
          <Method Sig="instance void set_Matrix44(float )" />
          <Method Sig="instance void .ctor([] [] float )" />
          <Method Sig="instance float get_Item(int , int )" />
          <Method Sig="instance void set_Item(int , int , float )" />
        </Type>
        <Type Name="ColorPalette">
          <Method Sig="instance int get_Flags()" />
          <Method Sig="instance [] struct Color get_Entries()" />
        </Type>
        <Type Name="Encoder">
          <Method Sig="instance void .ctor(struct Guid )" />
          <Method Sig="instance struct Guid get_Guid()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="EncoderParameter">
          <Method Sig="instance class Encoder get_Encoder()" />
          <Method Sig="instance void set_Encoder(class Encoder )" />
          <Method Sig="instance struct EncoderParameterValueType get_Type()" />
          <Method Sig="instance struct EncoderParameterValueType get_ValueType()" />
          <Method Sig="instance int get_NumberOfValues()" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance void .ctor(class Encoder , byte )" />
          <Method Sig="instance void .ctor(class Encoder , byte , bool )" />
          <Method Sig="instance void .ctor(class Encoder , short )" />
          <Method Sig="instance void .ctor(class Encoder , in64 )" />
          <Method Sig="instance void .ctor(class Encoder , int , int )" />
          <Method Sig="instance void .ctor(class Encoder , in64 , in64 )" />
          <Method Sig="instance void .ctor(class Encoder , int , int , int , int )" />
          <Method Sig="instance void .ctor(class Encoder , string )" />
          <Method Sig="instance void .ctor(class Encoder , [] byte )" />
          <Method Sig="instance void .ctor(class Encoder , [] byte , bool )" />
          <Method Sig="instance void .ctor(class Encoder , [] short )" />
          <Method Sig="instance void .ctor(class Encoder , [] in64 )" />
          <Method Sig="instance void .ctor(class Encoder , [] int , [] int )" />
          <Method Sig="instance void .ctor(class Encoder , [] in64 , [] in64 )" />
          <Method Sig="instance void .ctor(class Encoder , [] int , [] int , [] int , [] int )" />
          <Method Sig="instance void .ctor(class Encoder , int , int , int )" />
        </Type>
        <Type Name="EncoderParameters">
          <Method Sig="instance void .ctor(int )" />
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance [] class EncoderParameter get_Param()" />
          <Method Sig="instance void set_Param([] class EncoderParameter )" />
          <Method Sig="instance void Dispose()" />
        </Type>
        <Type Name="FrameDimension">
          <Method Sig="instance void .ctor(struct Guid )" />
          <Method Sig="instance struct Guid get_Guid()" />
          <Method Sig="class FrameDimension get_Time()" />
          <Method Sig="class FrameDimension get_Resolution()" />
          <Method Sig="class FrameDimension get_Page()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="ImageAttributes">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance void SetColorMatrix(class ColorMatrix )" />
          <Method Sig="instance void SetColorMatrix(class ColorMatrix , struct ColorMatrixFlag )" />
          <Method Sig="instance void SetColorMatrix(class ColorMatrix , struct ColorMatrixFlag , struct ColorAdjustType )" />
          <Method Sig="instance void ClearColorMatrix()" />
          <Method Sig="instance void ClearColorMatrix(struct ColorAdjustType )" />
          <Method Sig="instance void SetColorMatrices(class ColorMatrix , class ColorMatrix )" />
          <Method Sig="instance void SetColorMatrices(class ColorMatrix , class ColorMatrix , struct ColorMatrixFlag )" />
          <Method Sig="instance void SetColorMatrices(class ColorMatrix , class ColorMatrix , struct ColorMatrixFlag , struct ColorAdjustType )" />
          <Method Sig="instance void SetThreshold(float )" />
          <Method Sig="instance void SetThreshold(float , struct ColorAdjustType )" />
          <Method Sig="instance void ClearThreshold()" />
          <Method Sig="instance void ClearThreshold(struct ColorAdjustType )" />
          <Method Sig="instance void SetGamma(float )" />
          <Method Sig="instance void SetGamma(float , struct ColorAdjustType )" />
          <Method Sig="instance void ClearGamma()" />
          <Method Sig="instance void ClearGamma(struct ColorAdjustType )" />
          <Method Sig="instance void SetNoOp()" />
          <Method Sig="instance void SetNoOp(struct ColorAdjustType )" />
          <Method Sig="instance void ClearNoOp()" />
          <Method Sig="instance void ClearNoOp(struct ColorAdjustType )" />
          <Method Sig="instance void SetColorKey(struct Color , struct Color )" />
          <Method Sig="instance void SetColorKey(struct Color , struct Color , struct ColorAdjustType )" />
          <Method Sig="instance void ClearColorKey()" />
          <Method Sig="instance void ClearColorKey(struct ColorAdjustType )" />
          <Method Sig="instance void SetOutputChannel(struct ColorChannelFlag )" />
          <Method Sig="instance void SetOutputChannel(struct ColorChannelFlag , struct ColorAdjustType )" />
          <Method Sig="instance void ClearOutputChannel()" />
          <Method Sig="instance void ClearOutputChannel(struct ColorAdjustType )" />
          <Method Sig="instance void SetOutputChannelColorProfile(string )" />
          <Method Sig="instance void SetOutputChannelColorProfile(string , struct ColorAdjustType )" />
          <Method Sig="instance void ClearOutputChannelColorProfile()" />
          <Method Sig="instance void ClearOutputChannelColorProfile(struct ColorAdjustType )" />
          <Method Sig="instance void SetRemapTable([] class ColorMap )" />
          <Method Sig="instance void SetRemapTable([] class ColorMap , struct ColorAdjustType )" />
          <Method Sig="instance void ClearRemapTable()" />
          <Method Sig="instance void ClearRemapTable(struct ColorAdjustType )" />
          <Method Sig="instance void SetBrushRemapTable([] class ColorMap )" />
          <Method Sig="instance void ClearBrushRemapTable()" />
          <Method Sig="instance void SetWrapMode(struct WrapMode )" />
          <Method Sig="instance void SetWrapMode(struct WrapMode , struct Color )" />
          <Method Sig="instance void SetWrapMode(struct WrapMode , struct Color , bool )" />
          <Method Sig="instance void GetAdjustedPalette(class ColorPalette , struct ColorAdjustType )" />
        </Type>
        <Type Name="ImageCodecInfo">
          <Method Sig="instance struct Guid get_Clsid()" />
          <Method Sig="instance void set_Clsid(struct Guid )" />
          <Method Sig="instance struct Guid get_FormatID()" />
          <Method Sig="instance void set_FormatID(struct Guid )" />
          <Method Sig="instance string get_CodecName()" />
          <Method Sig="instance void set_CodecName(string )" />
          <Method Sig="instance string get_DllName()" />
          <Method Sig="instance void set_DllName(string )" />
          <Method Sig="instance string get_FormatDescription()" />
          <Method Sig="instance void set_FormatDescription(string )" />
          <Method Sig="instance string get_FilenameExtension()" />
          <Method Sig="instance void set_FilenameExtension(string )" />
          <Method Sig="instance string get_MimeType()" />
          <Method Sig="instance void set_MimeType(string )" />
          <Method Sig="instance struct ImageCodecFlags get_Flags()" />
          <Method Sig="instance void set_Flags(struct ImageCodecFlags )" />
          <Method Sig="instance int get_Version()" />
          <Method Sig="instance void set_Version(int )" />
          <Method Sig="instance [] [] byte get_SignaturePatterns()" />
          <Method Sig="instance void set_SignaturePatterns([] [] byte )" />
          <Method Sig="instance [] [] byte get_SignatureMasks()" />
          <Method Sig="instance void set_SignatureMasks([] [] byte )" />
          <Method Sig="[] class ImageCodecInfo GetImageDecoders()" />
          <Method Sig="[] class ImageCodecInfo GetImageEncoders()" />
        </Type>
        <Type Name="ImageFormat">
          <Method Sig="instance void .ctor(struct Guid )" />
          <Method Sig="instance struct Guid get_Guid()" />
          <Method Sig="class ImageFormat get_MemoryBmp()" />
          <Method Sig="class ImageFormat get_Bmp()" />
          <Method Sig="class ImageFormat get_Emf()" />
          <Method Sig="class ImageFormat get_Wmf()" />
          <Method Sig="class ImageFormat get_Gif()" />
          <Method Sig="class ImageFormat get_Jpeg()" />
          <Method Sig="class ImageFormat get_Png()" />
          <Method Sig="class ImageFormat get_Tiff()" />
          <Method Sig="class ImageFormat get_Exif()" />
          <Method Sig="class ImageFormat get_Icon()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="instance string ToString()" />
          <Method Sig="void .cctor()" />
        </Type>
        <Type Name="Metafile">
          <Method Sig="instance void .ctor(intptr , class WmfPlaceableFileHeader )" />
          <Method Sig="instance void .ctor(intptr , class WmfPlaceableFileHeader , bool )" />
          <Method Sig="instance void .ctor(intptr , bool )" />
          <Method Sig="instance void .ctor(string )" />
          <Method Sig="instance void .ctor(class Stream )" />
          <Method Sig="instance void .ctor(intptr , struct EmfType )" />
          <Method Sig="instance void .ctor(intptr , struct EmfType , string )" />
          <Method Sig="instance void .ctor(intptr , struct RectangleF )" />
          <Method Sig="instance void .ctor(intptr , struct RectangleF , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="instance void .ctor(intptr , struct Rectangle )" />
          <Method Sig="instance void .ctor(intptr , struct Rectangle , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="instance void .ctor(string , intptr )" />
          <Method Sig="instance void .ctor(string , intptr , struct EmfType )" />
          <Method Sig="instance void .ctor(string , intptr , struct EmfType , string )" />
          <Method Sig="instance void .ctor(string , intptr , struct RectangleF )" />
          <Method Sig="instance void .ctor(string , intptr , struct RectangleF , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(string , intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(string , intptr , struct RectangleF , struct MetafileFrameUnit , string )" />
          <Method Sig="instance void .ctor(string , intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="instance void .ctor(string , intptr , struct Rectangle )" />
          <Method Sig="instance void .ctor(string , intptr , struct Rectangle , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(string , intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(string , intptr , struct Rectangle , struct MetafileFrameUnit , string )" />
          <Method Sig="instance void .ctor(string , intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="instance void .ctor(class Stream , intptr )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct EmfType )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct EmfType , string )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct RectangleF )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct RectangleF , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct RectangleF , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct Rectangle )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct Rectangle , struct MetafileFrameUnit )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType )" />
          <Method Sig="instance void .ctor(class Stream , intptr , struct Rectangle , struct MetafileFrameUnit , struct EmfType , string )" />
          <Method Sig="class MetafileHeader GetMetafileHeader(intptr , class WmfPlaceableFileHeader )" />
          <Method Sig="class MetafileHeader GetMetafileHeader(intptr )" />
          <Method Sig="class MetafileHeader GetMetafileHeader(string )" />
          <Method Sig="class MetafileHeader GetMetafileHeader(class Stream )" />
          <Method Sig="instance class MetafileHeader GetMetafileHeader()" />
          <Method Sig="instance intptr GetHenhmetafile()" />
          <Method Sig="instance void PlayRecord(struct EmfPlusRecordType , int , int , [] byte )" />
        </Type>
        <Type Name="MetafileHeader">
          <Method Sig="instance struct MetafileType get_Type()" />
          <Method Sig="instance int get_MetafileSize()" />
          <Method Sig="instance int get_Version()" />
          <Method Sig="instance float get_DpiX()" />
          <Method Sig="instance float get_DpiY()" />
          <Method Sig="instance struct Rectangle get_Bounds()" />
          <Method Sig="instance bool IsWmf()" />
          <Method Sig="instance bool IsWmfPlaceable()" />
          <Method Sig="instance bool IsEmf()" />
          <Method Sig="instance bool IsEmfOrEmfPlus()" />
          <Method Sig="instance bool IsEmfPlus()" />
          <Method Sig="instance bool IsEmfPlusDual()" />
          <Method Sig="instance bool IsEmfPlusOnly()" />
          <Method Sig="instance bool IsDisplay()" />
          <Method Sig="instance class MetaHeader get_WmfHeader()" />
          <Method Sig="instance int get_EmfPlusHeaderSize()" />
          <Method Sig="instance int get_LogicalDpiX()" />
          <Method Sig="instance int get_LogicalDpiY()" />
        </Type>
        <Type Name="MetaHeader">
          <Method Sig="instance short get_Type()" />
          <Method Sig="instance void set_Type(short )" />
          <Method Sig="instance short get_HeaderSize()" />
          <Method Sig="instance void set_HeaderSize(short )" />
          <Method Sig="instance short get_Version()" />
          <Method Sig="instance void set_Version(short )" />
          <Method Sig="instance int get_Size()" />
          <Method Sig="instance void set_Size(int )" />
          <Method Sig="instance short get_NoObjects()" />
          <Method Sig="instance void set_NoObjects(short )" />
          <Method Sig="instance int get_MaxRecord()" />
          <Method Sig="instance void set_MaxRecord(int )" />
          <Method Sig="instance short get_NoParameters()" />
          <Method Sig="instance void set_NoParameters(short )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="PlayRecordCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(struct EmfPlusRecordType , int , int , intptr )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(struct EmfPlusRecordType , int , int , intptr , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="PropertyItem">
          <Method Sig="instance int get_Id()" />
          <Method Sig="instance void set_Id(int )" />
          <Method Sig="instance int get_Len()" />
          <Method Sig="instance void set_Len(int )" />
          <Method Sig="instance short get_Type()" />
          <Method Sig="instance void set_Type(short )" />
          <Method Sig="instance [] byte get_Value()" />
          <Method Sig="instance void set_Value([] byte )" />
        </Type>
        <Type Name="WmfPlaceableFileHeader">
          <Method Sig="instance int get_Key()" />
          <Method Sig="instance void set_Key(int )" />
          <Method Sig="instance short get_Hmf()" />
          <Method Sig="instance void set_Hmf(short )" />
          <Method Sig="instance short get_BboxLeft()" />
          <Method Sig="instance void set_BboxLeft(short )" />
          <Method Sig="instance short get_BboxTop()" />
          <Method Sig="instance void set_BboxTop(short )" />
          <Method Sig="instance short get_BboxRight()" />
          <Method Sig="instance void set_BboxRight(short )" />
          <Method Sig="instance short get_BboxBottom()" />
          <Method Sig="instance void set_BboxBottom(short )" />
          <Method Sig="instance short get_Inch()" />
          <Method Sig="instance void set_Inch(short )" />
          <Method Sig="instance int get_Reserved()" />
          <Method Sig="instance void set_Reserved(int )" />
          <Method Sig="instance short get_Checksum()" />
          <Method Sig="instance void set_Checksum(short )" />
          <Method Sig="instance void .ctor()" />
        </Type>
      </Namespace>
      <Type Name="ColorTranslator">
        <Method Sig="int ToWin32(struct Color )" />
        <Method Sig="int ToOle(struct Color )" />
        <Method Sig="struct Color FromOle(int )" />
        <Method Sig="struct Color FromWin32(int )" />
        <Method Sig="struct Color FromHtml(string )" />
        <Method Sig="string ToHtml(struct Color )" />
      </Type>
      <Type Name="Font">
        <Method Sig="instance void .ctor(class Font , struct FontStyle )" />
        <Method Sig="instance void .ctor(class FontFamily , float , struct FontStyle , struct GraphicsUnit )" />
        <Method Sig="instance void .ctor(class FontFamily , float , struct FontStyle , struct GraphicsUnit , byte )" />
        <Method Sig="instance void .ctor(class FontFamily , float , struct FontStyle , struct GraphicsUnit , byte , bool )" />
        <Method Sig="instance void .ctor(string , float , struct FontStyle , struct GraphicsUnit , byte )" />
        <Method Sig="instance void .ctor(string , float , struct FontStyle , struct GraphicsUnit , byte , bool )" />
        <Method Sig="instance void .ctor(class FontFamily , float , struct FontStyle )" />
        <Method Sig="instance void .ctor(class FontFamily , float , struct GraphicsUnit )" />
        <Method Sig="instance void .ctor(class FontFamily , float )" />
        <Method Sig="instance void .ctor(string , float , struct FontStyle , struct GraphicsUnit )" />
        <Method Sig="instance void .ctor(string , float , struct FontStyle )" />
        <Method Sig="instance void .ctor(string , float , struct GraphicsUnit )" />
        <Method Sig="instance void .ctor(string , float )" />
        <Method Sig="class Font FromHfont(intptr )" />
        <Method Sig="class Font FromLogFont(object )" />
        <Method Sig="class Font FromLogFont(object , intptr )" />
        <Method Sig="class Font FromHdc(intptr )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance class FontFamily get_FontFamily()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance bool get_Bold()" />
        <Method Sig="instance byte get_GdiCharSet()" />
        <Method Sig="instance bool get_GdiVerticalFont()" />
        <Method Sig="instance bool get_Italic()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance bool get_Strikeout()" />
        <Method Sig="instance bool get_Underline()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance void ToLogFont(object )" />
        <Method Sig="instance void ToLogFont(object , class Graphics )" />
        <Method Sig="instance intptr ToHfont()" />
        <Method Sig="instance float GetHeight(class Graphics )" />
        <Method Sig="instance float GetHeight()" />
        <Method Sig="instance float GetHeight(float )" />
        <Method Sig="instance struct FontStyle get_Style()" />
        <Method Sig="instance float get_Size()" />
        <Method Sig="instance float get_SizeInPoints()" />
        <Method Sig="instance struct GraphicsUnit get_Unit()" />
        <Method Sig="instance int get_Height()" />
        <Method Sig="instance bool get_IsSystemFont()" />
        <Method Sig="instance string get_SystemFontName()" />
      </Type>
      <Namespace Name="Text">
        <Type Name="FontCollection">
          <Method Sig="instance void Dispose()" />
          <Method Sig="instance [] class FontFamily get_Families()" />
        </Type>
        <Type Name="InstalledFontCollection">
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="PrivateFontCollection">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void AddFontFile(string )" />
          <Method Sig="instance void AddMemoryFont(intptr , int )" />
        </Type>
      </Namespace>
      <Type Name="FontFamily">
        <Method Sig="instance void .ctor(string )" />
        <Method Sig="instance void .ctor(string , class FontCollection )" />
        <Method Sig="instance void .ctor(struct GenericFontFamilies )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance string get_Name()" />
        <Method Sig="instance string GetName(int )" />
        <Method Sig="[] class FontFamily get_Families()" />
        <Method Sig="class FontFamily get_GenericSansSerif()" />
        <Method Sig="class FontFamily get_GenericSerif()" />
        <Method Sig="class FontFamily get_GenericMonospace()" />
        <Method Sig="[] class FontFamily GetFamilies(class Graphics )" />
        <Method Sig="instance bool IsStyleAvailable(struct FontStyle )" />
        <Method Sig="instance int GetEmHeight(struct FontStyle )" />
        <Method Sig="instance int GetCellAscent(struct FontStyle )" />
        <Method Sig="instance int GetCellDescent(struct FontStyle )" />
        <Method Sig="instance int GetLineSpacing(struct FontStyle )" />
      </Type>
      <Type Name="ImageFormatConverter">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
        <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
      </Type>
      <Type Name="PointF">
        <Method Sig="instance void .ctor(float , float )" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance float get_X()" />
        <Method Sig="instance void set_X(float )" />
        <Method Sig="instance float get_Y()" />
        <Method Sig="instance void set_Y(float )" />
        <Method Sig="struct PointF op_Addition(struct PointF , struct Size )" />
        <Method Sig="struct PointF op_Subtraction(struct PointF , struct Size )" />
        <Method Sig="struct PointF op_Addition(struct PointF , struct SizeF )" />
        <Method Sig="struct PointF op_Subtraction(struct PointF , struct SizeF )" />
        <Method Sig="bool op_Equality(struct PointF , struct PointF )" />
        <Method Sig="bool op_Inequality(struct PointF , struct PointF )" />
        <Method Sig="struct PointF Add(struct PointF , struct Size )" />
        <Method Sig="struct PointF Subtract(struct PointF , struct Size )" />
        <Method Sig="struct PointF Add(struct PointF , struct SizeF )" />
        <Method Sig="struct PointF Subtract(struct PointF , struct SizeF )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="RectangleF">
        <Method Sig="instance void .ctor(float , float , float , float )" />
        <Method Sig="instance void .ctor(struct PointF , struct SizeF )" />
        <Method Sig="struct RectangleF FromLTRB(float , float , float , float )" />
        <Method Sig="instance struct PointF get_Location()" />
        <Method Sig="instance void set_Location(struct PointF )" />
        <Method Sig="instance struct SizeF get_Size()" />
        <Method Sig="instance void set_Size(struct SizeF )" />
        <Method Sig="instance float get_X()" />
        <Method Sig="instance void set_X(float )" />
        <Method Sig="instance float get_Y()" />
        <Method Sig="instance void set_Y(float )" />
        <Method Sig="instance float get_Width()" />
        <Method Sig="instance void set_Width(float )" />
        <Method Sig="instance float get_Height()" />
        <Method Sig="instance void set_Height(float )" />
        <Method Sig="instance float get_Left()" />
        <Method Sig="instance float get_Top()" />
        <Method Sig="instance float get_Right()" />
        <Method Sig="instance float get_Bottom()" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="bool op_Equality(struct RectangleF , struct RectangleF )" />
        <Method Sig="bool op_Inequality(struct RectangleF , struct RectangleF )" />
        <Method Sig="instance bool Contains(float , float )" />
        <Method Sig="instance bool Contains(struct PointF )" />
        <Method Sig="instance bool Contains(struct RectangleF )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance void Inflate(float , float )" />
        <Method Sig="instance void Inflate(struct SizeF )" />
        <Method Sig="struct RectangleF Inflate(struct RectangleF , float , float )" />
        <Method Sig="instance void Intersect(struct RectangleF )" />
        <Method Sig="struct RectangleF Intersect(struct RectangleF , struct RectangleF )" />
        <Method Sig="instance bool IntersectsWith(struct RectangleF )" />
        <Method Sig="struct RectangleF Union(struct RectangleF , struct RectangleF )" />
        <Method Sig="instance void Offset(struct PointF )" />
        <Method Sig="instance void Offset(float , float )" />
        <Method Sig="struct RectangleF op_Implicit(struct Rectangle )" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SizeF">
        <Method Sig="instance void .ctor(struct SizeF )" />
        <Method Sig="instance void .ctor(struct PointF )" />
        <Method Sig="instance void .ctor(float , float )" />
        <Method Sig="struct SizeF op_Addition(struct SizeF , struct SizeF )" />
        <Method Sig="struct SizeF op_Subtraction(struct SizeF , struct SizeF )" />
        <Method Sig="bool op_Equality(struct SizeF , struct SizeF )" />
        <Method Sig="bool op_Inequality(struct SizeF , struct SizeF )" />
        <Method Sig="struct PointF op_Explicit(struct SizeF )" />
        <Method Sig="instance bool get_IsEmpty()" />
        <Method Sig="instance float get_Width()" />
        <Method Sig="instance void set_Width(float )" />
        <Method Sig="instance float get_Height()" />
        <Method Sig="instance void set_Height(float )" />
        <Method Sig="struct SizeF Add(struct SizeF , struct SizeF )" />
        <Method Sig="struct SizeF Subtract(struct SizeF , struct SizeF )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="instance int GetHashCode()" />
        <Method Sig="instance struct PointF ToPointF()" />
        <Method Sig="instance struct Size ToSize()" />
        <Method Sig="instance string ToString()" />
        <Method Sig="void .cctor()" />
      </Type>
      <Type Name="SizeFConverter">
        <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
        <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
        <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
        <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
        <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance class PropertyDescriptorCollection GetProperties(class ITypeDescriptorContext , object , [] class Attribute )" />
        <Method Sig="instance bool GetPropertiesSupported(class ITypeDescriptorContext )" />
        <Method Sig="instance void .ctor()" />
      </Type>
      <Type Name="CharacterRange">
        <Method Sig="instance void .ctor(int , int )" />
        <Method Sig="instance int get_First()" />
        <Method Sig="instance void set_First(int )" />
        <Method Sig="instance int get_Length()" />
        <Method Sig="instance void set_Length(int )" />
        <Method Sig="instance bool Equals(object )" />
        <Method Sig="bool op_Equality(struct CharacterRange , struct CharacterRange )" />
        <Method Sig="bool op_Inequality(struct CharacterRange , struct CharacterRange )" />
        <Method Sig="instance int GetHashCode()" />
      </Type>
      <Type Name="StringFormat">
        <Method Sig="instance void .ctor()" />
        <Method Sig="instance void .ctor(struct StringFormatFlags )" />
        <Method Sig="instance void .ctor(struct StringFormatFlags , int )" />
        <Method Sig="instance void .ctor(class StringFormat )" />
        <Method Sig="instance void Dispose()" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance struct StringFormatFlags get_FormatFlags()" />
        <Method Sig="instance void set_FormatFlags(struct StringFormatFlags )" />
        <Method Sig="instance void SetMeasurableCharacterRanges([] struct CharacterRange )" />
        <Method Sig="instance struct StringAlignment get_Alignment()" />
        <Method Sig="instance void set_Alignment(struct StringAlignment )" />
        <Method Sig="instance struct StringAlignment get_LineAlignment()" />
        <Method Sig="instance void set_LineAlignment(struct StringAlignment )" />
        <Method Sig="instance struct HotkeyPrefix get_HotkeyPrefix()" />
        <Method Sig="instance void set_HotkeyPrefix(struct HotkeyPrefix )" />
        <Method Sig="instance void SetTabStops(float , [] float )" />
        <Method Sig="instance [] float GetTabStops(&amp; float )" />
        <Method Sig="instance struct StringTrimming get_Trimming()" />
        <Method Sig="instance void set_Trimming(struct StringTrimming )" />
        <Method Sig="class StringFormat get_GenericDefault()" />
        <Method Sig="class StringFormat get_GenericTypographic()" />
        <Method Sig="instance void SetDigitSubstitution(int , struct StringDigitSubstitute )" />
        <Method Sig="instance struct StringDigitSubstitute get_DigitSubstitutionMethod()" />
        <Method Sig="instance int get_DigitSubstitutionLanguage()" />
        <Method Sig="instance string ToString()" />
      </Type>
      <Type Name="TextureBrush">
        <Method Sig="instance void .ctor(class Image )" />
        <Method Sig="instance void .ctor(class Image , struct WrapMode )" />
        <Method Sig="instance void .ctor(class Image , struct WrapMode , struct RectangleF )" />
        <Method Sig="instance void .ctor(class Image , struct WrapMode , struct Rectangle )" />
        <Method Sig="instance void .ctor(class Image , struct RectangleF )" />
        <Method Sig="instance void .ctor(class Image , struct RectangleF , class ImageAttributes )" />
        <Method Sig="instance void .ctor(class Image , struct Rectangle )" />
        <Method Sig="instance void .ctor(class Image , struct Rectangle , class ImageAttributes )" />
        <Method Sig="instance object Clone()" />
        <Method Sig="instance class Matrix get_Transform()" />
        <Method Sig="instance void set_Transform(class Matrix )" />
        <Method Sig="instance struct WrapMode get_WrapMode()" />
        <Method Sig="instance void set_WrapMode(struct WrapMode )" />
        <Method Sig="instance class Image get_Image()" />
        <Method Sig="instance void ResetTransform()" />
        <Method Sig="instance void MultiplyTransform(class Matrix )" />
        <Method Sig="instance void MultiplyTransform(class Matrix , struct MatrixOrder )" />
        <Method Sig="instance void TranslateTransform(float , float )" />
        <Method Sig="instance void TranslateTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void ScaleTransform(float , float )" />
        <Method Sig="instance void ScaleTransform(float , float , struct MatrixOrder )" />
        <Method Sig="instance void RotateTransform(float )" />
        <Method Sig="instance void RotateTransform(float , struct MatrixOrder )" />
      </Type>
      <Namespace Name="Design">
        <Type Name="CategoryNameCollection">
          <Method Sig="instance void .ctor(class CategoryNameCollection )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Item(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Contains(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void CopyTo([] string , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int IndexOf(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="PaintValueEventArgs">
          <Method Sig="instance void .ctor(class ITypeDescriptorContext , object , class Graphics , struct Rectangle )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance struct Rectangle get_Bounds()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ITypeDescriptorContext get_Context()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Graphics get_Graphics()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object get_Value()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="PropertyValueUIHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(class ITypeDescriptorContext , class PropertyDescriptor , class ArrayList )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class ITypeDescriptorContext , class PropertyDescriptor , class ArrayList , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="PropertyValueUIItem">
          <Method Sig="instance void .ctor(class Image , class PropertyValueUIItemInvokeHandler , string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Image get_Image()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class PropertyValueUIItemInvokeHandler get_InvokeHandler()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_ToolTip()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Reset()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="PropertyValueUIItemInvokeHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(class ITypeDescriptorContext , class PropertyDescriptor , class PropertyValueUIItem )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(class ITypeDescriptorContext , class PropertyDescriptor , class PropertyValueUIItem , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ToolboxComponentsCreatedEventArgs">
          <Method Sig="instance void .ctor([] class IComponent )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class IComponent get_Components()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ToolboxComponentsCreatedEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ToolboxComponentsCreatedEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ToolboxComponentsCreatedEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ToolboxComponentsCreatingEventArgs">
          <Method Sig="instance void .ctor(class IDesignerHost )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDesignerHost get_DesignerHost()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ToolboxComponentsCreatingEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class ToolboxComponentsCreatingEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class ToolboxComponentsCreatingEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="ToolboxItem">
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class AssemblyName get_AssemblyName()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_AssemblyName(class AssemblyName )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class AssemblyName get_DependentAssemblies()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_DependentAssemblies([] class AssemblyName )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Bitmap get_Bitmap()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Bitmap(class Bitmap )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Company()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Company(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_ComponentType()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Description()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Description(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_DisplayName()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_DisplayName(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ICollection get_Filter()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_Filter(class ICollection )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsTransient()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_IsTransient(bool )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_Locked()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class IDictionary get_Properties()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_TypeName()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void set_TypeName(string )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string get_Version()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void add_ComponentsCreated(class ToolboxComponentsCreatedEventHandler )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void remove_ComponentsCreated(class ToolboxComponentsCreatedEventHandler )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void add_ComponentsCreating(class ToolboxComponentsCreatingEventHandler )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void remove_ComponentsCreating(class ToolboxComponentsCreatingEventHandler )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class IComponent CreateComponents()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class IComponent CreateComponents(class IDesignerHost )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance [] class IComponent CreateComponents(class IDesignerHost , class IDictionary )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Unrestricted="true" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Equals(object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int GetHashCode()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class Type GetType(class IDesignerHost )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Initialize(class Type )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            </Demand>
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void Lock()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance string ToString()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ToolboxItemCollection">
          <Method Sig="instance void .ctor(class ToolboxItemCollection )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor([] class ToolboxItem )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance class ToolboxItem get_Item(int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool Contains(class ToolboxItem )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void CopyTo([] class ToolboxItem , int )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance int IndexOf(class ToolboxItem )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
        <Type Name="ToolboxItemCreatorCallback">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance class ToolboxItem Invoke(object , string )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , string , class AsyncCallback , object )" />
          <Method Sig="instance class ToolboxItem EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="UITypeEditor">
          <Method Sig="void .cctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void .ctor()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool get_IsDropDownResizable()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object EditValue(class IServiceProvider , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance object EditValue(class ITypeDescriptorContext , class IServiceProvider , object )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance struct UITypeEditorEditStyle GetEditStyle()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool GetPaintValueSupported()">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance bool GetPaintValueSupported(class ITypeDescriptorContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance struct UITypeEditorEditStyle GetEditStyle(class ITypeDescriptorContext )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void PaintValue(object , class Graphics , struct Rectangle )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
          <Method Sig="instance void PaintValue(class PaintValueEventArgs )">
            <LinkDemand>
              <PermissionSet version="1" class="System.Security.PermissionSet" Unrestricted="true" />
            </LinkDemand>
          </Method>
        </Type>
      </Namespace>
      <Namespace Name="Printing">
        <Type Name="PrintController">
          <Method Sig="instance bool get_IsPreview()" />
          <Method Sig="instance void OnStartPrint(class PrintDocument , class PrintEventArgs )" />
          <Method Sig="instance class Graphics OnStartPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPrint(class PrintDocument , class PrintEventArgs )" />
        </Type>
        <Type Name="StandardPrintController">
          <Method Sig="instance void OnStartPrint(class PrintDocument , class PrintEventArgs )" />
          <Method Sig="instance class Graphics OnStartPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPrint(class PrintDocument , class PrintEventArgs )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="InvalidPrinterException">
          <Method Sig="instance void .ctor(class PrinterSettings )" />
          <Method Sig="instance void GetObjectData(class SerializationInfo , struct StreamingContext )">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission version="1" class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission version="1" class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" Flags="SerializationFormatter" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="Margins">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(int , int , int , int )" />
          <Method Sig="instance int get_Left()" />
          <Method Sig="instance void set_Left(int )" />
          <Method Sig="instance int get_Right()" />
          <Method Sig="instance void set_Right(int )" />
          <Method Sig="instance int get_Top()" />
          <Method Sig="instance void set_Top(int )" />
          <Method Sig="instance int get_Bottom()" />
          <Method Sig="instance void set_Bottom(int )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance bool Equals(object )" />
          <Method Sig="instance int GetHashCode()" />
          <Method Sig="bool op_Equality(class Margins , class Margins )" />
          <Method Sig="bool op_Inequality(class Margins , class Margins )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="MarginsConverter">
          <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
          <Method Sig="instance bool CanConvertTo(class ITypeDescriptorContext , class Type )" />
          <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
          <Method Sig="instance object ConvertTo(class ITypeDescriptorContext , class CultureInfo , object , class Type )" />
          <Method Sig="instance object CreateInstance(class ITypeDescriptorContext , class IDictionary )" />
          <Method Sig="instance bool GetCreateInstanceSupported(class ITypeDescriptorContext )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="PageSettings">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(class PrinterSettings )" />
          <Method Sig="instance struct Rectangle get_Bounds()" />
          <Method Sig="instance bool get_Color()" />
          <Method Sig="instance void set_Color(bool )" />
          <Method Sig="instance float get_HardMarginX()" />
          <Method Sig="instance float get_HardMarginY()" />
          <Method Sig="instance bool get_Landscape()" />
          <Method Sig="instance void set_Landscape(bool )" />
          <Method Sig="instance class Margins get_Margins()" />
          <Method Sig="instance void set_Margins(class Margins )" />
          <Method Sig="instance class PaperSize get_PaperSize()" />
          <Method Sig="instance void set_PaperSize(class PaperSize )" />
          <Method Sig="instance class PaperSource get_PaperSource()" />
          <Method Sig="instance void set_PaperSource(class PaperSource )" />
          <Method Sig="instance struct RectangleF get_PrintableArea()" />
          <Method Sig="instance class PrinterResolution get_PrinterResolution()" />
          <Method Sig="instance void set_PrinterResolution(class PrinterResolution )" />
          <Method Sig="instance class PrinterSettings get_PrinterSettings()" />
          <Method Sig="instance void set_PrinterSettings(class PrinterSettings )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance void CopyToHdevmode(intptr )" />
          <Method Sig="instance void SetHdevmode(intptr )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PaperSize">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance void .ctor(string , int , int )" />
          <Method Sig="instance int get_Height()" />
          <Method Sig="instance void set_Height(int )" />
          <Method Sig="instance struct PaperKind get_Kind()" />
          <Method Sig="instance string get_PaperName()" />
          <Method Sig="instance void set_PaperName(string )" />
          <Method Sig="instance int get_RawKind()" />
          <Method Sig="instance void set_RawKind(int )" />
          <Method Sig="instance int get_Width()" />
          <Method Sig="instance void set_Width(int )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PaperSource">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct PaperSourceKind get_Kind()" />
          <Method Sig="instance int get_RawKind()" />
          <Method Sig="instance void set_RawKind(int )" />
          <Method Sig="instance string get_SourceName()" />
          <Method Sig="instance void set_SourceName(string )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PreviewPageInfo">
          <Method Sig="instance void .ctor(class Image , struct Size )" />
          <Method Sig="instance class Image get_Image()" />
          <Method Sig="instance struct Size get_PhysicalSize()" />
        </Type>
        <Type Name="PreviewPrintController">
          <Method Sig="instance bool get_IsPreview()" />
          <Method Sig="instance void OnStartPrint(class PrintDocument , class PrintEventArgs )" />
          <Method Sig="instance class Graphics OnStartPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPage(class PrintDocument , class PrintPageEventArgs )" />
          <Method Sig="instance void OnEndPrint(class PrintDocument , class PrintEventArgs )" />
          <Method Sig="instance [] class PreviewPageInfo GetPreviewPageInfo()" />
          <Method Sig="instance bool get_UseAntiAlias()" />
          <Method Sig="instance void set_UseAntiAlias(bool )" />
          <Method Sig="instance void .ctor()" />
        </Type>
        <Type Name="PrintDocument">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance class PageSettings get_DefaultPageSettings()" />
          <Method Sig="instance void set_DefaultPageSettings(class PageSettings )" />
          <Method Sig="instance string get_DocumentName()" />
          <Method Sig="instance void set_DocumentName(string )" />
          <Method Sig="instance bool get_OriginAtMargins()" />
          <Method Sig="instance void set_OriginAtMargins(bool )" />
          <Method Sig="instance class PrintController get_PrintController()" />
          <Method Sig="instance void set_PrintController(class PrintController )" />
          <Method Sig="instance class PrinterSettings get_PrinterSettings()" />
          <Method Sig="instance void set_PrinterSettings(class PrinterSettings )" />
          <Method Sig="instance void add_BeginPrint(class PrintEventHandler )" />
          <Method Sig="instance void remove_BeginPrint(class PrintEventHandler )" />
          <Method Sig="instance void add_EndPrint(class PrintEventHandler )" />
          <Method Sig="instance void remove_EndPrint(class PrintEventHandler )" />
          <Method Sig="instance void add_PrintPage(class PrintPageEventHandler )" />
          <Method Sig="instance void remove_PrintPage(class PrintPageEventHandler )" />
          <Method Sig="instance void add_QueryPageSettings(class QueryPageSettingsEventHandler )" />
          <Method Sig="instance void remove_QueryPageSettings(class QueryPageSettingsEventHandler )" />
          <Method Sig="instance void Print()" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PrinterResolution">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct PrinterResolutionKind get_Kind()" />
          <Method Sig="instance void set_Kind(struct PrinterResolutionKind )" />
          <Method Sig="instance int get_X()" />
          <Method Sig="instance void set_X(int )" />
          <Method Sig="instance int get_Y()" />
          <Method Sig="instance void set_Y(int )" />
          <Method Sig="instance string ToString()" />
        </Type>
        <Type Name="PrinterSettings">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance bool get_CanDuplex()" />
          <Method Sig="instance short get_Copies()" />
          <Method Sig="instance void set_Copies(short )" />
          <Method Sig="instance bool get_Collate()" />
          <Method Sig="instance void set_Collate(bool )" />
          <Method Sig="instance class PageSettings get_DefaultPageSettings()" />
          <Method Sig="instance struct Duplex get_Duplex()" />
          <Method Sig="instance void set_Duplex(struct Duplex )" />
          <Method Sig="instance int get_FromPage()" />
          <Method Sig="instance void set_FromPage(int )" />
          <Method Sig="class StringCollection get_InstalledPrinters()" />
          <Method Sig="instance bool get_IsDefaultPrinter()" />
          <Method Sig="instance bool get_IsPlotter()" />
          <Method Sig="instance bool get_IsValid()" />
          <Method Sig="instance int get_LandscapeAngle()" />
          <Method Sig="instance int get_MaximumCopies()" />
          <Method Sig="instance int get_MaximumPage()" />
          <Method Sig="instance void set_MaximumPage(int )" />
          <Method Sig="instance int get_MinimumPage()" />
          <Method Sig="instance void set_MinimumPage(int )" />
          <Method Sig="instance string get_PrintFileName()" />
          <Method Sig="instance void set_PrintFileName(string )" />
          <Method Sig="instance class PaperSizeCollection get_PaperSizes()" />
          <Method Sig="instance class PaperSourceCollection get_PaperSources()" />
          <Method Sig="instance struct PrintRange get_PrintRange()" />
          <Method Sig="instance void set_PrintRange(struct PrintRange )" />
          <Method Sig="instance bool get_PrintToFile()" />
          <Method Sig="instance void set_PrintToFile(bool )" />
          <Method Sig="instance string get_PrinterName()" />
          <Method Sig="instance void set_PrinterName(string )" />
          <Method Sig="instance class PrinterResolutionCollection get_PrinterResolutions()" />
          <Method Sig="instance bool IsDirectPrintingSupported(class ImageFormat )" />
          <Method Sig="instance bool IsDirectPrintingSupported(class Image )" />
          <Method Sig="instance bool get_SupportsColor()" />
          <Method Sig="instance int get_ToPage()" />
          <Method Sig="instance void set_ToPage(int )" />
          <Method Sig="instance object Clone()" />
          <Method Sig="instance class Graphics CreateMeasurementGraphics()" />
          <Method Sig="instance class Graphics CreateMeasurementGraphics(bool )" />
          <Method Sig="instance class Graphics CreateMeasurementGraphics(class PageSettings )" />
          <Method Sig="instance class Graphics CreateMeasurementGraphics(class PageSettings , bool )" />
          <Method Sig="instance intptr GetHdevmode()" />
          <Method Sig="instance intptr GetHdevmode(class PageSettings )" />
          <Method Sig="instance intptr GetHdevnames()" />
          <Method Sig="instance void SetHdevmode(intptr )" />
          <Method Sig="instance void SetHdevnames(intptr )" />
          <Method Sig="instance string ToString()">
            <Demand>
              <PermissionSet version="1" class="System.Security.PermissionSet">
                <IPermission Level="SafePrinting" version="1" class="System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
              </PermissionSet>
            </Demand>
          </Method>
        </Type>
        <Type Name="PrinterUnitConvert">
          <Method Sig="double Convert(double , struct PrinterUnit , struct PrinterUnit )" />
          <Method Sig="int Convert(int , struct PrinterUnit , struct PrinterUnit )" />
          <Method Sig="struct Point Convert(struct Point , struct PrinterUnit , struct PrinterUnit )" />
          <Method Sig="struct Size Convert(struct Size , struct PrinterUnit , struct PrinterUnit )" />
          <Method Sig="struct Rectangle Convert(struct Rectangle , struct PrinterUnit , struct PrinterUnit )" />
          <Method Sig="class Margins Convert(class Margins , struct PrinterUnit , struct PrinterUnit )" />
        </Type>
        <Type Name="PrintEventArgs">
          <Method Sig="instance void .ctor()" />
          <Method Sig="instance struct PrintAction get_PrintAction()" />
        </Type>
        <Type Name="PrintEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class PrintEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class PrintEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="PrintingPermission">
          <Method Sig="instance void .ctor(struct PermissionState )" />
          <Method Sig="instance void .ctor(struct PrintingPermissionLevel )" />
          <Method Sig="instance struct PrintingPermissionLevel get_Level()" />
          <Method Sig="instance void set_Level(struct PrintingPermissionLevel )" />
          <Method Sig="instance bool IsUnrestricted()" />
          <Method Sig="instance bool IsSubsetOf(class IPermission )" />
          <Method Sig="instance class IPermission Intersect(class IPermission )" />
          <Method Sig="instance class IPermission Union(class IPermission )" />
          <Method Sig="instance class IPermission Copy()" />
          <Method Sig="instance class SecurityElement ToXml()" />
          <Method Sig="instance void FromXml(class SecurityElement )" />
        </Type>
        <Type Name="PrintingPermissionAttribute">
          <Method Sig="instance void .ctor(struct SecurityAction )" />
          <Method Sig="instance struct PrintingPermissionLevel get_Level()" />
          <Method Sig="instance void set_Level(struct PrintingPermissionLevel )" />
          <Method Sig="instance class IPermission CreatePermission()" />
        </Type>
        <Type Name="PrintPageEventArgs">
          <Method Sig="instance void .ctor(class Graphics , struct Rectangle , struct Rectangle , class PageSettings )" />
          <Method Sig="instance bool get_Cancel()" />
          <Method Sig="instance void set_Cancel(bool )" />
          <Method Sig="instance class Graphics get_Graphics()" />
          <Method Sig="instance bool get_HasMorePages()" />
          <Method Sig="instance void set_HasMorePages(bool )" />
          <Method Sig="instance struct Rectangle get_MarginBounds()" />
          <Method Sig="instance struct Rectangle get_PageBounds()" />
          <Method Sig="instance class PageSettings get_PageSettings()" />
        </Type>
        <Type Name="PrintPageEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class PrintPageEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class PrintPageEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
        <Type Name="QueryPageSettingsEventArgs">
          <Method Sig="instance void .ctor(class PageSettings )" />
          <Method Sig="instance class PageSettings get_PageSettings()" />
          <Method Sig="instance void set_PageSettings(class PageSettings )" />
        </Type>
        <Type Name="QueryPageSettingsEventHandler">
          <Method Sig="instance void .ctor(object , intptr )" />
          <Method Sig="instance void Invoke(object , class QueryPageSettingsEventArgs )" />
          <Method Sig="instance class IAsyncResult BeginInvoke(object , class QueryPageSettingsEventArgs , class AsyncCallback , object )" />
          <Method Sig="instance void EndInvoke(class IAsyncResult )" />
        </Type>
      </Namespace>
    </Namespace>
  </Namespace>
  <Type Name="GetThumbnailImageAbort">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance bool Invoke()" />
    <Method Sig="instance class IAsyncResult BeginInvoke(class AsyncCallback , object )" />
    <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="FontNameConverter">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance bool CanConvertFrom(class ITypeDescriptorContext , class Type )" />
    <Method Sig="instance object ConvertFrom(class ITypeDescriptorContext , class CultureInfo , object )" />
    <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
    <Method Sig="instance bool GetStandardValuesExclusive(class ITypeDescriptorContext )" />
    <Method Sig="instance bool GetStandardValuesSupported(class ITypeDescriptorContext )" />
  </Type>
  <Type Name="FontUnitConverter">
    <Method Sig="instance void .ctor()" />
    <Method Sig="instance class StandardValuesCollection GetStandardValues(class ITypeDescriptorContext )" />
  </Type>
  <Type Name="DrawImageAbort">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance bool Invoke(intptr )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(intptr , class AsyncCallback , object )" />
    <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="EnumerateMetafileProc">
    <Method Sig="instance void .ctor(object , intptr )" />
    <Method Sig="instance bool Invoke(struct EmfPlusRecordType , int , int , intptr , class PlayRecordCallback )" />
    <Method Sig="instance class IAsyncResult BeginInvoke(struct EmfPlusRecordType , int , int , intptr , class PlayRecordCallback , class AsyncCallback , object )" />
    <Method Sig="instance bool EndInvoke(class IAsyncResult )" />
  </Type>
  <Type Name="ENHMETAHEADER">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="DOCINFO">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="PRINTDLG">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="PRINTDLGX86">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="ICONINFO">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="BITMAP">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="BITMAPINFOHEADER">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="Ole">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="PICTDESC">
    <Method Sig="class PICTDESC CreateIconPICTDESC(intptr )" />
    <Method Sig="instance intptr GetHandle()" />
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="DEVMODE">
    <Method Sig="instance string ToString()" />
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="StreamConsts">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="STATSTG">
    <Method Sig="instance void .ctor()" />
  </Type>
  <Type Name="PaperSizeCollection">
    <Method Sig="instance void .ctor([] class PaperSize )" />
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance class PaperSize get_Item(int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance void CopyTo([] class PaperSize , int )" />
    <Method Sig="instance int Add(class PaperSize )" />
  </Type>
  <Type Name="PaperSourceCollection">
    <Method Sig="instance void .ctor([] class PaperSource )" />
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance class PaperSource get_Item(int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance void CopyTo([] class PaperSource , int )" />
    <Method Sig="instance int Add(class PaperSource )" />
  </Type>
  <Type Name="PrinterResolutionCollection">
    <Method Sig="instance void .ctor([] class PrinterResolution )" />
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance class PrinterResolution get_Item(int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance void CopyTo([] class PrinterResolution , int )" />
    <Method Sig="instance int Add(class PrinterResolution )" />
  </Type>
  <Type Name="StringCollection">
    <Method Sig="instance void .ctor([] string )" />
    <Method Sig="instance int get_Count()" />
    <Method Sig="instance string get_Item(int )" />
    <Method Sig="instance class IEnumerator GetEnumerator()" />
    <Method Sig="instance void CopyTo([] string , int )" />
    <Method Sig="instance int Add(string )" />
  </Type>
</Assembly>
